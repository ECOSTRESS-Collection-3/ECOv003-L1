#! /usr/bin/env python
#
# This runs the L1C process.
import warnings
# Have a warning message that we can't do anything about - suppress it
with warnings.catch_warnings():
    warnings.filterwarnings("ignore", category=UserWarning)
    import geocal
import ecostress
import os
import math
import h5py
from multiprocessing import Pool
import numpy as np
import io
from loguru import logger

# Get version information, in the top directory
import sys

sys.path.append(os.path.dirname(os.path.abspath(sys.path[0])))
from ecostress_version import pge_version, build_id, collection_label

version = "1.0"
usage = """Usage:
  l1c_process [options] <run_config>
  l1c_process [options] <l1b_rad> <l1b_geo> <osp_dir> <prod_dir>
  l1c_process -h | --help
  l1c_process -v | --version

This runs the L1C process.

Options:
  -h --help         
       Print this message

  --verbose
       Print more information as we run to stderr.

  -v --version      
       Print program version
"""

args = geocal.docopt_simple(usage, version=version)

if args.run_config:
    config = ecostress.RunConfig(args.run_config)
    l1_osp_dir = os.path.abspath(config["StaticAncillaryFileGroup", "L1_OSP_DIR"])
else:
    config = None
    l1_osp_dir = os.path.abspath(args.osp_dir)

# Read in additional configuration parameters
sys.path.append(l1_osp_dir)
import l1c_config

logger.remove()
if args.verbose:
    logger.add(sys.stderr, level="DEBUG")
else:
    logger.add(sys.stderr, level="INFO")

if args.run_config:
    dirname = config["ProductPathGroup", "ProductPath"]
    file_version = config["ProductPathGroup", "ProductCounter"]
    l1b_rad_fname = os.path.abspath(config["InputFileGroup", "L1B_RAD"])
    l1b_geo_fname = os.path.abspath(config["InputFileGroup", "L1B_RAD"])
    build_id = config["PrimaryExecutable", "BuildID"]
    collection_label = config["ProductPathGroup", "CollectionLabel"]
else:
    dirname = os.path.abspath(args.prod_dir)
    file_version = "01"
    l1b_rad_fname = os.path.abspath(args.l1b_rad)
    l1b_geo_fname = os.path.abspath(args.l1b_geo)

    
l1b_rad = h5py.File(l1b_rad_fname, "r")
l1b_geo = h5py.File(l1b_geo_fname, "r")
orbit, scene, acquisition_time = ecostress.orbit_from_metadata(l1b_rad_fname)

geocal.makedirs_p(dirname)
os.chdir(dirname)

ofile = ecostress.ecostress_file_name("ECOv002_L1CG_RAD", orbit, scene, acquisition_time,
                                      collection_label=collection_label, build=build_id,
                                      version=file_version)
logger.add(os.path.splitext(ofile)[0] + ".log", level="DEBUG")

try:
    with logger.catch(reraise=True):
        l1c = ecostress.L1cgGenerate(l1b_geo, l1b_rad, ofile)
        l1c.run()
except Exception:
    logger.info("L1C_PGE:ERROR-2-[Unexpected Error]")
    raise
except:
    logger.info("L1C_PGE:ERROR-2-[Unexpected Error]")
    raise
        
