#! /usr/bin/env python
#
# This runs the L1A Cal process.

import warnings
# Have a warning message that we can't do anything about - suppress it
with warnings.catch_warnings():
    warnings.filterwarnings("ignore", category=UserWarning)
    import geocal
import ecostress
import os
from loguru import logger

# Get version information, in the top directory
import sys

sys.path.append(os.path.dirname(os.path.abspath(sys.path[0])))
from ecostress_version import pge_version, collection_label, build_id

version = "1.0"
usage = """Usage:
  l1a_cal_process [options] <run_config>
  l1a_cal_process [options] <l1a_bb> <l1a_raw_pix> <osp_dir> <prod_dir>
  l1a_cal_process -h | --help
  l1a_cal_process -v | --version

This runs the L1A Cal process.

Options:
  -h --help         
       Print this message

  --verbose
       Print more information as we run to stderr.

  -v --version      
       Print program version
"""

args = geocal.docopt_simple(usage, version=version)

# Can use this to wait a short time so we can attach strace to this
# process, useful to find all the files that we are accessing.
if False:
    print("Waiting a short time")
    import time

    time.sleep(20)

# Explicitly list input file
if args.run_config:
    config = ecostress.RunConfig(args.run_config)
    l1a_bb = os.path.abspath(config["InputFileGroup", "L1A_BB"])
    l1a_raw_pix = os.path.abspath(config["InputFileGroup", "L1A_RAW_PIX"])
    l1_osp_dir = os.path.abspath(config["StaticAncillaryFileGroup", "L1_OSP_DIR"])
    dirname = config["ProductPathGroup", "ProductPath"]
    file_version = config["ProductPathGroup", "ProductCounter"]
    collection_label = config["ProductPathGroup", "CollectionLabel"]
    build_id = config["PrimaryExecutable", "BuildID"]
else:
    config = None
    l1a_bb = os.path.abspath(args.l1a_bb)
    l1a_raw_pix = os.path.abspath(args.l1a_raw_pix)
    l1_osp_dir = os.path.abspath(args.osp_dir)
    dirname = os.path.abspath(args.prod_dir)
    file_version = "01"

logger.remove()
if args.verbose:
    logger.add(sys.stderr, level="DEBUG")
else:
    logger.add(sys.stderr, level="INFO")

geocal.makedirs_p(dirname)
os.chdir(dirname)

orbit, scene, acquisition_time = ecostress.orbit_from_metadata(l1a_raw_pix)
ofile = ecostress.ecostress_file_name(
    "L1A_PIX",
    orbit,
    scene,
    acquisition_time,
    collection_label=collection_label,
    build=build_id,
    version=file_version,
)
ofile_gain = ecostress.ecostress_file_name(
    "L1A_RAD_GAIN",
    orbit,
    scene,
    acquisition_time,
    collection_label=collection_label,
    build=build_id,
    version=file_version,
    intermediate=True,
)
logger.add(os.path.splitext(ofile)[0] + ".log", level="DEBUG")
try:
    with logger.catch(reraise=True):
        # Generate output
        l1apix = ecostress.L1aPixGenerate(
            l1a_bb,
            l1a_raw_pix,
            l1_osp_dir,
            ofile,
            ofile_gain,
            run_config=config,
            collection_label=collection_label,
            build_id=build_id,
            pge_version=pge_version["l1a_cal"],
            file_version=file_version,
        )
        l1apix.run()
        logger.info("L1A_CAL_PGE:INFO-0-[Job Successful]")
except ecostress.VicarRunError as e:
    logger.info("L1A_CAL_PGE:ERROR-1-[%s]" % e.message)
    raise
except Exception:
    logger.info("L1A_CAL_PGE:ERROR-2-[Unexpected Error]")
    raise
except:
    logger.info("L1A_CAL_PGE:ERROR-2-[Unexpected Error]")
    raise
