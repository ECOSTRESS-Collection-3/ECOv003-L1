#! /usr/bin/env python
#
# This runs the L1A Cal process.

from geocal import *
from ecostress import *
import os
import re

version = "1.0"
usage='''Usage:
  l1a_cal_process [options] <run_config>
  l1a_cal_process -h | --help
  l1a_cal_process -v | --version

This runs the L1A Cal process.

Options:
  -h --help         
       Print this message

  --verbose
       Print more information as we run to stdout.

  -v --version      
       Print program version
'''

args = docopt_simple(usage, version=version)

# Can use this to wait a short time so we can attach strace to this
# process, useful to find all the files that we are accessing.
if(False):
    print("Waiting a short time")
    import time
    time.sleep(20)

# Explicitly list input file
config = RunConfig(args.run_config)

# Not sure where this will from eventually, but for now just hardcode
build_id = "0.20"
pge_version = "0.20"
build_version = "0100"

l1a_bb = os.path.abspath(config["InputFileGroup", "L1A_BB"])
l1a_eng = os.path.abspath(config["InputFileGroup", "L1A_ENG"])
l1a_raw_pix = os.path.abspath(config["InputFileGroup", "L1A_RAW_PIX"])
l1_osp_dir = os.path.abspath(config["StaticAncillaryFileGroup", "L1_OSP_DIR"])
dirname = config["ProductPathGroup", "ProductPath"]
file_version = config["ProductPathGroup", "ProductCounter"]
quiet = not args.verbose

makedirs_p(dirname)
os.chdir(dirname)

orbit, scene, acquisition_time = orbit_from_metadata(l1a_raw_pix)
ofile = ecostress_file_name("L1A_PIX", orbit, scene, acquisition_time,
                            build = build_version, version = file_version)
ofile_gain = ecostress_file_name("L1A_TEMPORARY_GAIN", orbit, scene,
                                 acquisition_time,
                                 build = build_version, version = file_version)
log_fname = os.path.splitext(ofile)[0] + ".log"
log = open(log_fname, "w")
try:
# Generate output
    l1apix = L1aPixGenerate(l1a_bb, l1a_raw_pix, l1a_eng, l1_osp_dir,
                            ofile, ofile_gain,
                            log=log, quiet=quiet, run_config=config,
                            build_id=build_id, pge_version=pge_version,
                            file_version=file_version)
    l1apix.run()
    # Write out a dummy log file
    print("L1A_CAL_PGE:INFO-0-[Job Successful]", file=log)
    log.flush()
except VicarRunException as e:
    print("L1A_CAL_PGE:ERROR-1-[%s]" % e.message, file=log)
    log.flush()
    raise
except:
    print("L1A_CAL_PGE:ERROR-2-[Unexpected Error]", file=log)
    log.flush()
    raise


