#! /usr/bin/env python
#
# Create a KMZ file giving a picture of the MAP data
import geocal
import subprocess
import h5py
import os
import tempfile
import shutil

version = "1.0"
usage='''Usage:
  map_to_kmz [options] <l1b_rad_file> <l1b_geo_file> <output_file>
  map_to_kmz [options] --map-file <input_file> <output_file>
  map_to_kmz -h | --help
  map_to_kmz -v | --version

This produces a KMZ file with a picture of the MAP data. Note that Google
only seems to work with "North is up" data, so the map data produced for
this needs to have north up. If you have the map file, you can pass it in
using the --map-file. Otherwise, we generate it from the l1b_rad and 
l1b_geo.

This displays bands 1, 3 and 5 as RGB. We do a Gaussian stretch on all the 
data - so these aren't actual data values or anything (need map_to_gdal if you
want to import into QGIS or something like that).

Options:
  -h --help         
       Print this message

  --keep-scratch-dir
       Keep the scratch directory we are working in, rather than deleting it.
       This is primarily useful for debugging problems, normally you would 
       want this cleaned up.

  --png
       Use PNG instead of JPEG in KMZ files. The KMZ file is significantly
       larger, but PNG has an alpha channel that JPEG doesn't so NODATA 
       values show up as transparent rather than black

  -v --version      
       Print program version
'''

args = geocal.docopt_simple(usage, version=version)
if(args.input_file):
    infile = os.path.abspath(args.input_file)
else:
    l1b_rad_file = os.path.abspath(args.l1b_rad_file)
    l1b_geo_file = os.path.abspath(args.l1b_geo_file)
outfile = os.path.abspath(args.output_file)
outdir = os.path.dirname(outfile)
d = tempfile.mkdtemp(dir='./')
# For debugging, if we need to keep tempdir aroudn
#if(True):
#    os.chdir("Temp")
try:
    curdir = os.getcwd()
    os.chdir(d)
    if(not args.input_file):
        subprocess.run(["map_product", "--radiance-only", "--north-up",
                        l1b_rad_file, l1b_geo_file, "map.h5"])
        infile = "map.h5"
    subprocess.run(["map_to_gdal", infile, "map.vrt"])
    cmd_merge = ["gdalbuildvrt", "-separate", "map_scaled.vrt"]
    for b in (1,3,5):
        cmd = ["gdal_calc.py", "--type=Float32", 
               "-A", "map.vrt", "--A_band=%d" % b,
               "--outfile=map_b%d.tif" % b,
               "--calc=100*A*(A>0)", "--NoDataValue=0"]
        subprocess.run(cmd)
        subprocess.run(["gdal_translate", "-of", "VICAR", "-ot", "Int16",
                        "map_b%d.tif" % b, "map_b%d.img" %b])
        subprocess.run(["vicarb",
          "stretch map_b%d.img map_b%d_scaled.img 'gauss DNMIN=0 DNMAX=255" % (b, b)])
        cmd_merge.append("map_b%d_scaled.img" % b)
    subprocess.run(cmd_merge)
    subprocess.run(["gdal_translate", "-of", "VRT", "-ot", "Byte",
                    "-a_nodata", "0",
                    "map_scaled.vrt",
                    "map_scaled2.vrt"])
    cmd = ["gdal_translate", "-of", "KMLSUPEROVERLAY", "map_scaled2.vrt",
           outfile]
    if(args.png):
        cmd.extend(["-co", "FORMAT=PNG"])
    subprocess.run(cmd)
finally:
    if(curdir):
        os.chdir(curdir)
    if(not args.keep_scratch_dir):
        shutil.rmtree(d)
        
    


          

