#! /usr/bin/env python
#
# This runs the L1B Geo process.
from geocal import *
from ecostress import *
import os
import re

version = "1.0"
usage='''Usage:
  l1b_geo_process [options] <run_config>
  l1b_geo_process -h | --help
  l1b_geo_process -v | --version

This runs the L1B Geo process.

Options:
  -h --help         
       Print this message

  --number-line=d
       Number of lines to process. Normally you process the whole scene, but
       can be useful for testing to process only a subset. [default: -1]

  -v --version      
       Print program version
'''

args = docopt_simple(usage, version=version)

# Can use this to wait a short time so we can attach strace to this
# process, useful to find all the files that we are accessing.
if(False):
    print "Waiting a short time"
    import time
    time.sleep(20)

config = RunConfig(args.run_config)

datum = config["StaticAncillaryFileGroup", "Datum"]
srtm_dir = config["StaticAncillaryFileGroup", "StrmDir"]
spice_data = config["StaticAncillaryFileGroup", "SpiceData"]
cam = read_shelve(config["StaticAncillaryFileGroup", "Camera"])
ncpu = int(config["Process", "NumberCpu"])

orblist = config["InputFileGroup", "L1A_RAW_ATT"]
radlist = config["InputFileGroup", "L1B_RAD"]
dirname = config["ProductPathGroup", "ProductPath"]

makedirs_p(dirname)
os.chdir(dirname)

# Spice directory passed down as an environment variable
os.environ["SPICEDATA"] = spice_data
dem = SrtmDem(srtm_dir,False, DatumGeoid96(datum))

if(len(orblist) != len(radlist)):
    raise RuntimeException("The RunConfig file needs to have the same number of L1A_RAW_ATT files and L1B_RAD")

for i in range(len(orblist)):
    print "Doing scene number %d" %i
    f = h5py.File(orblist[i], "r")
    orb = serialize_read_generic_string(f["DummyData/orbit_xml"][()])
    f = h5py.File(radlist[i], "r")
    tt = serialize_read_generic_string(f["DummyData/tt_xml"][()])
    ofile = os.path.splitext(os.path.basename(radlist[i]))[0] + ".h5"
    ofile = re.sub(r'L1B_RAD', 'L1B_GEO', ofile)
    ofile2 = re.sub(r'L1B_GEO', 'L1B_ATT', ofile)

    # Create IGC
    band = 0
    ipi = Ipi(orb, cam, band, tt.min_time, tt.max_time, tt)
    # Create DEM. False here says it ok for SrtmDem to not have tile. This 
    # gives support for data that is over the ocean.
    igc = IpiImageGroundConnection(ipi, dem, None)

    # Generate output
    l1bgeo = L1bGeoGenerate(igc, ofile, number_line = args.number_line)
    pool = Pool(ncpu)
    l1bgeo.run(pool)

