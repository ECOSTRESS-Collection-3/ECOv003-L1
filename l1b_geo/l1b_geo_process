#! /usr/bin/env python
#
# This runs the L1B Geo process.
from geocal import *
from ecostress import *
import os
import re
import shutil

version = "1.0"
usage='''Usage:
  l1b_geo_process [options] <run_config>
  l1b_geo_process -h | --help
  l1b_geo_process -v | --version

This runs the L1B Geo process.

Options:
  -h --help         
       Print this message

  --number-line=d
       Number of lines to process. Normally you process the whole scene, but
       can be useful for testing to process only a subset. [default: -1]

  -v --version      
       Print program version
'''

args = docopt_simple(usage, version=version)

# Can use this to wait a short time so we can attach strace to this
# process, useful to find all the files that we are accessing.
if(False):
    print("Waiting a short time")
    import time
    time.sleep(20)

config = RunConfig(args.run_config)

# Not sure where this will from eventually, but for now just hardcode
build_id = "0.30"
pge_version = "0.30"
build_version = "0100"

l1_osp_dir = os.path.abspath(config["StaticAncillaryFileGroup", "L1_OSP_DIR"])
ncpu = int(config["Process", "NumberCpu"])

cam = read_shelve(l1_osp_dir + "/camera.xml")
orb = create_orbit_raw(config)
dem = create_dem(config)
lwm = create_lwm(config)
ortho_base = create_ortho_base(config)

radlist = config.as_list("InputFileGroup", "L1B_RAD")
radlist = [os.path.abspath(f) for f in radlist]
dirname = config["ProductPathGroup", "ProductPath"]
file_version = config["ProductPathGroup", "ProductCounter"]
orbfname = os.path.abspath(config["TimeBasedFileGroup", "L1A_RAW_ATT"])

makedirs_p(dirname)
os.chdir(dirname)

log_fname = None
try:
    pool = Pool(ncpu)
    # Determine output file names
    ofile = []
    ofile2 = []
    for i in range(len(radlist)):
        orbit, scene, acquisition_time = orbit_from_metadata(radlist[i])
        ofile.append(ecostress_file_name("L1B_GEO", orbit, scene,
            acquisition_time, build = build_version, version = file_version))
        ofile2.append(ecostress_file_name("L1B_ATT", orbit, scene,
            acquisition_time, build = build_version, version = file_version))

    log_fname = os.path.splitext(ofile[0])[0] + ".log"
    
    # Create igc/tiepoint for all the data
    igc = []
    f = SQLiteShelf("data.db")
    f["_extra_python_init"] = "from ecostress import *"
    f = None
    for i in range(len(radlist)):
        tt = create_time_table(radlist[i])
        sm = create_scan_mirror()
        # Work with the SWIR channel data
        ras = GdalRasterImage("HDF5:\"%s\"://SWIR/swir_dn" % radlist[i])
        igc.append(EcostressImageGroundConnection(orb, tt, cam, sm, dem, ras))
        write_shelve("data.db:igc_original_%d" % i, igc[i])

    # Generate output data
    for i in range(len(radlist)):
        # Generate output
        print("Doing scene number %d" %i)
        l1bgeo = L1bGeoGenerate(igc[i], lwm, ofile[i],
                                number_line = args.number_line,
                                run_config = config, log_fname = log_fname,
                                build_id=build_id, pge_version=pge_version)
        l1bgeo.run(pool)
    
        # Temp, don't correct anything in attitude file
        shutil.copyfile(orbfname, ofile2[i])
        f = h5py.File(ofile2[i], "r+")
        m = WriteStandardMetadata(f)
        m.process_run_config_metadata(config)
        m.write()

    log = open(log_fname, "a")
    print("L1A_GEO_PGE:INFO-0-[Job Successful]", file=log)
    log.flush()
except:
    log = open(log_fname, "a")
    print("L1A_GEO_PGE:ERROR-2-[Unexpected Error]", file=log)
    log.flush()
    raise

