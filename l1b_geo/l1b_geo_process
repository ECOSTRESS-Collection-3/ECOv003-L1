#! /usr/bin/env python
#
# This runs the L1B Geo process.
import geocal
import ecostress
import os
import re
import shutil
import h5py
from multiprocessing import Pool

# Get version information, in the top directory
import sys
sys.path.append(os.path.dirname(os.path.abspath(sys.path[0])))
from ecostress_version import *

version = "1.0"
usage='''Usage:
  l1b_geo_process [options] <run_config>
  l1b_geo_process [options] <l1a_raw_att> <osp_dir> <prod_dir> <l1b_rad>...
  l1b_geo_process -h | --help
  l1b_geo_process -v | --version

This runs the L1B Geo process.

Options:
  -h --help         
       Print this message

  --number-cpu=d
       Number of CPUs to use when processing. Ignored if we are using a 
       run_config file, this is instead passed through the config file.
       [default: 10]

  --number-line=d
       Number of lines to process. Normally you process the whole scene, but
       can be useful for testing to process only a subset. [default: -1]

  -v --version      
       Print program version
'''

args = geocal.docopt_simple(usage, version=version)

# Can use this to wait a short time so we can attach strace to this
# process, useful to find all the files that we are accessing.
if(False):
    print("Waiting a short time")
    import time
    time.sleep(20)

if(args.run_config):
    config = ecostress.RunConfig(args.run_config)
    l1_osp_dir = os.path.abspath(config["StaticAncillaryFileGroup", "L1_OSP_DIR"])
    ncpu = int(config["Process", "NumberCpu"])
    orb = ecostress.create_orbit_raw(config)
    dem = ecostress.create_dem(config)
    lwm = ecostress.create_lwm(config)
    ortho_base = ecostress.create_ortho_base(config)
    radlist = config.as_list("InputFileGroup", "L1B_RAD")
    radlist = [os.path.abspath(f) for f in radlist]
    dirname = config["ProductPathGroup", "ProductPath"]
    file_version = config["ProductPathGroup", "ProductCounter"]
    orbfname = os.path.abspath(config["TimeBasedFileGroup", "L1A_RAW_ATT"])
else:
    config = None
    l1_osp_dir = os.path.abspath(args.osp_dir)
    ncpu = args.number_cpu
    dirname = os.path.abspath(args.prod_dir)
    file_version = "01"
    orbfname = os.path.abspath(args.l1a_raw_att)
    orb = geocal.HdfOrbit_Eci_TimeJ2000(orbfname, "", "Ephemeris/time_j2000",
                                 "Ephemeris/eci_position",
                                 "Ephemeris/eci_velocity",
                                 "Attitude/time_j2000",
                                 "Attitude/quaternion")
    dem = geocal.SrtmDem(os.environ["ELEV_ROOT"],False,
                  geocal.DatumGeoid96(os.environ["AFIDS_VDEV_DATA"] +
                               "/EGM96_20_x100.HLF"))
    lwm = geocal.SrtmLwmData("/raid27/tllogan/all_lwm_links", False)
    ortho_base = geocal.Landsat7Global("/raid22/band62_VICAR",
                                       geocal.Landsat7Global.BAND62)
    radlist = [os.path.abspath(f) for f in args.l1b_rad]

orb = geocal.OrbitOffsetCorrection(orb)
cam = geocal.read_shelve(l1_osp_dir + "/camera.xml")

sys.path.append(l1_osp_dir)
import l1b_geo_config

geocal.makedirs_p(dirname)
os.chdir(dirname)

log_fname = None
try:
    pool = Pool(ncpu)
    # Determine output file names
    ofile = []
    ofile2 = []
    for i in range(len(radlist)):
        orbit, scene, acquisition_time = ecostress.orbit_from_metadata(radlist[i])
        ofile.append(ecostress.ecostress_file_name("L1B_GEO", orbit, scene,
            acquisition_time, build = build_version,
            version = file_version))
        ofile2.append(ecostress.ecostress_file_name("L1B_ATT", orbit, scene,
            acquisition_time,
            build = build_version, 
            version = file_version))

    log_fname = os.path.splitext(ofile[0])[0] + ".log"
    
    # Create igc/tiepoint for all the data
    igccol_initial = geocal.IgcArray([], False)
    with open("extra_python_init.py", "w") as fh:
        print("from ecostress import *\n", file=fh)
    for i in range(len(radlist)):
        tt = ecostress.create_time_table(radlist[i])
        sm = ecostress.create_scan_mirror()
        if(i == 0):
            orb.insert_position_time_point(tt.min_time)
            orb.insert_attitude_time_point(tt.min_time)
        if(i == len(radlist) - 1):
            orb.insert_position_time_point(tt.max_time)
            orb.insert_attitude_time_point(tt.max_time)
        # Work with the SWIR channel data
        ras = geocal.GdalRasterImage("HDF5:\"%s\"://SWIR/swir_dn" % radlist[i])
        igccol_initial.add_igc(ecostress.EcostressImageGroundConnection(orb, tt, cam,
                                       sm, dem, ras, "Scene %d" % (i + 1)))

    igccol_initial.add_object(orb)
    geocal.write_shelve("igccol_initial.xml", igccol_initial)

    # Project data to surface
    t = ecostress.L1bTpCollect(igccol_initial, ortho_base,
                               fftsize=l1b_geo_config.fftsize,
                               magnify=l1b_geo_config.magnify,
                               magmin=l1b_geo_config.magmin,
                               toler=l1b_geo_config.toler,
                               redo=l1b_geo_config.redo,
                               ffthalf=l1b_geo_config.ffthalf,
                               seed=l1b_geo_config.seed,
                               num_x=l1b_geo_config.num_x,
                               num_y=l1b_geo_config.num_y)
    if(not l1b_geo_config.skip_sba):
        tpcol = t.tpcol(pool=pool)
        geocal.write_shelve("tpcol.xml", tpcol)
        # Temp, before we put sba in
        igccol_corrected = igccol_initial
    else:
        igccol_corrected = igccol_initial
        
    # Generate output data
    for i in range(len(radlist)):
        # Generate output
        print("Doing scene number %d" %i)
        l1bgeo = ecostress.L1bGeoGenerate(
                                igccol_corrected.image_ground_connection(i),
                                lwm, ofile[i],
                                number_line = args.number_line,
                                run_config = config, log_fname = log_fname,
                                build_id = build_id,
                                pge_version = pge_version["l1b_geo"])
        l1bgeo.run(pool)
    
        # Temp, don't correct anything in attitude file
        shutil.copyfile(orbfname, ofile2[i])
        f = h5py.File(ofile2[i], "r+")
        m = ecostress.WriteStandardMetadata(f)
        if(config is not None):
            m.process_run_config_metadata(config)
        m.write()

    log = open(log_fname, "a")
    print("L1A_GEO_PGE:INFO-0-[Job Successful]", file=log)
    log.flush()
except:
    log = open(log_fname, "a")
    print("L1A_GEO_PGE:ERROR-2-[Unexpected Error]", file=log)
    log.flush()
    raise

