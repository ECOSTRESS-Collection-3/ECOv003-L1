#! /usr/bin/env python
#
# This runs the L1B Geo process.
from geocal import *
from ecostress import *
import os
import re
import shutil

version = "1.0"
usage='''Usage:
  l1b_geo_process [options] <run_config>
  l1b_geo_process -h | --help
  l1b_geo_process -v | --version

This runs the L1B Geo process.

Options:
  -h --help         
       Print this message

  --number-line=d
       Number of lines to process. Normally you process the whole scene, but
       can be useful for testing to process only a subset. [default: -1]

  -v --version      
       Print program version
'''

args = docopt_simple(usage, version=version)

# Can use this to wait a short time so we can attach strace to this
# process, useful to find all the files that we are accessing.
if(False):
    print("Waiting a short time")
    import time
    time.sleep(20)

config = RunConfig(args.run_config)

datum = os.path.abspath(config["StaticAncillaryFileGroup", "Datum"])
srtm_dir = os.path.abspath(config["StaticAncillaryFileGroup", "SRTMDir"])
srtm_lwm_dir = os.path.abspath(config["StaticAncillaryFileGroup", "SRTMLWMDir"])
spice_data = os.path.abspath(config["StaticAncillaryFileGroup", "SpiceDataDir"])
l1_osp_dir = os.path.abspath(config["StaticAncillaryFileGroup", "L1_OSP_DIR"])
ortho_base_dir = os.path.abspath(config["StaticAncillaryFileGroup",
                                        "OrthoBase"])
cam = read_shelve(l1_osp_dir + "/camera.xml")
ncpu = int(config["Process", "NumberCpu"])

orbfname = os.path.abspath(config["TimeBasedFileGroup", "L1A_RAW_ATT"])
radlist = config.as_list("InputFileGroup", "L1B_RAD")
radlist = [os.path.abspath(f) for f in radlist]
dirname = config["ProductPathGroup", "ProductPath"]

makedirs_p(dirname)
os.chdir(dirname)

# As a useful backdoor, check for then environment variable
# ECOSTRESS_USE_AFIDS_ENV. This use the various afids environment
# variables rather than the contents of the run config file. This is
# useful for testing, because pistol has all these variable defined
# in different locations. May come up with a cleaner way of doing this,
# but for now do this.
if("ECOSTRESS_USE_AFIDS_ENV" in os.environ):
    datum = os.environ["AFIDS_VDEV_DATA"] + "/EGM96_20_x100.HLF"
    srtm_dir = os.environ["ELEV_ROOT"]
    # Location on pistol, use if found, otherwise use setting in run config file
    if(os.path.exists("/raid22/band62_VICAR")):
        ortho_base_dir = "/raid22/band62_VICAR"
    if(os.path.exists("/raid25/SRTM_2014_update/srtm_v3_lwm")):
        srtm_lwm_dir = "/raid25/SRTM_2014_update/srtm_v3_lwm"
else:
    # Otherwise use data from run config without change
    # Spice directory passed down as an environment variable
    os.environ["SPICEDATA"] = spice_data
dem = SrtmDem(srtm_dir,False, DatumGeoid96(datum))
lwm = SrtmLwmData(srtm_lwm_dir, False)

pool = Pool(ncpu)

# This this a temporary work around
orb = SpiceOrbit(SpiceOrbit.ISS_ID, l1_osp_dir + "/iss_spice/iss_2015.bsp")

for i in range(len(radlist)):
    print("Doing scene number %d" %i)
    f = h5py.File(radlist[i], "r")
    tmin = f["/StandardMetadata/RangeBeginningDate"][()] + "T" + \
           f["/StandardMetadata/RangeBeginningTime"][()] + "Z"
    tmin = Time.parse_time(tmin)
    tmax = f["/StandardMetadata/RangeEndingDate"][()] + "T" + \
           f["/StandardMetadata/RangeEndingTime"][()] + "Z"
    tmax = Time.parse_time(tmax)
    tspace = 1.181 / 241 * 2
    # Temporary, assume time table is a constant space time table between
    # min an max time
    tt = ConstantSpacingTimeTable(tmin, tmax, tspace)
    ofile = os.path.splitext(os.path.basename(radlist[i]))[0] + ".h5"
    ofile = re.sub(r'L1B_RAD', 'L1B_GEO', ofile)
    ofile2 = re.sub(r'L1B_GEO', 'L1B_ATT', ofile)

    # Create IGC
    band = 0
    ipi = Ipi(orb, cam, band, tt.min_time, tt.max_time, tt)
    # Create DEM. False here says it ok for SrtmDem to not have tile. This 
    # gives support for data that is over the ocean.
    igc = IpiImageGroundConnection(ipi, dem, None)
    # For debugging
    write_shelve("igc_%d.xml" % i, igc)

    # Generate output
    l1bgeo = L1bGeoGenerate(igc, lwm, ofile,
                            number_line = args.number_line,
                            run_config = config)
    l1bgeo.run(pool)
    
    # Temp
    shutil.copyfile(orbfname, ofile2)
    f = h5py.File(ofile2, "r+")
    m = WriteStandardMetadata(f)
    m.process_run_config_metadata(config)
    m.write()
