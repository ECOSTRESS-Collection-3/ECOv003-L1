#! /usr/bin/env python
#
# This runs the L2C process.
import warnings

# Have a warning message that we can't do anything about - suppress it
with warnings.catch_warnings():
    warnings.filterwarnings("ignore", category=UserWarning)
    import geocal
import ecostress
import os
from multiprocessing import Pool
from loguru import logger
from pathlib import Path

# Get version information, in the top directory
import sys

sys.path.append(os.path.dirname(os.path.abspath(sys.path[0])))
from ecostress_version import pge_version, build_id, collection_label

version = "1.0"
usage = """Usage:
  l2c_process [options] <run_config>
  l2c_process [options] <l1cg> <l2g_cloud> <l2g_lste> <osp_dir> <prod_dir>
  l2c_process -h | --help
  l2c_process -v | --version

This runs the L2C process.

Options:
  -h --help         
       Print this message

  --number-cpu=d
       Number of CPUs to use when processing. Ignored if we are using a 
       run_config file, this is instead passed through the config file.
       [default: 10]

  --verbose
       Print more information as we run to stderr.

  -v --version      
       Print program version
"""

args = geocal.docopt_simple(usage, version=version)

if args.run_config:
    config = ecostress.RunConfig(args.run_config)
    l1_osp_dir = Path(config["StaticAncillaryFileGroup", "L1_OSP_DIR"]).absolute()
else:
    config = None
    l1_osp_dir = Path(args.osp_dir).absolute()

# Read in additional configuration parameters
sys.path.append(str(l1_osp_dir))
import l2c_config

logger.remove()
if args.verbose:
    logger.add(sys.stderr, level="DEBUG")
else:
    logger.add(sys.stderr, level="INFO")

if args.run_config:
    ncpu = int(config["Process", "NumberCpu"])
    dirname = config["ProductPathGroup", "ProductPath"]
    file_version = config["ProductPathGroup", "ProductCounter"]
    l1cg_fname = os.path.abspath(config["InputFileGroup", "L1CG"])
    l2g_cloud_fname = os.path.abspath(config["InputFileGroup", "L2G_CLOUD"])
    l2g_lste_fname = os.path.abspath(config["InputFileGroup", "L2G_LSTE"])
    build_id = config["PrimaryExecutable", "BuildID"]
    collection_label = config["ProductPathGroup", "CollectionLabel"]
else:
    ncpu = args.number_cpu
    dirname = os.path.abspath(args.prod_dir)
    file_version = "01"
    l1cg_fname = os.path.abspath(args.l1cg)
    l2g_cloud_fname = os.path.abspath(args.l2g_cloud)
    l2g_lste_fname = os.path.abspath(args.l2g_lste)

orbit, scene, acquisition_time = ecostress.orbit_from_grid_metadata(l1cg_fname)

geocal.makedirs_p(dirname)
os.chdir(dirname)

ofile = ecostress.ecostress_file_name(
    "L2T_LSTE",
    orbit,
    scene,
    acquisition_time,
    collection_label=collection_label,
    build=build_id,
    version=file_version,
)
logger.add(os.path.splitext(ofile)[0] + ".log", level="DEBUG")

pool = None
try:
    with logger.catch(reraise=True):
        inlist = [l1cg_fname, l2g_cloud_fname, l2g_lste_fname, str(l1_osp_dir / "l2c_config.py")]
        l2ct = ecostress.L2ctGenerate(
            l1cg_fname,
            l2g_cloud_fname,
            l2g_lste_fname,
            l1_osp_dir,
            ofile,
            inlist,
            resolution=l2c_config.l2t_resolution,
            number_subpixel=l2c_config.l2t_number_subpixel,
            run_config=config,
            collection_label=collection_label,
            build_id=build_id,
            pge_version=pge_version["l2c"],
            browse_size=l2c_config.l2t_browse_size,
        )
        if ncpu > 1:
            pool = Pool(ncpu)
        l2ct.run(pool=pool)
        pool.close()
except Exception:
    logger.info("L2C_PGE:ERROR-2-[Unexpected Error]")
    if pool is not None:
        pool.close()
    raise
except:
    logger.info("L2C_PGE:ERROR-2-[Unexpected Error]")
    if pool is not None:
        pool.close()
    raise
