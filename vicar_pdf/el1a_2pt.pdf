!***Program Name:
!   el1a_2pt.pdf (Ecostress L1A Two-Point conversion)
!   An L1A_CAL PGE Program supporting the ECOSTRESS Project
!   Written for VICAR with TAE scripting.
!***Date/Version:
!   17MAY2021 Version: 3.02 T.L.Logan (Mark 10.5u Bad Lines as -9999)
!   09MAY2019 Version: 3.01 T.L.Logan (SWIR update for Direct DownLoad)
!***Function:
!   ECOSTRESS L1A 2point conversion of Blackbody calibration and TIR
!     image DN to Radiance (watts/m2/sr/um).
!   TIR Bands 2-6; SWIR image (B1) is a Visual Product
!   This proc is called separately (by el1a_bbcal.pdf) for each Band.
!***Note: Input missing, fill or bad data are output as code -9999,
!   Except for stripes, which are output as code -9998.
procedure
!Progam Parameters****************************************************
!User Supplied Parameters:
parm   inph5i string   def=""
parm   inph5b string   def=""
parm   inprad string   def="" !BlackBodyRadiance !Directory for fpa radiance
parm   outimg string   def="" !UncalibratedDN    !Directory for image DN
parm   outbdn string   def="" !BlackBodyDN       !Directory for fpa DN
parm   outwat string   def="" !ImgRadiance       !Transfer dir for L1A_RAD
parm   outp1  string   def="" !                  !Output dir for L1A-PIX HD5
parm   band   integer  def=1 valid=(1:6) !TIR Bands 2-6 & SWIR B1
parm   rad2k  integer  def=1 valid=(0:1) !Convert radiance to Kelvin. 0=No; 1=Yes
parm   radout integer  def=1 valid=(0:1) !Output radiance image. 0=No; 1=Yes
parm   debug  integer  def=1 valid=(0:2) !Verbose Messages; 0=No;1=Yes;2=Yes+del-x
parm   cw     real     !Center WaveLength
parm   c1     real     !First Planck Constant (1.191042E08)
parm   c2     real     !Second Planck Constant (14387.752)
parm   suffix string   !Scene ID suffix
parm   b2ival real     !8.2u  Band2 linearity correction IVAL
parm   b2sinc real     !8.2u  Band2 linearity correction SINC
parm   b3ival real     !8.7u  Band3 linearity correction IVAL
parm   b3sinc real     !8.7u  Band3 linearity correction SINC
parm   b4ival real     !9.1u  Band4 linearity correction IVAL
parm   b4sinc real     !9.1u  Band4 linearity correction SINC
parm   b5ival real     !10.6u Band5 linearity correction IVAL
parm   b5sinc real     !10.6u Band5 linearity correction SINC
parm   b6ival real     !12.1u Band6 linearity correction IVAL
parm   b6sinc real     !12.1u Band6 linearity correction SINC
!Local Parameters:
local  id     string   !Unique variable name
local  nl     integer
local  ns     integer
local  format keyword
local  hdf    string   init=".h5"
local  found  integer  !0=no file; 1=file found
local  sd     real     !Histogram standard deviation
local  avg    real     !Histogram mean
local  count  integer  !Histogram number of elements
local  I      integer
local  max    real
local  min    real
body
let      _onfail="goto error1"
file2tcl  xxjob_fail.img val=found
if       (found=1) ush rm xxjob_fail.img

!Proc Startup Module***************************************************
write    "MSG: ***Starting 2pt Processing for Band &band"
tush      echo "***Starting 2pt Processing for Band &band" >> L1A_CAL_&"suffix".log 

!Calculate 9-digit Random Number as a unique temporary variable name
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "expr round(1e9*rand())") strvar=id
write    "MSG: ***2pt Random Number = &id "

!Input L1A_RAW_PIX Module**********************************************
!Extract Raw DNs from L1A_RAW_PIX, 1 band, each 11264x5400 16bit integers.
!Convert hdf5 to vicar using gdal libraries.
write    "Beginning ush gdalinfo"
ush       gdalinfo &inph5i
write    "Beginning ush gdal_translate"
ush       gdal_translate -of VICAR -ot Int16 'HDF5:"&inph5i"://UncalibratedPixels/pixel_data_&band' &"outimg"/b&"band"_image.hlf
!Verify image size, if not 11264x5400, stop processing
form     &"outimg"/b&"band"_image.hlf format nl ns
write    "MSG: ***Input Image Size is: &nl Lines x &ns Samples "
if       ((nl<>11264)or(ns<>5400)) write "MSG: ***ERROR "&"outimg"/b&"band"_image.hlf" has Incorrect Image Size "
if       ((nl<>11264)or(ns<>5400)) goto error1
write    "MSG: ***Finished Reading L1A_RAW_PIX Band &band"
tush      echo "Finished Reading L1A_RAW_PIX Band &band" >> L1A_CAL_&"suffix".log
hist     &"outimg"/b&"band"_image.hlf sigma=sd mean=avg
tush      echo "Raw Band &band Mean=&avg SD=&sd" >> L1A_CAL_&"suffix".log
!Create Bad Stripes Mask
gen       xxa_&id nl=11264 ns=5400 ival=1 linc=0 sinc=0 'half
qsar      xxa_&id stripes_&id area=(+
          33,1,16,5400,-1,289,1,16,5400,-1,545,1,16,5400,-1, +
          801,1,16,5400,-1,1057,1,16,5400,-1,1313,1,16,5400,-1, +
          1569,1,16,5400,-1,1825,1,16,5400,-1,2081,1,16,5400,-1, +
          2337,1,16,5400,-1,2593,1,16,5400,-1,2849,1,16,5400,-1, +
          3105,1,16,5400,-1,3361,1,16,5400,-1,3617,1,16,5400,-1, +
          3873,1,16,5400,-1,4129,1,16,5400,-1,4385,1,16,5400,-1, +
          4641,1,16,5400,-1,4897,1,16,5400,-1,5153,1,16,5400,-1, +
          5409,1,16,5400,-1,5665,1,16,5400,-1,5921,1,16,5400,-1, +
          6177,1,16,5400,-1,6433,1,16,5400,-1,6689,1,16,5400,-1, +
          6945,1,16,5400,-1,7201,1,16,5400,-1,7457,1,16,5400,-1, +
          7713,1,16,5400,-1,7969,1,16,5400,-1,8225,1,16,5400,-1, +
          8481,1,16,5400,-1,8737,1,16,5400,-1,8993,1,16,5400,-1, +
          9249,1,16,5400,-1,9505,1,16,5400,-1,9761,1,16,5400,-1, +
          10017,1,16,5400,-1,10273,1,16,5400,-1,10529,1,16,5400,-1, +
          10785,1,16,5400,-1,11041,1,16,5400,-1)
hist      stripes_&id 'nohi
!Create Band5 (10.5u) Bad Lines 1-2 and 219-220 File
gen       xxa_&id nl=11264 ns=5400 ival=1 linc=0 sinc=0 'half
qsar      xxa_&id badlines_&id area=(+
          219,1,2,5400,-1,475,1,2,5400,-1,731,1,2,5400,-1, +
          987,1,2,5400,-1,1243,1,2,5400,-1,1499,1,2,5400,-1, +
          1755,1,2,5400,-1,2011,1,2,5400,-1,2267,1,2,5400,-1, +
          2523,1,2,5400,-1,2779,1,2,5400,-1,3035,1,2,5400,-1, +
          3291,1,2,5400,-1,3547,1,2,5400,-1,3803,1,2,5400,-1, +
          4059,1,2,5400,-1,4315,1,2,5400,-1,4571,1,2,5400,-1, +
          4827,1,2,5400,-1,5083,1,2,5400,-1,5339,1,2,5400,-1, +
          5595,1,2,5400,-1,5851,1,2,5400,-1,6107,1,2,5400,-1, +
          6363,1,2,5400,-1,6619,1,2,5400,-1,6875,1,2,5400,-1, +
          7131,1,2,5400,-1,7387,1,2,5400,-1,7643,1,2,5400,-1, +
          7899,1,2,5400,-1,8155,1,2,5400,-1,8411,1,2,5400,-1, +
          8667,1,2,5400,-1,8923,1,2,5400,-1,9179,1,2,5400,-1, +
          9435,1,2,5400,-1,9691,1,2,5400,-1,9947,1,2,5400,-1, +
          10203,1,2,5400,-1,10459,1,2,5400,-1,10715,1,2,5400,-1, +
          10971,1,2,5400,-1,11227,1,2,5400,-1 +
          1,1,2,5400,-1,257,1,2,5400,-1,513,1,2,5400,-1, +
          769,1,2,5400,-1,1025,1,2,5400,-1,1281,1,2,5400,-1, +
          1537,1,2,5400,-1,1793,1,2,5400,-1,2049,1,2,5400,-1, +
          2305,1,2,5400,-1,2561,1,2,5400,-1,2817,1,2,5400,-1, +
          3073,1,2,5400,-1,3329,1,2,5400,-1,3585,1,2,5400,-1, +
          3841,1,2,5400,-1,4097,1,2,5400,-1,4353,1,2,5400,-1, +
          4609,1,2,5400,-1,4865,1,2,5400,-1,5121,1,2,5400,-1, +
          5377,1,2,5400,-1,5633,1,2,5400,-1,5889,1,2,5400,-1, +
          6145,1,2,5400,-1,6401,1,2,5400,-1,6657,1,2,5400,-1, +
          6913,1,2,5400,-1,7169,1,2,5400,-1,7425,1,2,5400,-1, +
          7681,1,2,5400,-1,7937,1,2,5400,-1,8193,1,2,5400,-1, +
          8449,1,2,5400,-1,8705,1,2,5400,-1,8961,1,2,5400,-1, +
          9217,1,2,5400,-1,9473,1,2,5400,-1,9729,1,2,5400,-1, +
          9985,1,2,5400,-1,10241,1,2,5400,-1,10497,1,2,5400,-1, +
          10753,1,2,5400,-1,11009,1,2,5400,-1)
hist      badlines_&id 'nohi
!Create Missing or Corrupted Data Binary 0/1 Mask
if       (band=1)  !SWIR with stripes
 f2      (&"outimg"/b&"band"_image.hlf,stripes_&id) mask_&id +
          func="((in2==1).AND.(in1>=0).AND.(in1<=32000)).OR.((in2==0)*(-1))" !Good DN=1; Bad DN=0; Stripe=-1
else-if  ((band=2)or(band=6)) !TIR with stripes
 f2      (&"outimg"/b&"band"_image.hlf,stripes_&id) mask_&id +
          func="((in2==1).AND.(in1>=0).AND.(in1<=32000)).OR.((in2==0)*(-1))" !Good DN=1; Bad DN=0; Stripe=-1
else-if  (band=5) !10.5u band with bad data lines 1/2 and 219/220
 f2      (&"outimg"/b&"band"_image.hlf,badlines_&id) mask_&id +
          func="((in2==1).AND.(in1>=0).AND.(in1<=32000)).OR.((in2==0)*0)" !Good DN=1; Bad DN=0; Stripe=-1
else
 f2      &"outimg"/b&"band"_image.hlf mask_&id +
          func="((in1>0).AND.(in1<=32000))" !Good DN=1; Bad DN=0
end-if
write    "MSG: ***B&"band" Final Mask Histogram"
hist      mask_&id sigma=sd mean=avg
tush      echo "Histogram 0/1 Mask Mean=&avg SD=&sd" >> L1A_CAL_&"suffix".log

!Input L1A_BB DN Module************************************************
!Extract Raw FPA DNs from L1A_BB, 1 band, both 325 and 295 BB files
!Log hdf5 to vicar using gdal libraries.
write    "Beginning ush gdalinfo"
ush       gdalinfo &inph5b
write    "Beginning ush gdal_translate"
ush       gdal_translate -of VICAR -ot Int16 'HDF5:"&inph5b"://BlackBodyPixels/b&"band"_blackbody_325' xxa_325_&id
ush       gdal_translate -of VICAR -ot Int16 'HDF5:"&inph5b"://BlackBodyPixels/b&"band"_blackbody_295' xxa_295_&id
!Verify 325BB image size, if not 11264x64, stop processing
form      xxa_325_&id format nl ns
write    "MSG: ***Input Band&"band" BB325 Image Size is: &nl Lines x &ns Samples "
if       ((nl<>11264)or(ns<>64)) write "MSG: ***ERROR "BB325" has Incorrect Image Size "
if       ((nl<>11264)or(ns<>64)) goto error1
!Verify 295BB image size, if not 11264x64, stop processing
form      xxa_295_&id format nl ns
write    "MSG: ***Input Band&"band" BB295 Image Size is: &nl Lines x &ns Samples "
if       ((nl<>11264)or(ns<>64)) write "MSG: ***ERROR "BB295" has Incorrect Image Size "
if       ((nl<>11264)or(ns<>64)) goto error1
write    "MSG: ***Finished Reading L1A_BB Band &band files"
tush      echo "Finished Reading L1A_BB Band &band files" >> L1A_CAL_&"suffix".log

!Average BB FPAs from 11264x64 to 11264x1
cform     xxa_325_&id xxa_&id oform=real
lave      xxa_&id xxb_&id 'hori 'quiet
flot      xxb_&id &"outbdn"/dn325b&"band".rel 'clock
cform     xxa_295_&id xxa_&id oform=real
lave      xxa_&id xxb_&id 'hori 'quiet
flot      xxb_&id &"outbdn"/dn295b&"band".rel 'clock
if       (band=1) goto jump1  !B1=SWIR (No Radiance)

!Gain/Offset Calculation Module****************************************
!Convert image DN to spectral radiance using gain & offset
!Calculate Offset (a)
f2       (&"inprad"/b&"band"_325.rel, +
          &"inprad"/b&"band"_295.rel,+
          &"outbdn"/dn325b&"band".rel,&"outbdn"/dn295b&"band".rel) xxoffs_&id +
          func="((in1*in4)-(in2*in3))/(in4-in3)" format=real
!Calculate Gain (b)
f2       (&"inprad"/b&"band"_325.rel, +
          &"inprad"/b&"band"_295.rel, +
          &"outbdn"/dn325b&"band".rel,&"outbdn"/dn295b&"band".rel) xxgain_&id +
          func="(in2-in1)/(in4-in3)" format=real
!Focal Plane gain/offset images are 11264x1, duplicate them to the size of input image.
!Output size is 11264 lines by 5400 samples; then apply Bad Data Mask 
size      xxoffs_&id xxd_&id size=(1,1,11264,5400) oform=real 'noin

!Add Non-Linearity Correction wedge to Band6 (12u)
!No adjustments for other bands; See L1A_PCF_UPF.txt for parameter information
if       (band=2)
gen       xxe_&id nl=11264 ns=5400 ival=&b2ival +
          linc=0.0 sinc=&b2sinc 'real
 f2       inp=(xxd_&id,mask_&id,xxe_&id) out=&"outwat"/b&"band"_offset.rel +
          func="((in1+in3)*(in2==1))+((in2==0)*(-9999))+((in2==(-1))*(-9998))" format=real
else-if  (band=3)
gen       xxe_&id nl=11264 ns=5400 ival=&b3ival +
          linc=0.0 sinc=&b3sinc 'real
 f2       inp=(xxd_&id,mask_&id,xxe_&id) out=&"outwat"/b&"band"_offset.rel +
          func="((in1+in3)*(in2==1))+((in2==0)*(-9999))+((in2==(-1))*(-9998))" format=real
else-if  (band=4)
gen       xxe_&id nl=11264 ns=5400 ival=&b4ival +
          linc=0.0 sinc=&b4sinc 'real
 f2       inp=(xxd_&id,mask_&id,xxe_&id) out=&"outwat"/b&"band"_offset.rel +
          func="((in1+in3)*(in2==1))+((in2==0)*(-9999))+((in2==(-1))*(-9998))" format=real
else-if  (band=5)
gen       xxe_&id nl=11264 ns=5400 ival=&b5ival +
          linc=0.0 sinc=&b5sinc 'real
 f2       inp=(xxd_&id,mask_&id,xxe_&id) out=&"outwat"/b&"band"_offset.rel +
          func="((in1+in3)*(in2==1))+((in2==0)*(-9999))+((in2==(-1))*(-9998))" format=real
else-if  (band=6)
gen       xxe_&id nl=11264 ns=5400 ival=&b6ival +
          linc=0.0 sinc=&b6sinc 'real
 f2       inp=(xxd_&id,mask_&id,xxe_&id) out=&"outwat"/b&"band"_offset.rel +
          func="((in1+in3)*(in2==1))+((in2==0)*(-9999))+((in2==(-1))*(-9998))" format=real
else
 f2       inp=(xxd_&id,mask_&id) out=&"outwat"/b&"band"_offset.rel +
          func="(in1*(in2==1))+((in2==0)*(-9999))+((in2==(-1))*(-9998))" format=real
end-if

size      xxgain_&id xxd_&id size=(1,1,11264,5400) oform=real 'noin
f2        inp=(xxd_&id,mask_&id) out=&"outwat"/b&"band"_gain.rel +
          func="(in1*(in2==1))+((in2==0)*(-9999))+((in2==(-1))*(-9998))" format=real
write    "MSG: ***Finished Creating Gain/Offsets for Band &band"
tush      echo "Finished Creating Gain/Offsets for Band &band" >> L1A_CAL_&"suffix".log

!2-Point Conversion Module*********************************************
!DN to Radiance two-point conversion: R=a+(b*DN)
!2point Calibration
! Optionally output radiance data
if       (radout=0) goto skip2
f2       (&"outwat"/b&"band"_offset.rel,&"outwat"/b&"band"_gain.rel,&"outimg"/b&"band"_image.hlf) +
          xxe_&id +
          func="in1+(in2*in3)" format=real
f2        inp=(xxe_&id,mask_&id) out=&"outwat"/b&"band"_rad.rel +
          func="(in1*(in2==1))+((in2==0)*(-9999))+((in2==(-1))*(-9998))" format=real
write    "MSG: ***Finished 2pt DN-to-Rad Conversion for Band &band"
tush      echo "Finished 2pt DN-to-Rad Conversion for Band &band" >> L1A_CAL_&"suffix".log
if       (debug>0)
!Remove -9998 (Dropped Lines) from histogram (Set to zero). Retain -9999 (Bad Data).
 f2      &"outwat"/b&"band"_rad.rel xxb_&id func="(in1!=(-9998))*in1"
 hist     xxb_&id sigma=sd mean=avg count=count 'exclude
 tush     echo "Histogram Mean=&avg SD=&sd Count=&count" >> L1A_CAL_&"suffix".log
end-if

skip2>
!Radiance-to-Temperature Conversion Module*****************************
!Convert Radiance Product to Temperature Kelvin for TESTING Purposes
!Source: http://ncc.nesdis.noaa.gov/data/planck.html
if       (radout= 0) goto skip3
if       (rad2k = 0) goto skip3
write    "cw = &cw"
write    "c1 = &c1"
write    "c2 = &c2"
f2       (&"outwat"/b&"band"_rad.rel) xxe_&id +
          func="&c2/(&cw*(alog(&c1/(&cw**5*in1)+1)))" 'half
f2        inp=(xxe_&id,mask_&id) out=&"outwat"/b&"band"_temp.hlf +
          func="(in1*(in2==1))+((in2==0)*(-9999))+((in2==(-1))*(-9998))" format=half
write    "MSG: ***Finished Rad-to-Temp Conversion for Band &band"
tush      echo "Finished Rad-to-Temp Conversion for Band &band" >> L1A_CAL_&"suffix".log
if       (debug>0)
!Remove -9998 (Dropped Lines) from histogram (Set to zero). Retain -9999 (Bad Data).
 f2      &"outwat"/b&"band"_temp.hlf xxb_&id func="(in1!=(-9998))*in1"
 hist     xxb_&id sigma=sd mean=avg count=count 'exclude
 tush     echo "Histogram Mean=&avg SD=&sd Count=&count" >> L1A_CAL_&"suffix".log
end-if
goto      skip3   !Bands 2-6 skip over SWIR processing

jump1>
!SWIR B1 Viewing Product (Deprecated Counts Correction)****************
!Process SWIR Band1 into a visual-use product (NO calibration)
!Using "By-Scan fitg" method: Concatenate scans length-wise (image becomes
!256lines by 237600samples, then apply fitg to adjust each scanline independently
!to a guassian mean of 127.5 and convert to byte.
hist     &"outimg"/b1_image.hlf sigma=sd mean=avg
if      (avg>32000) goto jump2
!Split into scans and concat lengthwise
let       I = -255
loop
 let      I = I + 256
 if      (I > 11263) break
 insert  &"outimg"/b1_image.hlf xxa_&id size=(&I,1,256,5400) 
 if      (I = 1)
  insert  xxa_&id xxc_&id
 else
  mss    (xxc_&id,xxa_&id) xxb_&id
  insert  xxb_&id xxc_&id
 end-if
end-loop
insert    xxc_&id xxb_&id size=(1,1,256,237600)
if       (debug>0) hist xxb_&id
if       (debug>0) label-l xxb_&id
write "***Finished creating SWIR 256x237600 size image"

!Process each SWIR image line separately by fitg
let       I = 0
loop
let       I = I + 1
if       (I>256) break
insert    xxb_&id xza_&id size=(&I,1,1,237600)
fitg      xza_&id xzb_&id 'byte 'gauss mean=127.5 sigma=3.5
if       (I=1)
 insert   xzb_&id xzz_&id
else
 append  (xzz_&id,xzb_&id) xza_&id
 insert   xza_&id xzz_&id
end-if
end-loop
if       (debug>0) hist xzz_&id
write "***Finished SWIR fitg brightness adjustment"

!Re-combine the SWIR image
let       I = -5399
loop
 let      I = I + 5400
 if      (I > 237599) break
 insert   xzz_&id xxa_&id size=(1,&I,256,5400) 
 if      (I = 1)
  insert  xxa_&id xxc_&id
 else
  append (xxc_&id,xxa_&id) xxb_&id
  insert  xxb_&id xxc_&id
 end-if
end-loop
!Fix label
label-rem xxc_&id xxb_&id
label-cre xxb_&id xya_&id nl=11264 ns=5400 'byte
if       (debug>0) hist xya_&id
if       (debug>0) label-l xya_&id
write "***Finished SWIR Image Reconstruction"

!Invert/Complement the SWIR image
maxmin      xya_&id minival=min maxival=max exclude=0
let         max=max+1
f2          xya_&id xyb_&id func="(&max-in1)" 'byte 
if       (debug>0) hist xyb_&id

!Repair the 4 worst SWIR lines
repair    xyb_&id xxrep1_&id mode=all badline=(+
94,195,209,241, 350,451,465,497, 606,707,721,753, 862,963,977,1009, +
1118,1219,1233,1265, 1374,1475,1489,1521, 1630,1731,1745,1777, +
1886,1987,2001,2033, 2142,2243,2257,2289, 2398,2499,2513,2545, +
2654,2755,2769,2801, 2910,3011,3025,3057, 3166,3267,3281,3313, +
3422,3523,3537,3569, 3678,3779,3793,3825, 3934,4035,4049,4081, +
4190,4291,4305,4337, 4446,4547,4561,4593, 4702,4803,4817,4849, +
4958,5059,5073,5105, 5214,5315,5329,5361, 5470,5571,5585,5617) 
repair    xxrep1_&id xxrep2_&id mode=all badline=(+
5726,5827,5841,5873, 5982,6083,6097,6129, 6238,6339,6353,6385, +
6494,6595,6609,6641, 6750,6851,6865,6897, 7006,7107,7121,7153, +
7262,7363,7377,7409, 7518,7619,7633,7665, 7774,7875,7889,7921, +
8030,8131,8145,8177, 8286,8387,8401,8433, 8542,8643,8657,8689, +
8798,8899,8913,8945, 9054,9155,9169,9201, 9310,9411,9425,9457 +
9566,9667,9681,9713, 9822,9923,9937,9969, 10078,10179,10193,10225, +
10334,10435,10449,10481, 10590,10691,10705,10737, +
10846,10947,10961,10993, 11102,11203,11217,11249)


!Create SWIR visual product dcc (deprecated counts correction)
!Add stripe error code (-9998)
f2        inp=(xxrep2_&id,mask_&id) out=&"outwat"/b1_dcc.hlf +
          func="(in1*(in2!=(-1)))+((in2==(-1))*(-9998))" format=half
hist     &"outwat"/b1_dcc.hlf
write    "MSG: ***Finished Repair and Complement for SWIR Band &band"
tush      echo "Finished Processing for SWIR Band &band" >> L1A_CAL_&"suffix".log
if       (debug>0)
 hist    &"outwat"/b1_dcc.hlf sigma=sd mean=avg count=count
 tush     echo "Histogram Mean=&avg SD=&sd Count=&count" >> L1A_CAL_&"suffix".log
end-if
goto      skip3

jump2>
f2        inp=(&"outimg"/b1_image.hlf,mask_&id) out=&"outwat"/b1_dcc.hlf +
          func="(in1*(in2==1))+((in2==0)*(-9999))+((in2==(-1))*(-9998))" format=half
hist     &"outwat"/b1_dcc.hlf
write    "MSG: ***Finished Processing for Missing SWIR Band &band"
tush      echo "Finished Processing for SWIR Band &band" >> L1A_CAL_&"suffix".log
if       (debug>0)
 hist    &"outwat"/b1_dcc.hlf sigma=sd mean=avg count=count
 tush     echo "Histogram Mean=&avg SD=&sd Count=&count" >> L1A_CAL_&"suffix".log
end-if

skip3>
!Program Ending Maintenance Module*************************************
!Successful Completion:
goto      theend

error1>
!Miscellaneous Error:
write    "MSG: ***Unknown 2pt Error --- Aborting"
write    "MSG: ***L1A_2PT job Failed"
tush      echo ***Unknown 2pt Error --- Aborting >> L1A_CAL_&"suffix".log
tush      echo ***L1A_2PT Job Failed >> L1A_CAL_&"suffix".log
ush       echo VICAR_RESULT-1-[Job Failed] >> L1A_CAL_&"suffix".log
gen       xxjob_fail.img nl=10 ns=10 ival=0 linc=0 sinc=0 'byte
let       $SFI=-1

theend>
if          ((debug=0)or(debug=2)) ush rm -f *_&id *.aux.xml &"outimg"/*.aux.xml
end-proc
