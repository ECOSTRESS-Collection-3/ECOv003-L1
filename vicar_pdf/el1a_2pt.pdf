!***Program Name:
!   el1a_2pt.pdf (Ecostress L1A Two-Point conversion)
!   An L1A_CAL PGE Program supporting the ECOSTRESS Project
!   Written for VICAR with TAE scripting.
!***Date/Version:
!   17OCT2016 Version: 0.5 T.L.Logan
!***Function:
!   ECOSTRESS L1A 2point conversion of Blackbody calibration and TIR
!     image DN to Radiance (watts/m2/sr/um).
!   TIR Bands 1-5; SWIR image (B6) is Dark Current subtracted.
!   This proc is called separately (by el1a_bbcal.pdf) for each Band.

procedure
!Progam Parameters****************************************************
!User Supplied Parameters:
parm   inph5i string   def=""
parm   inph5b string   def=""
parm   inprad string   def="" !BlackBodyRadiance !Directory for fpa radiance
parm   outimg string   def="" !UncalibratedDN    !Directory for image DN
parm   outbdn string   def="" !BlackBodyDN       !Directory for fpa DN
parm   outwat string   def="" !ImgRadiance       !Transfer dir for L1A_RAD
parm   outp1  string   def="" !                  !Output dir for L1A-PIX HD5
parm   band   integer  def=1 valid=(1:6) !TIR Bands 1-5 & SWIR B6
parm   rad2k  integer  def=1 valid=(0:1) !Convert radiance to Kelvin. 0=No; 1=Yes
parm   debug  integer  def=1 valid=(0:2) !Verbose Messages; 0=No;1=Yes;2=Yes+del-x
parm   cw     real     !Center WaveLength
parm   c1     real     !First Planck Constant (1.191042E08)
parm   c2     real     !Second Planck Constant (14387.752)
parm   suffix string   !Scene ID suffix
!Local Parameters:
local  id     string   !Unique variable name
local  nl     integer
local  ns     integer
local  format keyword
local  hdf    string   init=".h5"
local  found  integer  !0=no file; 1=file found
local  sd      real    !Histogram standard deviation
local  avg     real    !Histogram mean
local  count   integer !Histogram number of elements
body
let      _onfail="goto error1"

!Proc Startup Module***************************************************
write    "MSG: ***Starting 2pt Processing for Band &band"
tush      echo "***Starting 2pt Processing for Band &band" >> L1Ajob_&"suffix".log 

!Calculate 9-digit Random Number as a unique temporary variable name
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "expr round(1e9*rand())") strvar=id
write    "MSG: ***2pt Random Number = &id "

!Input L1A_RAW_PIX Module**********************************************
!Extract Raw DNs from L1A_RAW_PIX, 1 band, each 11264x5400 16bit integers.
!Convert hdf5 to vicar using gdal libraries.
!ush       gdalinfo &inph5i
!ush       gdal_translate -of VICAR 'HDF5:"&inph5i"://UncalibratedPixels/pixel_data_&band' &"outimg"/b&"band"_image.hlf
!***Temporary Read input from vicar***
ush       cp /project/sandbox/tllogan/l1a_test/l1a_raw_001_data/b&"band"_img_raw.hlf &"outimg"/b&"band"_image.hlf
!Verify image size, if not 11264x5400, adjust it.
form     &"outimg"/b&"band"_image.hlf format nl ns
write    "MSG: ***Input Image Size is: &nl Lines x &ns Samples "
if          ((nl<>11264)or(ns<>5400))
 write   "MSG: ***ERROR b&"band"_image" has Incorrect Image Size "
 write   "MSG: ***Correcting Image Size"
 tush     echo "Correcting Image Size" >> L1Ajob_&"suffix".log
 gen      xxa_&id nl=11264 ns=5400 ival=0. linc=0. sinc=0. 'half
 insect  (xxa_&id,&"outimg"/b&"band"_image.hlf) xxb_&id +
          size=(1,1,11264,5400) insect=(1,1,&nl,&ns,1,1)
 copy     xxb_&id &"outimg"/b&"band"_image.hlf
else
end-if
write    "MSG: ***Finished Reading L1A_RAW_PIX Band &band"
tush      echo "Finished Reading L1A_RAW_PIX Band &band" >> L1Ajob_&"suffix".log

!Input L1A_BB DN Module************************************************
!Extract Raw FPA DNs from L1A_BB, 1 band, both 325 and 295 BB files
!Log hdf5 to vicar using gdal libraries.
!ush       gdalinfo &inph5b
!ush       gdal_translate -of VICAR 'HDF5:"&inph5b"://BlackBodyPixels_B&"band"_blackbody_325K' &"outbdn"/dn325b&"band".hlf
!ush       gdal_translate -of VICAR 'HDF5:"&inph5b"://BlackBodyPixels_B&"band"_blackbody_295K' &"outbdn"/dn295b&"band".hlf
!***Temporary BB FPA DNs input from vicar***
copy      l1a_bb_001_data/b&"band"_bb_325.hlf &"outbdn"/dn325b&"band".hlf
copy      l1a_bb_001_data/b&"band"_bb_295.hlf &"outbdn"/dn295b&"band".hlf
write    "MSG: ***Finished Reading L1A_BB Band &band"
tush      echo "Finished Reading L1A_BB Band &band" >> L1Ajob_&"suffix".log

!Gain/Offset Calculation Module****************************************
!Convert image DN to spectral radiance using gain & offset
if       (band=6) goto jump1  !B6=SWIR (No Radiance)
!Calculate Offset (a)
f2       (&"inprad"/b&"band"_325.rel, +
          &"inprad"/b&"band"_295.rel,+
          &"outbdn"/dn325b&"band".hlf,&"outbdn"/dn295b&"band".hlf) xxoffs_&id +
          func="((in1*in4)-(in2*in3))/(in4-in3)" format=real
!Calculate Gain (b)
f2       (&"inprad"/b&"band"_325.rel, +
          &"inprad"/b&"band"_295.rel, +
          &"outbdn"/dn325b&"band".hlf,&"outbdn"/dn295b&"band".hlf) xxgain_&id +
          func="(in2-in1)/(in4-in3)" format=real
!Focal Plane gain/offset images are 256x1, duplicate them to the size of input image.
!Output size is 11264 lines by 5400 samples.
!offset scaling
size      xxoffs_&id xxa_&id size=(1,1,256,5400) 'noin
append   (xxa_&id,xxa_&id,xxa_&id,xxa_&id,xxa_&id,xxa_&id,xxa_&id,+
          xxa_&id,xxa_&id,xxa_&id) xx1_&id
copy      xx1_&id xx2_&id
copy      xx1_&id xx3_&id
copy      xx1_&id xx4_&id
copy      xx1_&id xx5_&id size=(1,1,1024,5400)
append   (xx1_&id,xx2_&id,xx3_&id,xx4_&id,xx5_&id) xxoff2_&id
!gain scaling
size      xxgain_&id xxa_&id size=(1,1,256,5400) 'noin
append   (xxa_&id,xxa_&id,xxa_&id,xxa_&id,xxa_&id,xxa_&id,xxa_&id,+
          xxa_&id,xxa_&id,xxa_&id) xx1_&id
copy      xx1_&id xx2_&id
copy      xx1_&id xx3_&id
copy      xx1_&id xx4_&id
copy      xx1_&id xx5_&id size=(1,1,1024,5400)
append   (xx1_&id,xx2_&id,xx3_&id,xx4_&id,xx5_&id) xxgain2_&id
write    "MSG: ***Finished Creating Gain/Offsets for Band &band"
tush      echo "Finished Creating Gain/Offsets for Band &band" >> L1Ajob_&"suffix".log

!2-Point Conversion Module*********************************************
!DN to Radiance two-point conversion: R=a+(b*DN)
!2point Calibration
f2       (xxoff2_&id,xxgain2_&id,&"outimg"/b&"band"_image.hlf) +
          &"outwat"/L1A_RAD_B&"band"_&"suffix".rel +
          func="in1+(in2*in3)" format=real
write    "MSG: ***Finished 2pt DN-to-Rad Conversion for Band &band"
tush      echo "Finished 2pt DN-to-Rad Conversion for Band &band" >> L1Ajob_&"suffix".log
if       (debug>0)
 hist     &"outwat"/L1A_RAD_B&"band"_&"suffix".rel sigma=sd mean=avg count=count
 tush     echo "Histogram Mean=&avg SD=&sd Count=&count" >> L1Ajob_&"suffix".log
end-if

!Radiance-to-Temperature Conversion Module*****************************
!Convert Radiance Product to Temperature Kelvin for TESTING Purposes
!Source: http://ncc.nesdis.noaa.gov/data/planck.html
if       (rad2k = 0) goto skip2
write    "cw = &cw"
write    "c1 = &c1"
write    "c2 = &c2"
f2        &"outwat"/L1A_RAD_B&"band"_&"suffix".rel &"outwat"/L1A_KEL_B&"band"_&"suffix".hlf +
          func="&c2/(&cw*(alog(&c1/(&cw**5*in1)+1)))" 'half
write    "MSG: ***Finished Rad-to-Temp Conversion for Band &band"
tush      echo "Finished Rad-to-Temp Conversion for Band &band" >> L1Ajob_&"suffix".log
if       (debug>0)
 hist     &"outwat"/L1A_KEL_B&"band"_&"suffix".hlf sigma=sd mean=avg count=count
 tush     echo "Histogram Mean=&avg SD=&sd Count=&count" >> L1Ajob_&"suffix".log
end-if

goto      skip2   !Bands 1-5 skip over SWIR processing

jump1>
!SWIR B6 Dark Current Module*******************************************
!Subtact Dark Current from SWIR Band6
!Duplicate FPA to match image size
!325K BB Dark Current FPA
size      &"outbdn"/dn325b&"band".hlf xxa_&id size=(1,1,256,5400) 'noin
append   (xxa_&id,xxa_&id,xxa_&id,xxa_&id,xxa_&id,xxa_&id,xxa_&id,+
          xxa_&id,xxa_&id,xxa_&id) xx1_&id
copy      xx1_&id xx2_&id
copy      xx1_&id xx3_&id
copy      xx1_&id xx4_&id
copy      xx1_&id xx5_&id size=(1,1,1024,5400)
append   (xx1_&id,xx2_&id,xx3_&id,xx4_&id,xx5_&id) xxdc325_&id
!295K BB Dark Current FPA
size      &"outbdn"/dn295b&"band".hlf xxa_&id size=(1,1,256,5400) 'noin
append   (xxa_&id,xxa_&id,xxa_&id,xxa_&id,xxa_&id,xxa_&id,xxa_&id,+
          xxa_&id,xxa_&id,xxa_&id) xx1_&id
copy      xx1_&id xx2_&id
copy      xx1_&id xx3_&id
copy      xx1_&id xx4_&id
copy      xx1_&id xx5_&id size=(1,1,1024,5400)
append   (xx1_&id,xx2_&id,xx3_&id,xx4_&id,xx5_&id) xxdc295_&id
!Average Dark Current FPA images
f2       (xxdc325_&id,xxdc295_&id) xxa_&id func="(in1+in2)/2"
!Subtract Dark Current from SWIR Image (No Negative values)
f2       (&"outimg"/b6_image.hlf,xxa_&id) &"outwat"/L1A_DCC_B6_&"suffix".hlf +
          func="(in1-in2)*((in1-in2)>=0)"
copy      &"outwat"/L1A_DCC_B6_&"suffix".hlf &"outimg"/b6_image.hlf
write    "MSG: ***Finished DC Subtraction for Band &band"
tush      echo "Finished DC Subtraction for Band &band" >> L1Ajob_&"suffix".log
if       (debug>0)
 hist     &"outwat"/L1A_DCC_B6_&"suffix".hlf sigma=sd mean=avg count=count
 tush     echo "Histogram Mean=&avg SD=&sd Count=&count" >> L1Ajob_&"suffix".log
end-if

skip2>
!Program Ending Maintenance Module*************************************
!Successful Completion:
goto      theend

error1>
!Miscellaneous Error:
write    "MSG: ***Unknown Error --- Aborting"
write    "MSG: ***L1A_2PT job Failed"
tush      echo ***Unknown Error --- Aborting >> L1Ajob_&"suffix".log
tush      echo ***L1A_2PT Job Failed >> L1Ajob_&"suffix".log
ush       echo L1A_CAL PGE: ERROR-1-[Job Failed] >> L1Ajob_&"suffix".log
let       $SFI=-1

theend>
if          ((debug=0)or(debug=2))ush rm *_&id *.aux.xml &"outimg"/*.aux.xml
end-proc
