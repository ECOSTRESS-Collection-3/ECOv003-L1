!***Program Name:
!   el1a_bbcal.pdf (Ecostress L1A BlackBody calibration)
!   An L1A_CAL PGE Program supporting the ECOSTRESS Project
!***Date/Version:
!   02NOV2016 Version: 0.7 T.L.Logan
!   Written for VICAR with TAE scripting.
!***Function:
!   ECOSTRESS L1A Blackbody Radiometric Calibration.
!   For each image/scene, Create Blackbody FPA calibration files
!     from Pre-Flight and In-Flight pt-RTD temperature gradient files (Kelvin).
!   Convert BB FPA (Focal Plane Array)  Kelvin files to Radiance for each band.
!   Choose between two Kelvin-to-radiance Planck algorithms.
!     Option 1: Center Wavelength Planck Function
!               Source: http://ncc.nesdis.noaa.gov/data/planck.html
!     Option 2: Integrate Between Bandwidth
!               Source: Gouillioud,R., 2015. "ECOSTRESS_Error_Budget_2015-04-08.xlsm"
!   Output is 10 Radiance FPA files (325 and 295 BB cal files for 5 TIR bands).
!   VICAR Note: program f2 handles 32bit float (real) not 64bit doub.
!   Calls procedure el1a_2pt.pdf to convert DN Images to Radiance.

procedure
!Progam Parameters****************************************************
!User Supplied Parameters:
! inph5e: L1A_ENG      /path/name for pt-RTDs Blackbody temperatures (10 Kelvin temps)
! inph5i: L1A_RAW_PIX  /path/name for Raw Imagery; Six wavelength bands
! inph5b: L1A_BB       /path/name for FPA Blackbody DN; Six wavelength bands
! inpupf: L1A_PCF_UPF  /path/name for L1A-CAL PGE Processing Control File
! outp1:  L1A_PIX      /path for Output L1A_PIX file
! outp2:  transfer     /path for Output Intermediate Radiance, Gain/Offset & Temp files
! pcount: File Version (vv) provided by PCS (Product Counter) 
parm   inph5e  string   def="/project/test/ASTER/EndToEndTest/latest/ECOSTRESS_L1A_ENG_80005_20150124T204251_0100_01.h5.expected"
parm   inph5i  string   def="/project/test/ASTER/EndToEndTest/latest/L1A_RAW_PIX_80005_001_20150124T204251_0100_01.h5.expected" 
parm   inph5b  string   def="/project/test/ASTER/EndToEndTest/latest/ECOSTRESS_L1A_BB_80005_001_20150124T204251_0100_01.h5.expected"
parm   inpupf  string   def="/project/sandbox/tllogan/l1a_test/L1A_PCF_UPF.txt"
parm   outp1   string   def="./"
parm   outp2   string   def="./"
parm   pcount  type=(string,2) def="18"
!Program Parameters:
parm   palg    integer  def=1 valid=(1:2) !Planck algorithm; 1=CW; 2=Iteration
parm   rad2k   integer  def=1 valid=(0:1) !Convert radiance to Kelvin. 0=No; 1=Yes
parm   radout  integer  def=1 valid=(0:1) !Output radiance image. 0=No; 1=Yes
parm   debug   integer  def=2 valid=(0:2) !Verbose Messages; 0=No;1=Yes;2=Yes+Del-x
parm   pre325  real     def=325.0  !Pre-Flight 325BB temperature Kelvins
parm   pre295  real     def=295.0  !Pre-Flight 295BB temperature Kelvins
parm   bbgain  real     def=1.0    !Blackbody Adjustment Gain value
parm   bboffs  real     def=0.0    !Blackbody Adjustment Offset value
!Internal Temporary Local Directories:
parm   outkel  string   def="BlackbodyTemp"     !Output dir for fpa kelvin.
parm   outrad  string   def="BlackbodyRadiance" !Output dir for fpa radiance.
parm   outimg  string   def="UncalibratedDN"    !Output dir for image DN
parm   outbdn  string   def="BlackBodyDN"       !Output dir for fpa DN
parm   outwat  string   def="ImgRadiance"       !Output dir for image radiance
!Local Parameters:
local  bandn   integer  !Thermal Bands 1-5
local  cw      real     !center wavelength dummy real
local  bw      real     !band width dummy real
local  lw      real     !low end band width dummy real
local  hw      real     !high end band width dummy real
local  c1      real     init=1.191042E08 !First planck constant
local  c2      real     init=14387.752   !Second planck constant
local  a1      real     init=8.73068E-13 !Watts conversion factor
local  tol     real     init=0.00000001  !Tolerance wave iteration (or 0.0000001)
local  cw1     real     !Center WaveLength band1
local  cw2     real     !Center WaveLength band2
local  cw3     real     !Center WaveLength band3
local  cw4     real     !Center WaveLength band4
local  cw5     real     !Center WaveLength band5
local  cw6     real     !Center WaveLength band6
local  bw1     real     !Band Width Range band1
local  bw2     real     !Band Width Range band2 
local  bw3     real     !Band Width Range band3
local  bw4     real     !Band Width Range band4
local  bw5     real     !Band Width Range band5
local  bw6     real     !Band Width Range band6
local  lw1     real     !Low end of Band Width Range Band1
local  lw2     real     !Low end of Band Width Range Band2
local  lw3     real     !Low end of Band Width Range Band3
local  lw4     real     !Low end of Band Width Range Band4
local  lw5     real     !Low end of Band Width Range Band5
local  lw6     real     !Low end of Band Width Range Band6
local  hw1     real     !High end of Band Width Range Band1
local  hw2     real     !High end of Band Width Range Band2
local  hw3     real     !High end of Band Width Range Band3
local  hw4     real     !High end of Band Width Range Band4
local  hw5     real     !High end of Band Width Range Band5
local  hw6     real     !High end of Band Width Range Band6
local  N       integer  !Algorithm2 variable
local  rn      real     !Algorithm2 variable
local  min     real     !Algorithm2 variable
local  max     real     !Algorithm2 variable
local  orbit   string   !OOOOO Orbit number
local  scene   string   !SSS Scene number
local  date    string   !YYYYMMDD Year Month Day
local  time    string   !HHMMSS Hour Minute Second
local  build   string   !BBbb Build
local  ver     string   !VV Version
local  hdf     string   init=".h5"
local  found   integer  !0=no file; 1=file found
local  id      string   !Unique variable name
local  strname string   !Variable Names
local  suffixI string   !Input Scene ID/suffix
local  suffix  string   !Output Product Scene ID/suffix
local  temp    real     init=0.0 !pt-RTD calculated BB temperature
local  std     real     init=0.0 !pt-RTD calculated standard deviation
local  sd      real     !Histogram standard deviation
local  avg     real     !Histogram mean
local  count   integer  !Histogram number of elements
local  rtd1    real     !pt-RTD #1
local  rtd2    real     !pt-RTD #2
local  rtd3    real     !pt-RTD #3
local  rtd4    real     !pt-RTD #4
local  rtd5    real     !pt-RTD #5
local  t325    real     init=0.0 !final pt-RTD temperature for Hot BB
local  t295    real     init=0.0 !final pt-RTD temperature for Cold BB
body
let      _onfail="goto error2"

datetime
!Proc Startup Module***************************************************
write    "***L1A_CAL PGE Batchjob Starting"
write    " "

!Create a temporary Status Log file
file2tcl  L1AjobStatus.log val=found
if       (found=0) tush echo "" > L1AjobStatus.log
tush      echo "***L1A_CAL PGE Batchjob Starting at date/time:" >> L1AjobStatus.log
tush      date >> L1AjobStatus.log 
tush      echo "" >> L1AjobStatus.log

!Verify Input Files Module*********************************************
tush      echo "***Verifying Input Files" >> L1AjobStatus.log
!Verify L1A_RAW_PIX
file2tcl  inp=&inph5i val=found
tush      echo "Searching for L1A_RAW_PIX" >> L1AjobStatus.log
if       (found=1) tush echo "Found &inph5i" >> L1AjobStatus.log
if       (found=0) write "MSG: ***ERROR - FILE &inph5i NOT FOUND***"
if       (found=0) goto error1
!Verify L1A_BB
file2tcl  inp=&inph5b val=found
tush      echo "Searching for L1A_BB" >> L1AjobStatus.log
if       (found=1) tush echo "Found &inph5b" >> L1AjobStatus.log
if       (found=0) write "MSG: ***ERROR - FILE &inph5b NOT FOUND***"
if       (found=0) goto error1
!Verify L1A_ENG
file2tcl  inp=&inph5e val=found
tush      echo "Searching for L1A_ENG" >> L1AjobStatus.log
if       (found=1) tush echo "Found &inph5e" >> L1AjobStatus.log
if       (found=0) write "MSG: ***ERROR - FILE &inph5e NOT FOUND***"
if       (found=0) goto error1
!Verify L1A_PCF_UPF
file2tcl  inp=&inpupf val=found
tush      echo "Searching for L1A_PCF_UPF" >> L1AjobStatus.log
if       (found=1) tush echo "Found &inpupf" >> L1AjobStatus.log
if       (found=0) write "MSG: ***ERROR - FILE &inpupf NOT FOUND***"
if       (found=0) goto error1
!Verify L1A_PIX path
file2tcl  inp=&outp1 val=found
tush      echo "Searching for L1A_PIX Path" >> L1AjobStatus.log
if       (found=1) tush echo "Found &outp1" >> L1AjobStatus.log
if       (found=0) write "MSG: ***ERROR - PATH &outp1 NOT FOUND***"
if       (found=0) goto error1
!Verify Transfer File path
file2tcl  inp=&outp2 val=found
tush      echo "Searching for L1A Transfer File Path" >> L1AjobStatus.log
if       (found=1) tush echo "Found &outp2" >> L1AjobStatus.log
if       (found=0) write "MSG: ***ERROR - PATH &outp2 NOT FOUND***"
if       (found=0) goto error1

!Name Parsing Module***************************************************
!Extract Scene ID/Date/Time information from input L1A_RAW_PIX file
!Remove directory/path from filename
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "removePath &inph5i") strvar=strname
write    "MSG: ***Input File = &strname "

!Parse the input image/scene name
tcl2tcl   script="string range &strname 12 16" strvar=orbit
write    "MSG: ***orbit = &orbit "
tcl2tcl   script="string range &strname 18 20" strvar=scene
write    "MSG: ***scene = &scene "
tcl2tcl   script="string range &strname 22 29" strvar=date
write    "MSG: ***date = &date "
tcl2tcl   script="string range &strname 31 36" strvar=time
write    "MSG: ***time = &time "
tcl2tcl   script="string range &strname 38 41" strvar=build
write    "MSG: ***build = &build "
tcl2tcl   script="string range &strname 43 44" strvar=ver
write    "MSG: ***version = &ver "
write    "MSG: ***Product File Version= &pcount "
let       suffixI = "&"orbit"_&"scene"_&"date"T&"time"_&"build"_&ver"
let       suffix = "&"orbit"_&"scene"_&"date"T&"time"_&"build"_&pcount"
!Rename Status Log file
ush       mv L1AjobStatus.log L1Ajob_&"suffix".log
tush      echo "" >> L1Ajob_&"suffix".log
tush      echo "***Scene ID Information:" >> L1Ajob_&"suffix".log
write    "MSG: ***Input Scene ID= &suffixI "
tush      echo "Input Scene ID: &suffixI" >> L1Ajob_&"suffix".log
write    "MSG: ***Outut Scene ID= &suffix " 
tush      echo "Output Product ID: &suffix" >> L1Ajob_&"suffix".log

!Calculate 9-digit Random Number as a unique temporary variable name
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "expr round(1e9*rand())") strvar=id
write    "MSG: ***bbcal Random Number = &id "

!UPF Processing Module*************************************************
!PCF/UPF Processing Control File
!List PCF file
write    " "
write    "***** LISTING the PCF File: *****"
write    " "
ush       cat &inpupf
write    " "
tush      echo "" >> L1Ajob_&"suffix".log
tush      echo "*** LISTING the PCF File for this Job:" >> L1Ajob_&"suffix".log
ush       cat &inpupf >> L1Ajob_&"suffix".log

!Read the PCF file Parameters
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf FPA_BB_TEMPERATURE=") strvar=outkel
write    "MSG: ***FPA_BB_TEMPERATURE= &outkel "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf FPA_BB_DN=") strvar=outbdn
write    "MSG: ***FPA_BB_DN= &outbdn "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf IMAGE_RAW_DN=") strvar=outimg
write    "MSG: ***IMAGE_RAW_DN= &outimg "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf FPA_RADIANCE=") strvar=outrad
write    "MSG: ***FPA_RADIANCE= &outrad "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf CALC_IMAGE_RADIANCE=") strvar=outwat
write    "MSG: ***CALC_IMAGE_RADIANCE= &outwat "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf BBTEMP_GAIN=") realvar=bbgain
write    "MSG: ***BBTEMP_GAIN= &bbgain "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf BBTEMP_OFFS=") realvar=bboffs
write    "MSG: ***BBTEMP_OFFS= &bboffs "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2DecVal &inpupf VERBOSE=") intvar=debug
write    "MSG: ***VERBOSE= &debug "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2DecVal &inpupf PLANCK_ALGORITHM=") intvar=palg
write    "MSG: ***PLANCK_ALGORITHM= &palg "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2DecVal &inpupf KELVIN_IMAGES=") intvar=rad2k
write    "MSG: ***KELVIN_IMAGES= &rad2k "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2DecVal &inpupf RADIANCE_IMAGES=") intvar=radout
write    "MSG: ***RADIANCE_IMAGES= &radout "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf FIRST_CONSTANT_C1=") realvar=c1
write    "MSG: ***FIRST_CONSTANT_C1= &c1 "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf SECOND_CONSTANT_C2=") realvar=c2
write    "MSG: ***SECOND_CONSTANT_C2= &c2 "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf WATTS_CONVERT=") realvar=a1
write    "MSG: ***WATTS_CONVERT= &a1 "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf ITERATION_TOLERANCE=") realvar=tol
write    "MSG: ***ITERATION_TOLERANCE= &tol "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf B1_CW=") realvar=cw1  
write    "MSG: ***B1_CW= &cw1 "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf B2_CW=") realvar=cw2
write    "MSG: ***B2_CW= &cw2 "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf B3_CW=") realvar=cw3
write    "MSG: ***B3_CW= &cw3 "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf B4_CW=") realvar=cw4
write    "MSG: ***B4_CW= &cw4 "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf B5_CW=") realvar=cw5
write    "MSG: ***B5_CW= &cw5 "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf B6_CW=") realvar=cw6
write    "MSG: ***B6_CW= &cw6 "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf B1_BW=") realvar=bw1
write    "MSG: ***B1_BW= &bw1 "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf B2_BW=") realvar=bw2
write    "MSG: ***B2_BW= &bw2 "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf B3_BW=") realvar=bw3
write    "MSG: ***B3_BW= &bw3 "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf B4_BW=") realvar=bw4
write    "MSG: ***B4_BW= &bw4 "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf B5_BW=") realvar=bw5
write    "MSG: ***B5_BW= &bw5 "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf B6_BW=") realvar=bw6
write    "MSG: ***B6_BW= &bw6 "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf B1_LW=") realvar=lw1
write    "MSG: ***B1_LW= &lw1 "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf B2_LW=") realvar=lw2
write    "MSG: ***B2_LW= &lw2 "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf B3_LW=") realvar=lw3
write    "MSG: ***B3_LW= &lw3 "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf B4_LW=") realvar=lw4
write    "MSG: ***B4_LW= &lw4 "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf B5_LW=") realvar=lw5
write    "MSG: ***B5_LW= &lw5 "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf B6_LW=") realvar=lw6
write    "MSG: ***B6_LW= &lw6 "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf B1_HW=") realvar=hw1
write    "MSG: ***B1_HW= &hw1 "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf B2_HW=") realvar=hw2
write    "MSG: ***B2_HW= &hw2 "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf B3_HW=") realvar=hw3
write    "MSG: ***B3_HW= &hw3 "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf B4_HW=") realvar=hw4
write    "MSG: ***B4_HW= &hw4 "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf B5_HW=") realvar=hw5
write    "MSG: ***B5_HW= &hw5 "
tcl2tcl   script=("source $env(AFIDS_TCL)/taehelp.tcl; ", +
         "fileVar2Val &inpupf B6_HW=") realvar=hw6
write    "MSG: ***B6_HW= &hw6 "

!Verify Internal Directories
!Verify Output FPA Kelvin Directory (if not found)
file2tcl  inp=&outkel val=found
if       (found=0) ush mkdir &outkel
if       (found=0) write "MSG: ***&outkel directory Not Found --- Was Created"
!Verify Output FPA Radiance Directory (if not found)
file2tcl  inp=&outrad val=found
if       (found=0) ush mkdir &outrad
if       (found=0) write "MSG: ***&outrad directory Not Found --- Was Created"
file2tcl  inp=&outimg val=found
if       (found=0) ush mkdir &outimg
if       (found=0) write "MSG: ***&outimg Directory Not Found --- Was Created"
file2tcl  inp=&outbdn val=found
if       (found=0) ush mkdir &outbdn
if       (found=0) write "MSG: ***&outbdn Directory Not Found --- Was Created"
file2tcl  inp=&"outp2"/&outwat val=found
if       (found=0) ush mkdir &"outp2"/&outwat
if       (found=0) write "MSG: ***&"outp2"/&outwat Directory Not Found --- Was Created"

!Create Kelvin FPA Module**********************************************
!Calculate Cold and Hot Blackbody FPA temperature images (1x256 Kelvin).
!BB Temperatures are obtained from pt-RTD sensors on the back of the
!instrument blackbodys, downloaded via 1553, then packaged and read from
!the L1A_ENG file. The 5 RTD temperatures for each blackbody are averaged
!in all combinations of 3, 4, and 5 values, with the combination with the
!lowest variance selected as the best representation of the BB temperature. 
tush      echo "" >> L1Ajob_&"suffix".log
tush      echo "***Creating FPA Blackbodys" >> L1Ajob_&"suffix".log
!Input pt-RTD Blackbody Temperature Measurements
write    "Beginning ush gdalinfo" 
ush       gdalinfo &inph5e
!Calculate pt-RTD Hot Blackbody Temperature
write    "Beginning ush h5dump" 
ush       h5dump -d /"rtdBlackbodyGradients"/"RTD_325K" -o 325_txt_&id &inph5e
write    "Beginning ush cat" 
ush cat   325_txt_&id 325_txt_&id > x325_txt_&id
asc2tcl   inp=x325_txt_&id seq=1 keyword="(0):" vtype=8 val=rtd1
write    "rtd1= &rtd1 "
asc2tcl   inp=x325_txt_&id seq=2 keyword="(0):" vtype=8 val=rtd2
write    "rtd2= &rtd2 "
asc2tcl   inp=x325_txt_&id seq=3 keyword="(0):" vtype=8 val=rtd3
write    "rtd3= &rtd3 "
asc2tcl   inp=x325_txt_&id seq=4 keyword="(0):" vtype=8 val=rtd4
write    "rtd4= &rtd4 "
asc2tcl   inp=x325_txt_&id seq=5 keyword="(0):" vtype=8 val=rtd5
write    "rtd5= &rtd5 "
write    " "
!Create 1x5 temperature image and IBIS Tables
ibis-gen  tab_&id nc=3 nr=6
ibis-gen  int_&id nc=5 nr=1 datacol=(1,2,3,4,5) +
          data=(&rtd1,&rtd2,&rtd3,&rtd4,&rtd5)
ibis-l    int_&id
mssibis   int_&id img_&id nc=5 nl=5 ns=1 'tomss 'real !nl/ns are reversed
label-l   img_&id
list      img_&id 'zero
!Calculate Mean and STD for all combinations of RTDs
!Combo 1: RTDs 1,2,3,4,5
hist      img_&id size=(1,1,1,5) mean=avg sigma=sd 'nohi 'excl
edibis    tab_&id comm=("(1,1) set 1")
edibis    tab_&id comm=("(1,2) set &avg")
edibis    tab_&id comm=("(1,3) set &sd")
!Combo 2: RTDs 1,2,3,4
hist      img_&id size=(1,1,1,4) mean=avg sigma=sd 'nohi 'excl
edibis    tab_&id comm=("(2,1) set 2")
edibis    tab_&id comm=("(2,2) set &avg")
edibis    tab_&id comm=("(2,3) set &sd")
!Combo 3: RTDs 1,2,3
hist      img_&id size=(1,1,1,3) mean=avg sigma=sd 'nohi 'excl
edibis    tab_&id comm=("(3,1) set 3")
edibis    tab_&id comm=("(3,2) set &avg")
edibis    tab_&id comm=("(3,3) set &sd")
!Combo 4: RTDs 2,3,4,5
hist      img_&id size=(1,2,1,4) mean=avg sigma=sd 'nohi 'excl
edibis    tab_&id comm=("(4,1) set 4")
edibis    tab_&id comm=("(4,2) set &avg")
edibis    tab_&id comm=("(4,3) set &sd")
!Combo 5: RTDs 2,3,4
hist      img_&id size=(1,2,1,3) mean=avg sigma=sd 'nohi 'excl
edibis    tab_&id comm=("(5,1) set 5")
edibis    tab_&id comm=("(5,2) set &avg")
edibis    tab_&id comm=("(5,3) set &sd")
!Combo 6: RTDs 3,4,5
hist      img_&id size=(1,3,1,3) mean=avg sigma=sd 'nohi 'excl
edibis    tab_&id comm=("(6,1) set 6")
edibis    tab_&id comm=("(6,2) set &avg")
edibis    tab_&id comm=("(6,3) set &sd")
write     "Column1 Table Codes:"
write     "1: RTDs 1,2,3,4,5"
write     "2: RTDs 1,2,3,4"
write     "3: RTDs 1,2,3"
write     "4: RTDs 2,3,4,5"
write     "5: RTDs 2,3,4"
write     "6: RTDs 3,4,5"
!Analyze statistics and select the best Blackbody Temperature
sort      tab_&id sortcol=(3,2) 'ascend  !Bring lowest STD to top
ibis-l    tab_&id cols=(1,2,3) cfor="%5.0f %11.3f %11.6f"
rowop2    tab_&id tab2_&id keycol=(2,2) +
          range=(-9999,320,330,9999) 'delete !Remove BAD Temps
!Note: if no combos meet Rowop2 requirements, the Ibis2tcl step will
!error, Temp & STD will default to init (0.0), and the UPF-supplied
!temperature values will be used. 
ibis2tcl  tab2_&id v1=temp v2=std ibisloc=(1,2,1,3) vartype=(0,0)
ibis-l    tab_&id nr=1 cols=(1,2,3) cfor="%5.0f %11.3f %11.6f"
write    "***RTD Temp= &temp  RTD STD= &std "
if       ((std>0.2)or(temp<1))
 write   "***Bad RTDs, Using UPF-Supplied Temperature"
 let      t325=pre325
else
 let      t325=&temp
end-if
write    "***Hot Blackbody Temperature= &t325 Kelvin"
gen       xxa_&id nl=256 ns=1 ival=&t325 linc=0. sinc=0. 'real
f2        xxa_&id xkel325_&id func="((in1*&"bbgain")+&bboffs)"
hist      xkel325_&id
copy      xkel325_&id &"outkel"/fpa_325.rel
if       (debug>0)
 write   "MSG: ***325 Kelvin Black Body Histogram"
 hist     xkel325_&id sigma=sd mean=avg count=count
 tush     echo "325 Kelvin Black Body Histogram:" >> L1Ajob_&"suffix".log
 tush     echo "Histogram Mean=&avg SD=&sd Count=&count" >> L1Ajob_&"suffix".log
end-if

!Calculate pt-RTD Cold Blackbody Temperature
let       temp=0.0 !Reset default
let       std=0.0  !Reset default
write    "Beginning ush h5dump" 
ush       h5dump -d /"rtdBlackbodyGradients"/"RTD_295K" -o 295_txt_&id &inph5e
write    "Beginning ush cat" 
ush       cat 295_txt_&id 295_txt_&id > x295_txt_&id
asc2tcl   inp=x295_txt_&id seq=1 keyword="(0):" vtype=8 val=rtd1
write    "rtd1= &rtd1 "
asc2tcl   inp=x295_txt_&id seq=2 keyword="(0):" vtype=8 val=rtd2
write    "rtd2= &rtd2 "
asc2tcl   inp=x295_txt_&id seq=3 keyword="(0):" vtype=8 val=rtd3
write    "rtd3= &rtd3 "
asc2tcl   inp=x295_txt_&id seq=4 keyword="(0):" vtype=8 val=rtd4
write    "rtd4= &rtd4 "
asc2tcl   inp=x295_txt_&id seq=5 keyword="(0):" vtype=8 val=rtd5
write    "rtd5= &rtd5 "
write    " "
!Create 1x5 temperature image and IBIS Tables
ibis-gen  tab_&id nc=3 nr=6
ibis-gen  int_&id nc=5 nr=1 datacol=(1,2,3,4,5) +
          data=(&rtd1,&rtd2,&rtd3,&rtd4,&rtd5)
ibis-l    int_&id
mssibis   int_&id img_&id nc=5 nl=5 ns=1 'tomss 'real !nl/ns are reversed
label-l   img_&id
list      img_&id 'zero
!Calculate Mean and STD for all combinations of RTDs
!Combo 1: RTDs 1,2,3,4,5
hist      img_&id size=(1,1,1,5) mean=avg sigma=sd 'nohi 'excl
edibis    tab_&id comm=("(1,1) set 1")
edibis    tab_&id comm=("(1,2) set &avg")
edibis    tab_&id comm=("(1,3) set &sd")
!Combo 2: RTDs 1,2,3,4
hist      img_&id size=(1,1,1,4) mean=avg sigma=sd 'nohi 'excl
edibis    tab_&id comm=("(2,1) set 2")
edibis    tab_&id comm=("(2,2) set &avg")
edibis    tab_&id comm=("(2,3) set &sd")
!Combo 3: RTDs 1,2,3
hist      img_&id size=(1,1,1,3) mean=avg sigma=sd 'nohi 'excl
edibis    tab_&id comm=("(3,1) set 3")
edibis    tab_&id comm=("(3,2) set &avg")
edibis    tab_&id comm=("(3,3) set &sd")
!Combo 4: RTDs 2,3,4,5
hist      img_&id size=(1,2,1,4) mean=avg sigma=sd 'nohi 'excl
edibis    tab_&id comm=("(4,1) set 4")
edibis    tab_&id comm=("(4,2) set &avg")
edibis    tab_&id comm=("(4,3) set &sd")
!Combo 5: RTDs 2,3,4
hist      img_&id size=(1,2,1,3) mean=avg sigma=sd 'nohi 'excl
edibis    tab_&id comm=("(5,1) set 5")
edibis    tab_&id comm=("(5,2) set &avg")
edibis    tab_&id comm=("(5,3) set &sd")
!Combo 6: RTDs 3,4,5
hist      img_&id size=(1,3,1,3) mean=avg sigma=sd 'nohi 'excl
edibis    tab_&id comm=("(6,1) set 6")
edibis    tab_&id comm=("(6,2) set &avg")
edibis    tab_&id comm=("(6,3) set &sd")
write     "Column1 Table Codes:"
write     "1: RTDs 1,2,3,4,5"
write     "2: RTDs 1,2,3,4"
write     "3: RTDs 1,2,3"
write     "4: RTDs 2,3,4,5"
write     "5: RTDs 2,3,4"
write     "6: RTDs 3,4,5"
!Analyze statistics and select the best Blackbody Temperature
sort      tab_&id sortcol=(3,2) 'ascend  !Bring lowest STD to top
ibis-l    tab_&id cols=(1,2,3) cfor="%5.0f %11.3f %11.6f"
rowop2    tab_&id tab2_&id keycol=(2,2) +
          range=(-9999,290,300,9999) 'delete !Remove BAD Temps
!Note: if no combos meet Rowop2 requirements, the Ibis2tcl step will
!error, Temp & STD will default to init (0.0), and the UPF-supplied
!temperature values will be used. 
ibis2tcl  tab2_&id v1=temp v2=std ibisloc=(1,2,1,3) vartype=(0,0)
ibis-l    tab_&id nr=1 cols=(1,2,3) cfor="%5.0f %11.3f %11.6f"
write    "***RTD Temp= &temp  RTD STD= &std "
if       ((std>0.2)or(temp<1))
 write   "***Bad RTDs, Using UPF-Supplied Temperature"
 let      t295=pre295
else
 let      t295=&temp
end-if
write    "***Cold Blackbody Temperature= &t295 Kelvin"
gen       xxa_&id nl=256 ns=1 ival=&t295 linc=0. sinc=0. 'real
f2        xxa_&id xkel295_&id func="((in1*&"bbgain")+&bboffs)"
hist      xkel295_&id
copy      xkel295_&id &"outkel"/fpa_295.rel
if       (debug>0)
 write   "MSG: ***295 Kelvin Black Body Histogram"
 hist     xkel295_&id sigma=sd mean=avg count=count
 tush     echo "295 Kelvin Black Body Histogram:" >> L1Ajob_&"suffix".log
 tush     echo "Histogram Mean=&avg SD=&sd Count=&count" >> L1Ajob_&"suffix".log
end-if

!Convert Kelvin FPA to Radiance Module*********************************
!For each thermal band fpa, convert FPA Kelvin temperature to Spectral
!  Radiance.
!Loop through the 5 TIR bands
tush      echo "" >> L1Ajob_&"suffix".log
tush      echo "***Converting FPA to Radiance" >> L1Ajob_&"suffix".log
let       bandn = 0

loop

let       bandn = (bandn + 1)
if       (bandn = 7) break  !B6 is SWIR; Include for Completeness
write    ""
write    "MSG: ***Calibrating FPA B&bandn "
write    ""
tush      echo "***Calibrating FPA B&bandn" >> L1Ajob_&"suffix".log

!c1=First Planck Constant
!c2=Second Planck Constant
!a1=Watts Conversion Factor
!tol=Tolerance for wave iteration
!cw=center wavelength
!bw=band width
!lw=beginning (low end) of band wavelength
!hw=end (high end) of band wavelength

!Algorithm 1 uses the Center Wavelength Planck Function from: 
!http://ncc.nesdis.noaa.gov/data/planck.html
if       (palg = 1)
write    "MSG: ***Planck Algorithm 1 - Band &bandn "
tush      echo "Planck Algorithm 1 - Band &bandn" >> L1Ajob_&"suffix".log
!325 Blackbody
let       cw = cw&bandn
write    "MSG: ***Center Wavelength= &cw "
f2        xkel325_&id xrad325_b&"bandn"_&id +
          func="(&c1)/((&cw**5)*(2.718281828459045**(&c2/(&cw*in1))-1))"       
copy      xrad325_b&"bandn"_&id &"outrad"/b&"bandn"_325.rel
if       (debug>0)
 write   "MSG: ***325 BlackBody Radiance Histogram"
 hist     xrad325_b&"bandn"_&id sigma=sd mean=avg count=count
 tush     echo "325 BlackBody Radiance Histogram:" >> L1Ajob_&"suffix".log
 tush     echo "Histogram Mean=&avg SD=&sd Count=&count" >> L1Ajob_&"suffix".log
end-if
!295 Blackbody
f2        xkel295_&id xrad295_b&"bandn"_&id +
          func="(&c1)/((&cw**5)*(2.718281828459045**(&c2/(&cw*in1))-1))"
copy      xrad295_b&"bandn"_&id &"outrad"/b&"bandn"_295.rel
if       (debug>0)
 write   "MSG: ***295 BlackBody Radiance Histogram"
 hist     xrad295_b&"bandn"_&id sigma=sd mean=avg count=count
 tush     echo "295 BlackBody Radiance Histogram:" >> L1Ajob_&"suffix".log
 tush     echo "Histogram Mean=&avg SD=&sd Count=&count" >> L1Ajob_&"suffix".log
end-if
else

!Algorithm 2 Integrates between the lower and upper bounds of the band
!wavelength to calculate the Planck Function. Source:
!Gouillioud,R., 2015. "ECOSTRESS_Error_Budget_2015-04-08.xlsm" NASA/JPL.
write    "MSG: ***Planck Algorithm 2 - Band &bandn "
tush      echo "Planck Algorithm 2 - Band &bandn" >> L1Ajob_&"suffix".log
let       bw = bw&bandn
write    "MSG: ***Band Width= &bw "
let       lw = lw&bandn
write    "MSG: ***Low End Bandwidth= &lw "
let       hw = hw&bandn
write    "MSG: ***High End bandwidth= &hw "
!325 Blackbody
!325 Lower boundary
f2        xkel325_&id xsum1_&id func="in1*0.0"
f2        xkel325_&id xsum2_&id func="in1*0.0"
let       N = 0
f2        xkel325_&id xxa_&id func="&c2/&lw/in1"
if       (debug>0) hist xxa_&id
loop
  let     N = (N + 1)
  if     (N > 100) break
  let     rn = $float(N)
write    "rn = &rn"
  f2      xxa_&id xxc_&id func="&rn*in1"
  f2      xxc_&id xxb_&id +
func="(2.718281828459045**(-in1))/(&rn**4)*(6.0+in1*(6.0+in1*(3.0+in1)))"
  f2     (xsum1_&id,xxb_&id) xs1_&id func="in1+in2"
  f2      xs1_&id xsum1_&id func="in1*1" !copy file
  f2     (xxb_&id,xsum1_&id) xtest_&id func="(in1/in2)<&tol" format=byte
  maxmin  xtest_&id minival=min maxival=max
  if     (min > 0) break
end-loop
if       (debug>0) hist xsum1_&id

!325 Upper boundary
let       N = 0
f2        xkel325_&id xxa_&id func="&c2/&hw/in1"
loop
  let     N = (N + 1)
  if     (N > 100) break
  let     rn = $float(N)
write    "rn = &rn"
  f2      xxa_&id xxc_&id func="&rn*in1"
  f2      xxc_&id xxb_&id +
func="(2.718281828459045**(-in1))/(&rn**4)*(6.0+in1*(6.0+in1*(3.0+in1)))"
  f2     (xsum2_&id,xxb_&id) xs2_&id func="in1+in2"
  f2      xs2_&id xsum2_&id func="in1*1" !copy file
  f2     (xxb_&id,xsum2_&id) xtest_&id func="(in1/in2)<&tol" format=byte
  maxmin  xtest_&id minival=min maxival=max
  if     (min > 0) break
end-loop
if       (debug>0) hist xsum2_&id

f2       (xkel325_&id,xsum2_&id,xsum1_&id) xrad325_b&"bandn"_&id +
          func="((&a1)*(in1**4)*(in2-in3))*10000/&bw/3.14"
copy      xrad325_b&"bandn"_&id &"outrad"/b&"bandn"_325.rel
if       (debug>0)
 write   "MSG: ***325 BlackBody Radiance Histogram"
 hist     xrad325_b&"bandn"_&id sigma=sd mean=avg count=count
 tush     echo "325 BlackBody Radiance Histogram:" >> L1Ajob_&"suffix".log
 tush     echo "Histogram Mean=&avg SD=&sd Count=&count" >> L1Ajob_&"suffix".log
end-if


!295 Blackbody
!295 Lower boundary
f2        xkel295_&id xsum1_&id func="in1*0.0"
f2        xkel295_&id xsum2_&id func="in1*0.0"
let       N = 0
f2        xkel295_&id xxa_&id func="&c2/&lw/in1"
loop
  let     N = (N + 1)
  if     (N > 100) break
  let     rn = $float(N)
write    "rn = &rn"
  f2      xxa_&id xxc_&id func="&rn*in1"
  f2      xxc_&id xxb_&id +
func="(2.718281828459045**(-in1))/(&rn**4)*(6.0+in1*(6.0+in1*(3.0+in1)))"
  f2     (xsum1_&id,xxb_&id) xs1_&id func="in1+in2"
  f2      xs1_&id xsum1_&id func="in1*1" !copy file
  f2     (xxb_&id,xsum1_&id) xtest_&id func="(in1/in2)<&tol" format=byte
  maxmin  xtest_&id minival=min maxival=max
  if     (min > 0) break
end-loop
if       (debug>0) hist xsum1_&id

!295 Upper boundary
let       N = 0
f2        xkel295_&id xxa_&id func="&c2/&hw/in1"
loop
  let     N = (N + 1)
  if     (N > 100) break
  let     rn = $float(N)
write    "rn = &rn"
  f2      xxa_&id xxc_&id func="&rn*in1"
  f2      xxc_&id xxb_&id +
func="(2.718281828459045**(-in1))/(&rn**4)*(6.0+in1*(6.0+in1*(3.0+in1)))"
  f2     (xsum2_&id,xxb_&id) xs2_&id func="in1+in2"
  f2      xs2_&id xsum2_&id func="in1*1" !copy file
  f2     (xxb_&id,xsum2_&id) xtest_&id func="(in1/in2)<&tol" format=byte
  maxmin  xtest_&id minival=min maxival=max
  if     (min > 0) break
end-loop
if       (debug>0) hist xsum2_&id

f2       (xkel295_&id,xsum2_&id,xsum1_&id) xrad295_b&"bandn"_&id +
          func="((&a1)*(in1**4)*(in2-in3))*10000/&bw/3.14"
copy      xrad295_b&"bandn"_&id &"outrad"/b&"bandn"_295.rel
if       (debug>0)
 write   "MSG: ***295 BlackBody Radiance Histogram"
 hist     xrad295_b&"bandn"_&id sigma=sd mean=avg count=count
 tush     echo "295 BlackBody Radiance Histogram:" >> L1Ajob_&"suffix".log
 tush     echo "Histogram Mean=&avg SD=&sd Count=&count" >> L1Ajob_&"suffix".log
end-if
end-if
end-loop
datetime

!Call 2pt Proc Module**************************************************
!Call/Run the 2point DN-to-Radiance proc for each band.
!2pt DN to Radiance Conversion, 5 TIR bands
!B6 SWIR is Dark Current subtracted
tush      echo "" >> L1Ajob_&"suffix".log
tush      echo "***Calling 2pt Radiance Program" >> L1Ajob_&"suffix".log
let       bandn = 0
loop
let       bandn = (bandn + 1)
if       (bandn = 7) break 
if       (bandn <> 6) let cw = cw&bandn

el1a_2pt  band=&bandn rad2k=&rad2k radout=&radout debug=&debug +
          inph5i=&inph5i +
          inph5b=&inph5b +
          inprad=&outrad +
          outimg=&outimg +
          outbdn=&outbdn +
          outwat=&"outp2"/&outwat +
          outp1=&outp1 c1=&c1 c2=&c2 cw=&cw suffix=&suffix
end-loop
tush      echo "" >> L1Ajob_&"suffix".log
tush      echo "***L1A_CAL Batchjob Completed at date/time:" >> L1Ajob_&"suffix".log
tush      date >> L1Ajob_&"suffix".log
if       ($SFI=-1) goto error2
datetime

!Program Ending Maintenance Module*************************************
!Successful Completion:
write    "MSG: ***L1A_BBCAL Job Successful"
write    "VICAR_RESULT-0-[Job Successful]"
tush      echo ***L1A_BBCAL Job Successful >> L1Ajob_&"suffix".log
ush       echo VICAR_RESULT-0-[Job Successful] >> L1Ajob_&"suffix".log
goto      theend

error1>
!File Not Found:
write    "MSG: ***File or Directory Not Found"
write    "MSG: ***L1A_BBCAL Job Failed"
write    "VICAR_RESULT-1-""Job Failed"""
file2tcl  L1AjobStatus.log val=found
if       (found=1) 
  tush    echo ***File or Directory Not Found >> L1AjobStatus.log
  tush    echo ***L1A_BBCAL Job Failed >> L1AjobStatus.log
  ush     echo VICAR_RESULT-1-[Job Failed] >> L1AjobStatus.log
else
  tush    echo ***File or Directory Not Found >> L1Ajob_&"suffix".log
  tush    echo ***L1A_BBCAL Job Failed >> L1Ajob_&"suffix".log
  ush     echo VICAR_RESULT-1-[Job Failed] >> L1Ajob_&"suffix".log
end-if
let      $SFI=-1
goto      theend

error2>
!Miscellaneous Error:
write    "MSG: ***Unknown Error --- Aborting"
write    "MSG: ***L1A_BBCAL Job Failed"
write    "VICAR_RESULT-1-""Job Failed"""
tush      echo ***Unknown Error --- Aborting >> L1Ajob_&"suffix".log
tush      echo ***L1A_BBCAL Job Failed >> L1Ajob_&"suffix".log
ush       echo VICAR_RESULT-1-[Job Failed] >> L1Ajob_&"suffix".log
let      $SFI=-1

theend>
if       ((debug=0)or(debug=2)) ush rm *_&id
end-proc
