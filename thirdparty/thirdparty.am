# See the README file for why we are building tensorflow

# Note that these versions need to match, you can't in general build using
# a different version of bazel
TENSORFLOW_VERSION = 1.14.0
BAZEL_VERSION = 0.24.1

EXTRA_DIST+= thirdparty/README
EXTRA_DIST+= thirdparty/tensorflow-1.14.0.patch

# Don't put the wheel in the dist file. It is really pretty big. We can
# reevaluate that if needed, but for now skip. We do have this checked
# into git using the lfs though
# EXTRA_DIST+= thirdparty/tensorflow-1.14.0-cp37-cp37m-linux_x86_64.whl
# EXTRA_DIST+= thirdparty/tensorflow-1.14.0-cp39-cp39m-linux_x86_64.whl

tensorflow-$(TENSORFLOW_VERSION).tar.gz:
	curl -L -o $@ https://github.com/tensorflow/tensorflow/archive/v$(TENSORFLOW_VERSION).tar.gz

bazel:
	curl -L -o $@ https://github.com/bazelbuild/bazel/releases/download/$(BAZEL_VERSION)/bazel-$(BAZEL_VERSION)-linux-x86_64
	chmod +x $@

# Note numpy 1.19.3 which we now use with AFIDS breaks this. See
# https://github.com/tensorflow/tensorflow/issues/40688 and
# https://github.com/tensorflow/tensorflow/issues/34197
# with the given patch we seem to have fixed this
tensorflow-wheel: tensorflow-$(TENSORFLOW_VERSION).tar.gz bazel thirdparty/tensorflow-1.14.0.patch
	-rm -r tensorflow-$(TENSORFLOW_VERSION)
	tar -xf $<
	PATH=$(abs_builddir):$${PATH} which bazel && \
          cd tensorflow-$(TENSORFLOW_VERSION) && \
          patch -p1 < $(abs_srcdir)/thirdparty/tensorflow-1.14.0.patch && \
          ( yes "" | ./configure ) && \
          $(abs_builddir)/bazel build -c opt \
             //tensorflow/tools/pip_package:build_pip_package && \
          ./bazel-bin/tensorflow/tools/pip_package/build_pip_package $(abs_srcdir)/thirdparty

