import xml.etree.ElementTree as ET
import xml.dom.minidom as minidom
from collections import OrderedDict

class WriteRunConfig(object):
    '''This class writes a run config file, like that generated by PCS.
    This is useful for testing to produce test config files.'''
    def __init__(self):
        '''Create an empty run config file, that you can add items to.'''
        self.data = OrderedDict()

    def __getitem__(self, key):
        '''Return a previously set value.'''
        return self.data[key[0]][key[1]]

    def __setitem__(self, key, value):
        '''Set a value. Should be a string or a vector of strings (or something
        that can be converted to these.'''
        if(not key[0] in self.data):
            self.data[key[0]] = OrderedDict()
        self.data[key[0]][key[1]] = value

    def __str__(self):
        '''Return XML string for the data.'''
        root = ET.Element("input")
        root.set("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance")
        root.set("xmlns:xalan","http://xml.apache.org/xslt")
        root.set("xmlns:cas","http://oodt.jpl.nasa.gov/1.0/cas")
        root.set("xsi:noNamespaceSchemaLocation","")
        for gname,gcontent in self.data.iteritems():
            g = ET.Element("group")
            g.set("name", gname)
            for ename, econtent in gcontent.iteritems():
                if(isinstance(econtent, list)):
                    v = ET.Element("vector")
                    v.set("name", ename)
                    for t in econtent:
                        e = ET.Element("element")
                        e.text = t
                        v.append(e)
                    g.append(v)
                else:
                    s = ET.Element("scalar")
                    s.set("name", ename)
                    s.text=(str(econtent))
                    g.append(s)
            root.append(g)
        # This is a valid string, but all on one line. We can reparse
        # this to generate a pretty xml file, which we want since we may
        # be looking at the output.
        rough_string = ET.tostring(root, "UTF-8")
        reparsed = minidom.parseString(rough_string)
        return reparsed.toprettyxml(indent="\t")

    def write_file(self, fname):
        with open(fname, "w") as fh:
            fh.write(str(self))


