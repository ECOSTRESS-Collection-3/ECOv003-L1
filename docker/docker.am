AFIDS_DVD_DATE = 06-12-2020
AFIDS_FULL_VERSION = 1.28
TENSORFLOW_WHEEL = tensorflow-1.14.0-cp37-cp37m-linux_x86_64.whl
ECOSTRESS_DEPENDENCY_VERSION = 1.0
# Most of the time the image version number will be the same as the
# version defined in configure.ac, but there might be instances where
# we want something different (e.g., we are creating a test image while
# we are working on a new delivery)
ECOSTRESS_IMAGE_VERSION = $(VERSION)

# We pull this out, because --squash is still experimental and not available
# everywhere. You can set this to a blank string to turn this off if needed.
# Images will be larger, but this might not matter.
EXTRA_DOCKER_FLAG= --squash
# Normally want no-chache. If we are rebuilding things, something changed
# and we want to build everything
EXTRA_DOCKER_FLAG+= --no-cache

afids-image: docker/afids-docker/afids-$(AFIDS_DVD_DATE).iso
	-rm $(abs_srcdir)/docker/afids-docker/afids.iso
	ln -s ./$(notdir $<) $(abs_srcdir)/docker/afids-docker/afids.iso
	docker build $(EXTRA_DOCKER_FLAG) -t ecostress/afids:$(AFIDS_FULL_VERSION) $(abs_srcdir)/docker/afids-docker

ecostress-dependency-image:
	cp -r $(abs_srcdir)/docker/ecostress-dependency-repo/ $(abs_srcdir)/docker/ecostress-dependency-docker
	docker build $(EXTRA_DOCKER_FLAG) -t ecostress/ecostress-dependency:$(ECOSTRESS_DEPENDENCY_VERSION) $(abs_srcdir)/docker/ecostress-dependency-docker
	rm -r $(abs_srcdir)/docker/ecostress-dependency-docker/ecostress-dependency-repo

# We normally want to use a Dockerfile to build an image. But in this case
# we want to run our tests before creating an image, which require a number
# of datasets. We want to mount rather than copy, and there is no way to
# do that with Dockerfile. So we instead create a container, build in there,
# and then save the results as an image.

# Various directories that are mounted. This is what is used in our canned
# end to end test data. We actually get this passed
# in through the run xml file, so when the image is run for "real" it is
# a problem of PCS to determine all this and just pass it to the PGEs
#
# We use the --login so the /etc/profile.d files are read, in particular the
# setup of afids.

if CARTLAB_MACHINE
# Locations on pistol/rifle
landsat_dir = /raid22
srtm_dir = /raid25/SRTM_2014_update
datum_dir = /opt/afids/data/vdev
spice_dir = /pkg/afids/afids_latest/data/cspice
end_to_end_dir = /data/smyth/ecostress-test-data
else
# Locations on ECOSTRESS
landsat_dir = /project/ancillary/LANDSAT
srtm_dir = /project/ancillary/SRTM
datum_dir = /pkg/afids/afids_latest/data/vdev
spice_dir = /pkg/afids/afids_latest/data/cspicea
end_to_end_dir = /project/test/ASTER/EndToEndTest
endif

ecostress-image:
	$(MAKE) dist
# Use the default locations of various datasets. 
	docker run -t -d --cidfile=docker_run.id \
           --mount type=bind,src=$(abs_builddir)/,dst=/media/work_dir \
           --mount type=bind,src=$(landsat_dir),dst=/project/ancillary/LANDSAT \
           --mount type=bind,src=$(srtm_dir),dst=/project/ancillary/SRTM \
           --mount type=bind,src=$(datum_dir),dst=/pkg/afids/afids_latest/data/vdev \
           --mount type=bind,src=$(spice_dir),dst=/pkg/afids/afids_latest/data/cspice \
           --mount type=bind,src=$(end_to_end_dir),dst=/project/test/ASTER/EndToEndTest \
           ecostress/ecostress-dependency:$(ECOSTRESS_DEPENDENCY_VERSION) \
           /bin/bash
	docker exec $$(cat docker_run.id) bash --login -c "cd /root && tar -xf /media/work_dir/$(PACKAGE)-$(VERSION).tar.gz"
	docker exec $$(cat docker_run.id) bash --login -c "cd /root/$(PACKAGE)-$(VERSION) && ./configure --with-afids=/opt/afids --with-geocal=/opt/afids --prefix=/opt/ecostress && make -j 12 all && make install && make -j 12 check"
	docker exec $$(cat docker_run.id) bash --login -c "rm -f /etc/profile.d/geocal.sh && cp /opt/ecostress/setup_ecostress.* /etc/profile.d"
	docker exec $$(cat docker_run.id) bash --login -c "mkdir /root/end-to-end-test && cd /root/end-to-end-test && mkdir end_to_end_test_l0_input && ln -s /project/test/ASTER/EndToEndTest/6.00/L0B_03663_20190227T094659_0100_01.h5 /project/test/ASTER/EndToEndTest/6.00/Scene_03663_20190227T094659_20190227T110441.txt end_to_end_test_l0_input && ln -s /project/test/ASTER/EndToEndTest/6.00/l1_osp_dir l1_osp_dir && export ECOSTRESS_END_TO_END_TEST=t && l1a_raw_process /project/test/ASTER/EndToEndTest/6.00/ECOSTRESS_L1A_RAW_RunConfig_20190227T0946.xml && l1a_cal_process /project/test/ASTER/EndToEndTest/6.00/ECOSTRESS_L1A_CAL_RunConfig_03663_001.xml && l1b_rad_process /project/test/ASTER/EndToEndTest/6.00/ECOSTRESS_L1B_RAD_RunConfig_03663_001.xml && l1b_geo_process /project/test/ASTER/EndToEndTest/6.00/ECOSTRESS_L1B_GEO_RunConfig_20190227T0946.xml && parallel --gnu \"echo {}; h5diff -d 4e-2 --exclude-path=/Radiance/radiance_1 --exclude-path=/Radiance/radiance_5 --exclude-path=/SWIR/swir_dn --exclude-path=/Geolocation/height --exclude-path=/Geolocation/view_azimuth --exclude-path=/Geolocation/view_zenith --exclude-path=/Geolocation/land_fraction --exclude-path=/Ephemeris/eci_position /project/test/ASTER/EndToEndTest/6.00/{/}.expected\" ::: ./end_to_end_test_l1a_raw/*.h5 ./end_to_end_test_l1a_cal/*.h5 ./end_to_end_test_l1b_rad/*.h5 ./end_to_end_test_l1b_geo/ECOSTRESS_L1B_ATT*.h5 ./end_to_end_test_l1b_geo/ECOSTRESS_L1B_GEO*.h5 && echo \"Successful run\""
	docker exec $$(cat docker_run.id) bask --login -c "rm -fr /root/end-to-end-test /root/ecostress*"
	docker commit $$(cat docker_run.id) ecostress/ecostress-level1:$(ECOSTRESS_IMAGE_VERSION)
	docker container stop $$(cat docker_run.id)


# To record the exact version of packages we install for python, we
# capture these as RPMs. That way we can install the same set of packages
# each time in an image. Not sure that recording this as a package rather
# than just a docker image is worth the extra work, but it isn't a lot
# of work and for now at least we'll do this.
#
# Note if you run this interactivately to debug something, you can
# connect to the container with docker exec -it $(cat docker_run.id) bash
#
# I don't really understand the mounting permissions. It seems in some
# way that docker root goes to eco-docker. For now, just open up permissions
# and we sort this out. Should be better way
#
# We don't have this as a Dockerfile because we don't care about this image
# after we are done - we are just using the container to generate RPMs

create-ecostress-dependency-repo:
	mkdir -p ecostress-dependency-repo
	chmod a+w ecostress-dependency-repo
	cp $(srcdir)/docker/ecostress-dependency-repo/ecostress-python-package.spec ecostress-dependency-repo
	cp $(abs_srcdir)/thirdparty/$(TENSORFLOW_WHEEL) ecostress-dependency-repo
	docker run -t -d --cidfile=docker_run.id \
           --mount type=bind,src=$(abs_builddir)/ecostress-dependency-repo,dst=/media/ecostress-dependency-repo \
           ecostress/afids:$(AFIDS_FULL_VERSION) /bin/bash
	docker exec $$(cat docker_run.id) bash -c "yum install rpm-build createrepo gcc-gfortran gcc gcc-c++ -y"
	docker exec $$(cat docker_run.id) bash -c "export PATH=/opt/afids_support/bin:$${PATH} && export LD_LIBRARY_PATH=/opt/afids_support/lib:/opt/afids_support/lib64:$${LD_LIBRARY_PATH} && mkdir -p /root/rpmbuild/SOURCES && cp /media/ecostress-dependency-repo/$(TENSORFLOW_WHEEL) /root/rpmbuild/SOURCES && rpmbuild -ba /media/ecostress-dependency-repo/ecostress-python-package.spec && mv /root/rpmbuild/RPMS/x86_64/ecostress-python-package*.x86_64.rpm /media/ecostress-dependency-repo && cd /media/ecostress-dependency-repo && createrepo . && chmod a+w -R repodata"
	rm $(builddir)/ecostress-dependency-repo/$(TENSORFLOW_WHEEL)
	cp -fr $(builddir)/ecostress-dependency-repo/* $(srcdir)/docker/ecostress-dependency-repo
	docker container stop $$(cat docker_run.id)

EXTRA_DIST+= docker/README
EXTRA_DIST+= docker/BuildDocker_directions.txt
EXTRA_DIST+= docker/afids-docker/Dockerfile
EXTRA_DIST+= docker/ecostress-dependency-repo/ecostress-dependency.repo
EXTRA_DIST+= docker/ecostress-dependency-repo/ecostress-python-package.spec
# Leave out repodata and package because of the size. We can reevaluate that
# if needed
# EXTRA_DIST+= docker/ecostress-dependency-repo/ecostress-python-package-1.0-1.el7.x86_64.rpm
# EXTRA_DIST+= docker/ecostress-dependency-repo/repodata
EXTRA_DIST+= docker/ecostress-dependency-docker/Dockerfile
