procedure help=*
parm key type=(string,9) default="tst"
parm inp type=(string,99)
parm dted type=(string,99)
parm out1 type=(string,99) default=""
parm out2 type=(string,99)
parm dout1 type=(string,99) default=""
parm ref type=(string,99) default=""
parm ang_e type=real valid=(-90.0:90.0) default=0.0
parm ang_n type=real valid=(-90.0:90.0) default=0.0
parm rot type=real valid=(-90.0:90.0) default=0.0
parm shift_e type=real valid=(-1.0:1.0) default=0.0
parm shift_n type=real valid=(-1.0:1.0) default=0.0
parm dang_e type=real valid=(-90.0:90.0) default=0.0
parm dang_n type=real valid=(-90.0:90.0) default=0.0
parm drot type=real valid=(-90.0:90.0) default=0.0
parm dshift_e type=real valid=(-1.0:1.0) default=0.0
parm dshift_n type=real valid=(-1.0:1.0) default=0.0
parm satelv type=real default=770.0

local satdist real
local grid0 type=(string,40)
local cube0 type=(string,40)
local cube1 type=(string,40)
local xxrpc type=(string,40)
local xxrpc2 type=(string,40)
local tmp type=(string,40)
local refname type=(string,99)
local inpcopy type=(string,99)
local nl int
local ns int
local degrad real
local tsign real
local rpctype type=(string,2)
local cetag type=(string,7)
local avelv real
local dlon real
local dlat real
local tout1 type=(string,99)
local sdang_e real
local sdang_n real
local sdrot real
local sdshift_e real
local sdshift_n real
local gc1 real
local gc2 real
local gc3 real
local gc4 real
local gcb1 real
local gcb2 real
local gcdel real
local gcdnum real
local gcsat real
local erad real
refgbl $echo
body
let $echo="yes"

write "rpcslant version June 27 2014"

! rpc on inp data set not trusted, convert corners to ortho rpc

let inpcopy = "xxx" // "&key" // "inpcopy"
gtcopy &inp &inpcopy
label-list &inp
gt2rpc &inpcopy
label-list &inpcopy

!  rpcslant HANDYPROC

let grid0 = "xxx" // "&key" // "grid0"
let cube0 = "xxx" // "&key" // "cube0"
let cube1 = "xxx" // "&key" // "cube1"
let xxrpc = "xxx" // "&key" // "xxrpc"
let xxrpc2 = "xxx" // "&key" // "xxrpc2"
let tmp = "xxx" // "&key" // "tmp"
if (ref="")
   let refname = "xxx" // "&key" // "ref"
   gtcopy &inpcopy &refname
else
   let refname = "&ref"
end-if
let degrad = 3.1415926536/180.0
let erad = 6378137.0
let sdang_e = ang_e+dang_e
let sdang_n = ang_n+dang_n
let sdrot = rot+drot
let sdshift_e = shift_e+dshift_e
let sdshift_n = shift_n+dshift_n
if ("&out1"<>"" and "&dout1"<>"")
   write "cannot use both out1 and dout1 parameters"
   got theend
end-if 
if ("&out1"<>"" and (dang_e<>0.0 or dang_n<>0.0 or drot<>0.0 or dshift_e<>0.0 or dshift_n<>0.0))
   write "cannot use d parameters if using out1"
   got theend
end-if
if ("&out1"<>"")
   let tout1 = "&out1"
else
   let tout1 = "&dout1"
end-if

! test input OK

   !rpcwarp (&inpcopy,&dted) out=&out1 ref=&refname 'coverref
   !xvd (&refname,&out1,&out1)
 
! end of test


gtwarp inp=&dted out=&tmp ref=&inpcopy 'coverref
hist &tmp mean=avelv
write "avelv &avelv"
let avelv = avelv+20
label-replace inp=&inpcopy property="GEOTIFF" +
   items="RPC_FIELD8='&avelv',RPC_FIELD13='20.0'"

plab2tcl &inpcopy property=Geotiff val=cetag keyword=NITF_CETAG vtype=0
if (cetag="RPC00B")
   let rpctype = "B"
else-if (cetag="RPC00A")
   let rpctype = "A"
else
   write "MSG: NO CETAG ON THE LOGGED IMAGE"
   goto theend
end-if

lab2tcl &inpcopy v1=nl v2=ns keyword=(nl,ns) 'system

! generate two copies of a  cube

gengrid out=&grid0 ncol=23 nah=6 nav=6 hbase=1.0 hsize=&ns +
           vbase=1.0 vsize=&nl
pixmap (&grid0,&inpcopy) mapcols=(4,5) pixcols=(1,2) 'pixtomap

write "ang_e &ang_e"
mf3 &grid0 f="c16=@tan((&ang_e)*(&degrad))"
mf3 &grid0 f="c17=@tan((&ang_n)*(&degrad))"
mf3 &grid0 f="c18=@max(@abs(@atan2(@sqrt(c16*c16+c17*c17),1)),0.0001)"
mf3 &grid0 f="c19=@cos(c18)"
mf3 &grid0 f="c20=((&erad)+1000.0*&satelv)/@sin(&degrad*180.0-c18)"
mf3 &grid0 f="c21=@asin((&erad)/c20)"
mf3 &grid0 f="c22=c18-c21$c23=@sin(c22)*c20"
ibis-l &grid0 cols=(16,17,18,19) sr=1 nr=1 cfor="%17.14f %17.14f %17.14f %17.14f"
ibis-l &grid0 cols=(20,21,22,23) sr=1 nr=1 cfor="%17.14f %17.14f %17.14f %17.14f"
ibis2tcl &grid0 v1=satdist vartype=(-1) ibisloc=(1,23)
write "satelv &satelv satdist &satdist"

mf3 &grid0 f="c20=c4$@avg(c20)$c21=c5$@avg(c21)"
mf3 &grid0 f="c3=&avelv-20$c22=1.0-10.0/(&satdist*1000)"
ibis-copy &grid0 &cube0
mf3 &grid0 f="c3=c3+10.0"
mf3 &grid0 f="c4=(c4-c20)*c22+c20$c5=(c5-c21)*c22+c21"
icat (&cube0,&grid0) &cube1
mf3 &grid0 f="c3=c3+10.0"
mf3 &grid0 f="c4=(c4-c20)*c22+c20$c5=(c5-c21)*c22+c21"
icat (&cube1,&grid0) &cube0
mf3 &grid0 f="c3=c3+10.0"
mf3 &grid0 f="c4=(c4-c20)*c22+c20$c5=(c5-c21)*c22+c21"
icat (&cube0,&grid0) &cube1
mf3 &grid0 f="c3=c3+10.0"
mf3 &grid0 f="c4=(c4-c20)*c22+c20$c5=(c5-c21)*c22+c21"
icat (&cube1,&grid0) &cube0
ibis-copy &cube0 &cube1

!goto elvcheck
write "satdist &satdist"
ibis-l &cube0 nr=2
ibis-l &cube0 nr=245 sr=1 nr=1 cols=(22) cfor="%20.14f"
ibis2tcl &cube0 v1=gc1 v2=gc2 v3 = gc3 v4 = gc4 +
   vartype=(-1,-1,-1,-1) +
   ibisloc=(1,4,7,4,197,4,203,4)
let gcb1 = gc2-gc1
let gcb2 = gc4-gc3
let gcdel = gcb1-gcb2
let gcdnum = gcb1/gcdel
let gcsat = gcdnum*40.0

write "gc1 &gc1 gc2 &gc2 gc3 &gc3 gc4 &gc4"
write "gcb1 &gcb1 gcb2 &gcb2 gcdel &gcdel"
write "gcdnum &gcdnum"
write "gcsat &gcsat"

! frustum method in col 22 is a rough approximation for simulation purposes
elvcheck>


! then slant to desired angle and also opposite

mf3 &cube0 f="c9=(c3-&avelv)*@tan((&sdang_e)*(&degrad))"
mf3 &cube0 f="c6=c4+0.01$c7=c5"
mf3 &cube0 f="@dist(c4,c5,c6,c7,c8)"
mf3 &cube0 f="c10=c8"
mf3 &cube0 f="c6=c4$c4=c4+0.01*c9/c10"

mf3 &cube0 f="c9=(c3-&avelv)*@tan((&sdang_n)*(&degrad))"
mf3 &cube0 f="c6=c4$c7=c5+0.01"
mf3 &cube0 f="@dist(c4,c5,c6,c7,c8)"
mf3 &cube0 f="c11=c8"
mf3 &cube0 f="c7=c5$c5=c5+0.01*c9/c11"

ibis-l &cube0 cols=(1,2,3,4,5,6,7) +
   csiz=(10,10,10,10,10,10,10) nr=50 +
   cfor=" %10.5f %10.5f %10.5f %10.5f %10.5f %10.4f %10.5f"

! now do rotate about center of each layer

mf3 &cube0 f="c12=c4$@csum(c12,c3)$c12=c12/49"
mf3 &cube0 f="c13=c5$@csum(c13,c3)$c13=c13/49"
mf3 &cube0 f="@dist(c4,c5,c12,c5,c14)"
mf3 &cube0 f="c14=c14*(c4>=c12)-c14*(c4<c12)"
mf3 &cube0 f="@dist(c4,c5,c4,c13,c15)"
mf3 &cube0 f="c15=c15*(c5>=c13)-c15*(c5<c13)"
mf3 &cube0 f="c16=@sqrt(c14*c14+c15*c15)"
mf3 &cube0 f="c17=@atan2(c15,c14)-(&sdrot)*(&degrad)"
mf3 &cube0 f="c18=c16*@cos(c17)"
mf3 &cube0 f="c19=c16*@sin(c17)"
mf3 &cube0 f="c20=0.01*c18/c10"
mf3 &cube0 f="c21=0.01*c19/c11"
mf3 &cube0 f="c6=c4$c7=c5"
mf3 &cube0 f="c4=c12+c20$c5=c13+c21"

ibis-l &cube0 cols=(1,2,3,4,5,6,7) +
   csiz=(10,10,10,10,10,10,10)  +
   cfor=" %10.5f %10.5f %10.5f %10.5f %10.5f %10.4f %10.5f"

ibis-l &cube0 cols=(11,12,13,14,15,16,17) +
   csiz=(10,10,10,10,10,10,10) nr=50 +
   cfor=" %10.5f %10.5f %10.5f %10.5f %10.5f %10.4f %10.5f"

ibis-l &cube0 cols=(10,18,19,20,21,4,5) +
   csiz=(10,10,10,10,10,10,10) nr=50 +
   cfor=" %10.5f %10.5f %10.5f %10.5f %10.5f %10.4f %10.5f"

! opposite (almost) see notes

mf3 &cube1 f="c9=-(c3-&avelv)*@tan((&ang_e)*(&degrad))"
mf3 &cube1 f="c6=c4+0.01$c7=c5"
mf3 &cube1 f="@dist(c4,c5,c6,c7,c8)"
mf3 &cube1 f="c10=c8"
mf3 &cube1 f="c6=c4$c4=c4+0.01*c9/c10"

mf3 &cube1 f="c9=-(c3-&avelv)*@tan((&ang_n)*(&degrad))"
mf3 &cube1 f="c6=c4$c7=c5+0.01"
mf3 &cube1 f="@dist(c4,c5,c6,c7,c8)"
mf3 &cube1 f="c11=c8"
mf3 &cube1 f="c7=c5$c5=c5+0.01*c9/c11"

mf3 &cube1 f="c12=c4$@csum(c12,c3)$c12=c12/49"
mf3 &cube1 f="c13=c5$@csum(c13,c3)$c13=c13/49"
mf3 &cube1 f="@dist(c4,c5,c12,c5,c14)"
mf3 &cube1 f="c14=c14*(c4>=c12)-c14*(c4<c12)"
mf3 &cube1 f="@dist(c4,c5,c4,c13,c15)"
mf3 &cube1 f="c15=c15*(c5>=c13)-c15*(c5<c13)"
mf3 &cube1 f="c16=@sqrt(c14*c14+c15*c15)"
mf3 &cube1 f="c17=@atan2(c15,c14)+(&rot)*(&degrad)"
mf3 &cube1 f="c18=c16*@cos(c17)"
mf3 &cube1 f="c19=c16*@sin(c17)"
mf3 &cube1 f="c20=0.01*c18/c10"
mf3 &cube1 f="c21=0.01*c19/c11"
mf3 &cube1 f="c6=c4$c7=c5"
mf3 &cube1 f="c4=c12+c20$c5=c13+c21"

ibis-l &cube0 nr=8 cols=(1,2,3,4,5) +
      cfor="%8.2f %8.2f %8.2f %16.12f %16.12f"
ibis-l &cube0 nr=9 sr=196 cols=(1,2,3,4,5) +
      cfor="%8.2f %8.2f %8.2f %16.12f %16.12f"

!goto elvcheck2
ibis2tcl &cube0 v1=gc1 v2=gc2 v3 = gc3 v4 = gc4 +
   vartype=(-1,-1,-1,-1) +
   ibisloc=(1,4,7,4,197,4,203,4)
let gcb1 = gc2-gc1
let gcb2 = gc4-gc3
let gcdel = gcb1-gcb2
let gcdnum = gcb1/gcdel
let gcsat = gcdnum*40.0

write "gc1 &gc1 gc2 &gc2 gc3 &gc3 gc4 &gc4"
write "gcb1 &gcb1 gcb2 &gcb2 gcdel &gcdel"
write "gcdnum &gcdnum"
write "gcsat &gcsat"
! height adjusted for angle a little crude
elvcheck2>


! unload the rpc to ibis rpc file &xxrpc

ibis-gen &xxrpc nr=80 nc=10 deffmt=DOUB
rpc2ibis (&inpcopy,&xxrpc) cols=(1,2)
ibis-l &xxrpc cols=(1,2,3,4) cfor="%9.6f %9.6f %9.6f %9.6f"
rpcscale (&xxrpc,&cube0) rpccol=2 cols=(4,5,3,1,2) 'scale
ibis-l &xxrpc cols=(1,2,3,4) cfor="%9.6f %9.6f %9.6f %9.6f"
label-list &inpcopy
ibis-l &cube0 cols=(1,2,3,4,5) +
   csiz=(10,10,10,10,10)  +
   cfor=" %10.5f %10.5f %10.5f %10.5f %10.5f"

! solve for rpc's

ibislsqf (&cube0,&xxrpc) func=RPCN20  datacol=(4,5,3) depcol=1 +
    rescol=10 solcol=(1,3) rpctype=&rpctype rpcls=L
ibis-l &xxrpc cols=(1,2,3,4) cfor="%9.6f %9.6f %9.6f %9.6f"
ibisnlsq (&cube0,&xxrpc) func=RPCD19  datacol=(4,5,3) depcol=1 +
    rescol=10 solcol=(3,4) rpctype=&rpctype rpcls=L
ibis-l &xxrpc cols=(1,2,3,4) cfor="%9.6f %9.6f %9.6f %9.6f"

ibislsqf (&cube0,&xxrpc) func=RPCN20  datacol=(4,5,3) depcol=2 +
    rescol=11 solcol=(4,5) rpctype=&rpctype rpcls=S
ibisnlsq (&cube0,&xxrpc) func=RPCD19  datacol=(4,5,3) depcol=2 +
    rescol=11 solcol=(5,6) rpctype=&rpctype rpcls=S
ibis-l &xxrpc cols=(1,4,5,6) cfor="%9.6f %9.6f %9.6f %9.6f"

mf3 &xxrpc f="c10=c6"

! put rpc from cube0 to image

!!!rpcfix21 &xxrpc col=10
gtcopy &inpcopy &tmp
ibis2rpc &xxrpc &xxrpc2 ccol=10 scol=2
write "compare labels for tmp &tmp"
label-list &xxrpc2
label-list &tmp
gtgenup (&tmp,&xxrpc2)
label-list &tmp

! add shift to tmp

plab2tcl &tmp property=Geotiff val=dlat keyword=RPC_FIELD6 vtype=7
plab2tcl &tmp property=Geotiff val=dlon keyword=RPC_FIELD7 vtype=7
let dlat = dlat+sdshift_n
let dlon = dlon+sdshift_e
write "dlat &dlat dlon &dlon"
gtgenup &tmp geotiff="RPC_FIELD6=&dlat"
gtgenup &tmp geotiff="RPC_FIELD7=&dlon"
label-list &tmp

! warp the image

write "refnameq &refname"
rpcwarp (&tmp,&dted) out=&tout1 ref=&refname 'coverref
gtwarp &inpcopy &out2 ref=&refname 'coverref




! put the second rpc to image, an rpcwarp will produce the original geometry

! unload the rpc to ibis rpc file &xxrpc

ibis-gen &xxrpc nr=80 nc=10 deffmt=DOUB
rpc2ibis (&inpcopy,&xxrpc) cols=(1,2)
rpcscale (&xxrpc,&cube1) rpccol=2 cols=(4,5,3,1,2) 'scale
ibis-l &xxrpc

! solve for rpc's

ibislsqf (&cube1,&xxrpc) func=RPCN20  datacol=(4,5,3) depcol=1 +
    rescol=10 solcol=(1,3) rpctype=&rpctype rpcls=L
ibisnlsq (&cube1,&xxrpc) func=RPCD19  datacol=(4,5,3) depcol=1 +
    rescol=10 solcol=(3,4) rpctype=&rpctype rpcls=L
ibis-l &xxrpc cols=(1,2,3,4) cfor="%9.6f %9.6f %9.6f %9.6f"

ibislsqf (&cube1,&xxrpc) func=RPCN20  datacol=(4,5,3) depcol=2 +
    rescol=11 solcol=(4,5) rpctype=&rpctype rpcls=S
ibisnlsq (&cube1,&xxrpc) func=RPCD19  datacol=(4,5,3) depcol=2 +
    rescol=11 solcol=(5,6) rpctype=&rpctype rpcls=S
ibis-l &xxrpc cols=(1,4,5,6) cfor="%9.6f %9.6f %9.6f %9.6f"

mf3 &xxrpc f="c10=c6"

! put rpc from cube1 to image

!!!rpcfix21 &xxrpc col=10
ibis2rpc &xxrpc &xxrpc2 ccol=10 scol=2
gtgenup (&tout1,&xxrpc2)
plab2tcl &tout1 property=Geotiff val=dlat keyword=RPC_FIELD6 vtype=7
plab2tcl &tout1 property=Geotiff val=dlon keyword=RPC_FIELD7 vtype=7
let dlat = dlat-shift_n
let dlon = dlon-shift_e
write "dlat &dlat dlon &dlon"
gtgenup &tout1 geotiff="RPC_FIELD6=&dlat"
gtgenup &tout1 geotiff="RPC_FIELD7=&dlon"
label-list &tout1

theend>
end-proc
.TITLE
rpcslant - convert ortho image to perspective with rpc that matches the perspective
.HELP
PURPOSE

Also allows rotation.  A shift can also be performed.  The shift is in degrees just
like lon-lat.  It is applied after the slant perspective and the rotation.

The program also allows error values to be added to the perspective, rotation or
shift (useful for modeling of data sets containing error).  The created rpc will
model the non-error inputs but the image will be moved by the sum of the non-error
inputs and the error inputs.  The full parameter set then looks like:

       ang_e        dang_e
       ang_n        dang_n
       rot          drot
       shift_e      dshift_e
       shift_n      dshift_n

The user must choose between parameters out1 and dout1.  If out1 is chosen then the "d" parameters
must all be zero.  If dout1 is chosen then the errors will be in the image but not in the rpc so that a gtwarp of the image will not restore to the original but will still contain the errors.

The rpc that is supposed to match the slanted perspective is not quite right.
I think that this is an inverse problem... the pixel that has been moved 
according to a (phi,lambda,height) is being moved back with a slightly different (phi,lambda,height) in the inverse rpc.
     
     
CALL

      
  
OPERATION


PERFORMANCE


.PAGE

Restrictions
------------


.PAGE
Original Programmer: A. L. Zobrist, 29 May, 2013
Current Cognizant Programmer: A. L. Zobrist

 
.level1
.var key
used to make temp files unique
.var inp
input image with GeoTIFF label
.var dted
elevation file w GeoTIFF label
.var out1
output image with GeoTIFF label
and rpc
.var out2
copy of input image cut to size
of out1 so you can xvd them
.var dout1
output image with GeoTIFF label
and rpc, errors in image not rpc
.var ref
optional file to frame the outputs, defaults to the input frame
.var ang_e
angle to east in degrees
.var ang_n
angle to north in degrees
.var rot
rotation angle clockwise in degrees
.var shift_e
shift to east in degrees
.var shift_n
shift to north in degrees
.var dang_e
error in angle to east
in degrees
.var dang_n
error in angle to north
in degrees
.var drot
error in rotation angle
clockwise in degrees
.var dift_e
error in shift to east
in degrees
.var dshift_n
error in shift to north
in degrees
.var satelv
height of satellite orbit
in km
.END
