#! /usr/bin/env python
#
# This runs the L1B Rad process.

from geocal import *
from ecostress import *
import os
import re

version = "1.0"
usage='''Usage:
  l1b_rad_process [options] <run_config>
  l1b_rad_process -h | --help
  l1b_rad_process -v | --version

This runs the L1B Rad process.

Options:
  -h --help         
       Print this message

  -v --version      
       Print program version
'''

args = docopt_simple(usage, version=version)

# Can use this to wait a short time so we can attach strace to this
# process, useful to find all the files that we are accessing.
if(False):
    print("Waiting a short time")
    import time
    time.sleep(20)

# Explicitly list input file
config = RunConfig(args.run_config)

# Not sure where this will from eventually, but for now just hardcode
build_id = "0.30"
pge_version = "0.30"
build_version = "0100"

l1a_pix = os.path.abspath(config["InputFileGroup", "L1A_PIX"])
l1a_gain = os.path.abspath(config["InputFileGroup", "L1A_RAD_GAIN"])
l1_osp_dir = os.path.abspath(config["StaticAncillaryFileGroup", "L1_OSP_DIR"])
dirname = config["ProductPathGroup", "ProductPath"]
file_version = config["ProductPathGroup", "ProductCounter"]

cam = read_shelve(l1_osp_dir + "/camera.xml")
orb = create_orbit_raw(config)
dem = create_dem(config)
tt = create_time_table(l1a_pix, is_averaged=False)
sm = create_scan_mirror()
igc = EcostressImageGroundConnection(orb, tt, cam, sm, dem, None)

makedirs_p(dirname)
os.chdir(dirname)

orbit, scene, acquisition_time = orbit_from_metadata(l1a_pix)
ofile = ecostress_file_name("L1B_RAD", orbit, scene, acquisition_time,
                            build = build_version, version = file_version)

log_fname = os.path.splitext(ofile)[0] + ".log"
log = open(log_fname, "w")
try:
    # Generate output
    l1brad = L1bRadGenerate(igc, l1a_pix, l1a_gain, ofile, run_config = config,
                            log = log,
                            build_id=build_id, pge_version=pge_version)
    l1brad.run()
    # Write out a dummy log file
    print("This is a dummy log file", file = log)
    print("L1B_RAD_PGE:INFO-0-[Job Successful]", file=log)
    log.flush()
except:
    print("L1B_RAD_PGE:ERROR-2-[Unexpected Error]", file=log)
    log.flush()
    raise
    
