#! /usr/bin/env python
#
# This runs the L1B Rad process.

import geocal
import ecostress
import os
import re
import traceback

# Get version information, in the top directory
import sys
sys.path.append(os.path.dirname(os.path.abspath(sys.path[0])))
from ecostress_version import *

version = "1.0"
usage='''Usage:
  l1b_rad_process [options] <run_config>
  l1b_rad_process [options] <l1a_pix> <l1a_gain> <l1a_raw_att> <osp_dir> <prod_dir>
  l1b_rad_process -h | --help
  l1b_rad_process -v | --version

This runs the L1B Rad process.

Options:
  -h --help         
       Print this message

  --skip-band-to-band
       Option to skip band to band registration, useful for doing initial
       check out of band to band registration.

  -v --version      
       Print program version
'''

args = geocal.docopt_simple(usage, version=version)

# Can use this to wait a short time so we can attach strace to this
# process, useful to find all the files that we are accessing.
if(False):
    print("Waiting a short time")
    import time
    time.sleep(20)

# Explicitly list input file
if(args.run_config):
    config = ecostress.RunConfig(args.run_config)
    l1a_pix = os.path.abspath(config["InputFileGroup", "L1A_PIX"])
    l1a_gain = os.path.abspath(config["InputFileGroup", "L1A_RAD_GAIN"])
    l1_osp_dir = os.path.abspath(config["StaticAncillaryFileGroup", "L1_OSP_DIR"])
    dirname = config["ProductPathGroup", "ProductPath"]
    file_version = config["ProductPathGroup", "ProductCounter"]
    build_id = config["PrimaryExecutable", "BuildID"]
    orb = ecostress.create_orbit_raw(config)
    dem = ecostress.create_dem(config)
else:
    config = None
    l1a_pix = os.path.abspath(args.l1a_pix)
    l1a_gain = os.path.abspath(args.l1a_gain)
    l1_osp_dir = os.path.abspath(args.osp_dir)
    dirname = os.path.abspath(args.prod_dir)
    file_version = "01"
    orbfname = os.path.abspath(args.l1a_raw_att)
    orb = geocal.HdfOrbit_Eci_TimeJ2000(orbfname, "", "Ephemeris/time_j2000",
                                 "Ephemeris/eci_position",
                                 "Ephemeris/eci_velocity",
                                 "Attitude/time_j2000",
                                 "Attitude/quaternion")
    dem = geocal.SrtmDem(os.environ["ELEV_ROOT"],False,
                  geocal.DatumGeoid96(os.environ["AFIDS_VDEV_DATA"] +
                               "/EGM96_20_x100.HLF"))
    

sys.path.append(l1_osp_dir)
import l1b_rad_config
import l1b_geo_config

cam = geocal.read_shelve(l1_osp_dir + "/camera.xml")
tt = ecostress.create_time_table(l1a_pix, l1b_geo_config.mirror_rpm,
                                 l1b_geo_config.frame_time)
sm = ecostress.create_scan_mirror(l1a_pix, l1b_geo_config.max_encoder_value,
                                  l1b_geo_config.first_encoder_value_0,
                                  l1b_geo_config.second_encoder_value_0)
igc = ecostress.EcostressImageGroundConnection(orb, tt, cam, sm, dem, None)

geocal.makedirs_p(dirname)
os.chdir(dirname)

orbit, scene, acquisition_time = ecostress.orbit_from_metadata(l1a_pix)
ofile = ecostress.ecostress_file_name("L1B_RAD", orbit, scene, acquisition_time,
                            build = build_id,
                            version = file_version)

log_fname = os.path.splitext(ofile)[0] + ".log"
log = open(log_fname, "w")
try:
    # Generate output
    l1brad = ecostress.L1bRadGenerate(igc, l1a_pix, l1a_gain, ofile,l1_osp_dir,
              run_config = config,
              log = log,
              build_id = build_id,
              pge_version = pge_version["l1b_rad"],
              interpolate_stripe_data = l1b_rad_config.interpolate_stripe_data,
              seed = l1b_rad_config.seed,
              skip_band_to_band = args.skip_band_to_band)
    l1brad.run()
    print("L1B_RAD_PGE:INFO-0-[Job Successful]", file=log)
    log.flush()
except Exception as e:
    log = open(log_fname, "a")
    print("L1B_RAD_PGE: Exception thrown:",  file=log)
    traceback.print_exc(file=log)
    print("L1B_RAD_PGE:ERROR-2-[Unexpected Error]", file=log)
    log.flush()
    raise
except:
    print("L1B_RAD_PGE:ERROR-2-[Unexpected Error]", file=log)
    log.flush()
    raise
    
