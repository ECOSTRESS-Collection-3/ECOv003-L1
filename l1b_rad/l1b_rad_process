#! /usr/bin/env python
#
# This runs the L1B Rad process.

import geocal
import ecostress
import os
from loguru import logger

# Get version information, in the top directory
import sys

sys.path.append(os.path.dirname(os.path.abspath(sys.path[0])))
from ecostress_version import pge_version

version = "1.0"
usage = """Usage:
  l1b_rad_process [options] <run_config>
  l1b_rad_process [options] <l1a_pix> <l1a_gain> <l1a_raw_att> <osp_dir> <prod_dir>
  l1b_rad_process -h | --help
  l1b_rad_process -v | --version

This runs the L1B Rad process.

Options:
  -h --help         
       Print this message

  --skip-band-to-band
       Option to skip band to band registration, useful for doing initial
       check out of band to band registration.

  --verbose
       Print more information as we run to stderr.

  -v --version      
       Print program version
"""

args = geocal.docopt_simple(usage, version=version)

# Can use this to wait a short time so we can attach strace to this
# process, useful to find all the files that we are accessing.
if False:
    print("Waiting a short time")
    import time

    time.sleep(20)

if args.run_config:
    config = ecostress.RunConfig(args.run_config)
    l1_osp_dir = os.path.abspath(config["StaticAncillaryFileGroup", "L1_OSP_DIR"])
else:
    config = None
    l1_osp_dir = os.path.abspath(args.osp_dir)

sys.path.append(l1_osp_dir)
import l1b_rad_config
import l1b_geo_config

logger.remove()
if args.verbose:
    logger.add(sys.stderr, level="DEBUG")
else:
    logger.add(sys.stderr, level="INFO")

if hasattr(l1b_geo_config, "fix_l0_time_tag") and l1b_geo_config.fix_l0_time_tag:
    fix_l0_time_tag = True
else:
    fix_l0_time_tag = False

# Explicitly list input file
if args.run_config:
    l1a_pix = os.path.abspath(config["InputFileGroup", "L1A_PIX"])
    l1a_gain = os.path.abspath(config["InputFileGroup", "L1A_RAD_GAIN"])
    dirname = config["ProductPathGroup", "ProductPath"]
    file_version = config["ProductPathGroup", "ProductCounter"]
    build_id = config["PrimaryExecutable", "BuildID"]
    collection_label = config["ProductPathGroup", "CollectionLabel"]
    orb = ecostress.create_orbit_raw(
        config,
        pos_off=l1b_geo_config.x_offset_iss,
        extrapolation_pad=l1b_geo_config.extrapolation_pad,
        large_gap=l1b_geo_config.large_gap,
        fix_l0_time_tag=fix_l0_time_tag,
    )
    dem = ecostress.create_dem(config)
else:
    l1a_pix = os.path.abspath(args.l1a_pix)
    l1a_gain = os.path.abspath(args.l1a_gain)
    dirname = os.path.abspath(args.prod_dir)
    file_version = "01"
    orbfname = os.path.abspath(args.l1a_raw_att)
    if fix_l0_time_tag:
        orb = ecostress.EcostressOrbitL0Fix(
            orbfname,
            l1b_geo_config.x_offset_iss,
            l1b_geo_config.extrapolation_pad,
            l1b_geo_config.large_gap,
        )
    else:
        orb = ecostress.EcostressOrbit(
            orbfname,
            l1b_geo_config.x_offset_iss,
            l1b_geo_config.extrapolation_pad,
            l1b_geo_config.large_gap,
        )
    dem = geocal.SrtmDem(
        os.environ["ELEV_ROOT"],
        False,
        geocal.DatumGeoid96(os.environ["AFIDS_VDEV_DATA"] + "/EGM96_20_x100.HLF"),
    )


cam = geocal.read_shelve(l1_osp_dir + "/camera.xml")
# Update focal length. We may put this into the camera.xml file, but for now
# we track this separately.
cam.focal_length = l1b_geo_config.camera_focal_length

tt = ecostress.create_time_table(
    l1a_pix, l1b_geo_config.mirror_rpm, l1b_geo_config.frame_time
)
sm = ecostress.create_scan_mirror(
    l1a_pix,
    l1b_geo_config.max_encoder_value,
    l1b_geo_config.first_encoder_value_0,
    l1b_geo_config.second_encoder_value_0,
    l1b_geo_config.instrument_to_sc_euler,
    l1b_geo_config.first_angle_per_encoder_value,
    l1b_geo_config.second_angle_per_encoder_value,
)
igc = ecostress.EcostressImageGroundConnection(orb, tt, cam, sm, dem, None)

geocal.makedirs_p(dirname)
os.chdir(dirname)

orbit, scene, acquisition_time = ecostress.orbit_from_metadata(l1a_pix)
ofile = ecostress.ecostress_file_name(
    "L1B_RAD",
    orbit,
    scene,
    acquisition_time,
    collection_label=collection_label,
    build=build_id,
    version=file_version,
)

logger.add(os.path.splitext(ofile)[0] + ".log", level="DEBUG")

# Determine if we should flip lines so data appears right side up.
line_order_flipped = False
if l1b_rad_config.flip_if_needed:
    t = tt.min_time
    if t < orb.min_time:
        t = orb.min_time
    line_order_flipped = orb.spacecraft_x_mostly_in_velocity_direction(t)
if line_order_flipped:
    logger.info(
        "Line order for each scan will be flipped so data appears 'right side' up"
    )
else:
    logger.info("Line order for each scan will not be flipped")

try:
    # Generate output
    with logger.catch(reraise=True):
        l1brad = ecostress.L1bRadGenerate(
            igc,
            l1a_pix,
            l1a_gain,
            ofile,
            l1_osp_dir,
            run_config=config,
            collection_label=collection_label,
            build_id=build_id,
            pge_version=pge_version["l1b_rad"],
            interpolate_stripe_data=l1b_rad_config.interpolate_stripe_data,
            seed=l1b_rad_config.seed,
            line_order_flipped=line_order_flipped,
            skip_band_to_band=args.skip_band_to_band,
            cal_correction=l1b_rad_config.gain_offset_correction(orbit),
            frac_to_do_interpolation=l1b_rad_config.frac_to_do_interpolation,
        )
        l1brad.run()
        logger.info("L1B_RAD_PGE:INFO-0-[Job Successful]")
except Exception:
    logger.info("L1B_RAD_PGE:ERROR-2-[Unexpected Error]")
    raise
except:
    logger.info("L1B_RAD_PGE:ERROR-2-[Unexpected Error]")
    raise
