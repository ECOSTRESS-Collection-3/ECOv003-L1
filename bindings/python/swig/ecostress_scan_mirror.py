# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ecostress_scan_mirror.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ecostress_scan_mirror')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ecostress_scan_mirror')
    _ecostress_scan_mirror = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ecostress_scan_mirror', [dirname(__file__)])
        except ImportError:
            import _ecostress_scan_mirror
            return _ecostress_scan_mirror
        try:
            _mod = imp.load_module('_ecostress_scan_mirror', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ecostress_scan_mirror = swig_import_helper()
    del swig_import_helper
else:
    import _ecostress_scan_mirror
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ecostress_scan_mirror.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _ecostress_scan_mirror.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _ecostress_scan_mirror.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
class EcostressScanMirror(geocal_swig.generic_object.GenericObject):
    """

    This is the ecostress can mirror.

    Note that we have independent values for encoder_value_at_0, one for
    each side of the scan mirror. We would expect this to be exactly 1/2
    the maximum encoder value, but for reasons not understood this doesn't
    appear to be the case.

    From Colin: You may recall we had an issue with the target being about
    5 pixels offset from the start of of an acquisition depending on which
    side of the mirror we were on. I then added a (configurable) 120
    encoder start offset on one side of the mirror which is pretty close
    to the gap you see in the data. We are not completely sure why we see
    this gap, I believe the expectation was we would have to do some
    calibration once in flight to make sure things line up.

    We'll allow each side of the mirror to have an independent EV_0. If we
    end up not having a gap, we can then just set the second EV_0 to first
    EV_0 + maximum encoder value / 2, but if there is an offset we can
    account for it.

    C++ includes: ecostress_scan_mirror.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Ecostress::EcostressScanMirror::EcostressScanMirror(const blitz::Array< int, 2 > &Encoder_value, int
        Max_encoder_value=1749248, int First_encoder_value_at_0=401443, int
        Second_encoder_value_at_0=1275903)
        Constructor, taking the encoder values. 
        """
        _ecostress_scan_mirror.EcostressScanMirror_swiginit(self, _ecostress_scan_mirror.new_EcostressScanMirror(*args))

    def scan_mirror_angle(self, *args):
        """

        GeoCal::AutoDerivative<double> Ecostress::EcostressScanMirror::scan_mirror_angle(int Scan_index, const GeoCal::AutoDerivative< double > &Ic_sample)
        const

        """
        return _ecostress_scan_mirror.EcostressScanMirror_scan_mirror_angle(self, *args)


    def rotation_quaternion(self, *args):
        """

        boost::math::quaternion<GeoCal::AutoDerivative<double> > Ecostress::EcostressScanMirror::rotation_quaternion(int Scan_index, const GeoCal::AutoDerivative< double > &Ic_sample)
        const

        """
        return _ecostress_scan_mirror.EcostressScanMirror_rotation_quaternion(self, *args)


    def angle_from_encoder_value(self, *args):
        """

        GeoCal::AutoDerivative<double> Ecostress::EcostressScanMirror::angle_from_encoder_value(const GeoCal::AutoDerivative< double > &Evalue) const

        """
        return _ecostress_scan_mirror.EcostressScanMirror_angle_from_encoder_value(self, *args)


    def angle_to_encoder_value(self, Angle_deg, Mirror_side):
        """

        int Ecostress::EcostressScanMirror::angle_to_encoder_value(double Angle_deg, int Mirror_side) const
        Calculate encoder value from angle and mirror side (0 or 1). 
        """
        return _ecostress_scan_mirror.EcostressScanMirror_angle_to_encoder_value(self, Angle_deg, Mirror_side)


    def encoder_value_interpolate(self, *args):
        """

        GeoCal::AutoDerivative<double> Ecostress::EcostressScanMirror::encoder_value_interpolate(int Scan_index, const GeoCal::AutoDerivative< double > Ic_sample)
        const

        """
        return _ecostress_scan_mirror.EcostressScanMirror_encoder_value_interpolate(self, *args)


    def _v_first_encoder_value_at_0(self):
        """

        int Ecostress::EcostressScanMirror::first_encoder_value_at_0() const
        Encoder value at 0 angle. This is for the first side of the mirror. 
        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_first_encoder_value_at_0(self)


    @property
    def first_encoder_value_at_0(self):
        return self._v_first_encoder_value_at_0()


    def _v_second_encoder_value_at_0(self):
        """

        int Ecostress::EcostressScanMirror::second_encoder_value_at_0() const
        Encoder value at 0 angle. This is for the second side of the mirror.

        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_second_encoder_value_at_0(self)


    @property
    def second_encoder_value_at_0(self):
        return self._v_second_encoder_value_at_0()


    def _v_angle_per_encoder_value(self):
        """

        double Ecostress::EcostressScanMirror::angle_per_encoder_value() const
        Angle that a single encoder value goes through, in degrees. 
        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_angle_per_encoder_value(self)


    @property
    def angle_per_encoder_value(self):
        return self._v_angle_per_encoder_value()


    def _v_number_sample(self):
        """

        int Ecostress::EcostressScanMirror::number_sample() const
        Number of samples in scan mirror. 
        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_number_sample(self)


    @property
    def number_sample(self):
        return self._v_number_sample()


    def _v_number_scan(self):
        """

        int Ecostress::EcostressScanMirror::number_scan() const
        Number of scans in scan mirror. 
        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_number_scan(self)


    @property
    def number_scan(self):
        return self._v_number_scan()


    def _v_encoder_value(self):
        """

        const blitz::Array<int, 2>& Ecostress::EcostressScanMirror::encoder_value() const
        Angle encoder values. 
        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_encoder_value(self)


    @property
    def encoder_value(self):
        return self._v_encoder_value()


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _ecostress_scan_mirror.delete_EcostressScanMirror
EcostressScanMirror.scan_mirror_angle = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror_scan_mirror_angle, None, EcostressScanMirror)
EcostressScanMirror.rotation_quaternion = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror_rotation_quaternion, None, EcostressScanMirror)
EcostressScanMirror.angle_from_encoder_value = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror_angle_from_encoder_value, None, EcostressScanMirror)
EcostressScanMirror.angle_to_encoder_value = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror_angle_to_encoder_value, None, EcostressScanMirror)
EcostressScanMirror.encoder_value_interpolate = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror_encoder_value_interpolate, None, EcostressScanMirror)
EcostressScanMirror._v_first_encoder_value_at_0 = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_first_encoder_value_at_0, None, EcostressScanMirror)
EcostressScanMirror._v_second_encoder_value_at_0 = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_second_encoder_value_at_0, None, EcostressScanMirror)
EcostressScanMirror._v_angle_per_encoder_value = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_angle_per_encoder_value, None, EcostressScanMirror)
EcostressScanMirror._v_number_sample = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_number_sample, None, EcostressScanMirror)
EcostressScanMirror._v_number_scan = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_number_scan, None, EcostressScanMirror)
EcostressScanMirror._v_encoder_value = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_encoder_value, None, EcostressScanMirror)
EcostressScanMirror.__str__ = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror___str__, None, EcostressScanMirror)
EcostressScanMirror_swigregister = _ecostress_scan_mirror.EcostressScanMirror_swigregister
EcostressScanMirror_swigregister(EcostressScanMirror)


__all__ = ["EcostressScanMirror"]



