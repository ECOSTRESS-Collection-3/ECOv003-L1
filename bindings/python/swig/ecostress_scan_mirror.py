# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _ecostress_scan_mirror

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _ecostress_scan_mirror.SWIG_PyInstanceMethod_New
_swig_new_static_method = _ecostress_scan_mirror.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _ecostress_scan_mirror.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ecostress_scan_mirror.delete_SwigPyIterator
    value = _swig_new_instance_method(_ecostress_scan_mirror.SwigPyIterator_value)
    incr = _swig_new_instance_method(_ecostress_scan_mirror.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_ecostress_scan_mirror.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_ecostress_scan_mirror.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_ecostress_scan_mirror.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_ecostress_scan_mirror.SwigPyIterator_copy)
    next = _swig_new_instance_method(_ecostress_scan_mirror.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_ecostress_scan_mirror.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_ecostress_scan_mirror.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_ecostress_scan_mirror.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_ecostress_scan_mirror.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_ecostress_scan_mirror.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_ecostress_scan_mirror.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_ecostress_scan_mirror.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_ecostress_scan_mirror.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_ecostress_scan_mirror.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ecostress_scan_mirror:
_ecostress_scan_mirror.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _ecostress_scan_mirror.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.observer
import geocal_swig.generic_object
import geocal_swig.with_parameter
class ObservableEcostressScanMirror(geocal_swig.generic_object.GenericObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ecostress_scan_mirror.delete_ObservableEcostressScanMirror
    add_observer_and_keep_reference = _swig_new_instance_method(_ecostress_scan_mirror.ObservableEcostressScanMirror_add_observer_and_keep_reference)
    add_observer = _swig_new_instance_method(_ecostress_scan_mirror.ObservableEcostressScanMirror_add_observer)
    remove_observer = _swig_new_instance_method(_ecostress_scan_mirror.ObservableEcostressScanMirror_remove_observer)

# Register ObservableEcostressScanMirror in _ecostress_scan_mirror:
_ecostress_scan_mirror.ObservableEcostressScanMirror_swigregister(ObservableEcostressScanMirror)
class ObserverEcostressScanMirror(geocal_swig.generic_object.GenericObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ecostress_scan_mirror.ObserverEcostressScanMirror_swiginit(self, _ecostress_scan_mirror.new_ObserverEcostressScanMirror())
    __swig_destroy__ = _ecostress_scan_mirror.delete_ObserverEcostressScanMirror
    notify_update = _swig_new_instance_method(_ecostress_scan_mirror.ObserverEcostressScanMirror_notify_update)
    notify_add = _swig_new_instance_method(_ecostress_scan_mirror.ObserverEcostressScanMirror_notify_add)
    notify_remove = _swig_new_instance_method(_ecostress_scan_mirror.ObserverEcostressScanMirror_notify_remove)

# Register ObserverEcostressScanMirror in _ecostress_scan_mirror:
_ecostress_scan_mirror.ObserverEcostressScanMirror_swigregister(ObserverEcostressScanMirror)
class EcostressScanMirror(ObservableEcostressScanMirror, geocal_swig.with_parameter.WithParameter):
    r"""

    This is the ecostress scan mirror.

    Because it is a convenient place, we also include the ecostress
    instrument to spacecraft coordinate transformation (i.e., the
    alignment of the instrument with the ISS which is nominally an
    identity transformation).

    Note that we have independent values for encoder_value_at_0, one for
    each side of the scan mirror. We would expect this to be exactly 1/2
    the maximum encoder value, but for reasons not understood this doesn't
    appear to be the case.

    From Colin: You may recall we had an issue with the target being about
    5 pixels offset from the start of of an acquisition depending on which
    side of the mirror we were on. I then added a (configurable) 120
    encoder start offset on one side of the mirror which is pretty close
    to the gap you see in the data. We are not completely sure why we see
    this gap, I believe the expectation was we would have to do some
    calibration once in flight to make sure things line up.

    We'll allow each side of the mirror to have an independent EV_0. If we
    end up not having a gap, we can then just set the second EV_0 to first
    EV_0 + maximum encoder value / 2, but if there is an offset we can
    account for it.

    C++ includes: ecostress_scan_mirror.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        EcostressScanMirror::EcostressScanMirror(double Scan_start=-26.488105667851173, double
        Scan_end=26.488105667851173, int Number_sample=5400, int
        Number_scan=44, int Max_encoder_value=1749248, double
        First_encoder_value_at_0=401443, double
        Second_encoder_value_at_0=1275903, double Epsilon=0, double Beta=0,
        double Delta=0, double First_angle_per_ev=360.0/1749248 *2, double
        Second_angle_per_ev=360.0/1749248 *2)
        Ecostress::EcostressScanMirror::EcostressScanMirror
        Constructor.
        The scan angles are in degrees (seems more convenient than the normal
        radians we use for angles).

        This uses the data to generate encoder values, useful for simulations.

        Note that the default values here match the test data found in
        ecostress-test-data 
        """
        _ecostress_scan_mirror.EcostressScanMirror_swiginit(self, _ecostress_scan_mirror.new_EcostressScanMirror(*args))
    scan_mirror_angle = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror_scan_mirror_angle)
    rotation_quaternion = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror_rotation_quaternion)
    angle_from_encoder_value = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror_angle_from_encoder_value)
    angle_to_encoder_value = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror_angle_to_encoder_value)
    encoder_value_interpolate = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror_encoder_value_interpolate)
    _v_instrument_to_sc = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror__v_instrument_to_sc)

    @property
    def instrument_to_sc(self):
        return self._v_instrument_to_sc()

    @instrument_to_sc.setter
    def instrument_to_sc(self, value):
      self._v_instrument_to_sc(value)

    _v_instrument_to_sc_with_derivative = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror__v_instrument_to_sc_with_derivative)

    @property
    def instrument_to_sc_with_derivative(self):
        return self._v_instrument_to_sc_with_derivative()

    @instrument_to_sc_with_derivative.setter
    def instrument_to_sc_with_derivative(self, value):
      self._v_instrument_to_sc_with_derivative(value)

    _v_euler = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror__v_euler)

    @property
    def euler(self):
        return self._v_euler()

    @euler.setter
    def euler(self, value):
      self._v_euler(value)

    _v_euler_with_derivative = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror__v_euler_with_derivative)

    @property
    def euler_with_derivative(self):
        return self._v_euler_with_derivative()

    @euler_with_derivative.setter
    def euler_with_derivative(self, value):
      self._v_euler_with_derivative(value)

    _v_fit_epsilon = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror__v_fit_epsilon)

    @property
    def fit_epsilon(self):
        return self._v_fit_epsilon()

    @fit_epsilon.setter
    def fit_epsilon(self, value):
      self._v_fit_epsilon(value)

    _v_fit_beta = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror__v_fit_beta)

    @property
    def fit_beta(self):
        return self._v_fit_beta()

    @fit_beta.setter
    def fit_beta(self, value):
      self._v_fit_beta(value)

    _v_fit_delta = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror__v_fit_delta)

    @property
    def fit_delta(self):
        return self._v_fit_delta()

    @fit_delta.setter
    def fit_delta(self, value):
      self._v_fit_delta(value)

    _v_fit_first_encoder_value_at_0 = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror__v_fit_first_encoder_value_at_0)

    @property
    def fit_first_encoder_value_at_0(self):
        return self._v_fit_first_encoder_value_at_0()

    @fit_first_encoder_value_at_0.setter
    def fit_first_encoder_value_at_0(self, value):
      self._v_fit_first_encoder_value_at_0(value)

    _v_fit_second_encoder_value_at_0 = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror__v_fit_second_encoder_value_at_0)

    @property
    def fit_second_encoder_value_at_0(self):
        return self._v_fit_second_encoder_value_at_0()

    @fit_second_encoder_value_at_0.setter
    def fit_second_encoder_value_at_0(self, value):
      self._v_fit_second_encoder_value_at_0(value)

    _v_fit_first_angle_per_encoder_value = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror__v_fit_first_angle_per_encoder_value)

    @property
    def fit_first_angle_per_encoder_value(self):
        return self._v_fit_first_angle_per_encoder_value()

    @fit_first_angle_per_encoder_value.setter
    def fit_first_angle_per_encoder_value(self, value):
      self._v_fit_first_angle_per_encoder_value(value)

    _v_fit_second_angle_per_encoder_value = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror__v_fit_second_angle_per_encoder_value)

    @property
    def fit_second_angle_per_encoder_value(self):
        return self._v_fit_second_angle_per_encoder_value()

    @fit_second_angle_per_encoder_value.setter
    def fit_second_angle_per_encoder_value(self, value):
      self._v_fit_second_angle_per_encoder_value(value)

    _v_first_encoder_value_at_0 = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror__v_first_encoder_value_at_0)

    @property
    def first_encoder_value_at_0(self):
        return self._v_first_encoder_value_at_0()

    _v_first_encoder_value_at_0_with_derivative = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror__v_first_encoder_value_at_0_with_derivative)

    @property
    def first_encoder_value_at_0_with_derivative(self):
        return self._v_first_encoder_value_at_0_with_derivative()

    _v_second_encoder_value_at_0 = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror__v_second_encoder_value_at_0)

    @property
    def second_encoder_value_at_0(self):
        return self._v_second_encoder_value_at_0()

    _v_second_encoder_value_at_0_with_derivative = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror__v_second_encoder_value_at_0_with_derivative)

    @property
    def second_encoder_value_at_0_with_derivative(self):
        return self._v_second_encoder_value_at_0_with_derivative()

    _v_first_angle_per_encoder_value = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror__v_first_angle_per_encoder_value)

    @property
    def first_angle_per_encoder_value(self):
        return self._v_first_angle_per_encoder_value()

    _v_second_angle_per_encoder_value = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror__v_second_angle_per_encoder_value)

    @property
    def second_angle_per_encoder_value(self):
        return self._v_second_angle_per_encoder_value()

    _v_first_angle_per_encoder_value_with_derivative = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror__v_first_angle_per_encoder_value_with_derivative)

    @property
    def first_angle_per_encoder_value_with_derivative(self):
        return self._v_first_angle_per_encoder_value_with_derivative()

    _v_second_angle_per_encoder_value_with_derivative = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror__v_second_angle_per_encoder_value_with_derivative)

    @property
    def second_angle_per_encoder_value_with_derivative(self):
        return self._v_second_angle_per_encoder_value_with_derivative()

    _v_number_sample = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror__v_number_sample)

    @property
    def number_sample(self):
        return self._v_number_sample()

    _v_number_scan = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror__v_number_scan)

    @property
    def number_scan(self):
        return self._v_number_scan()

    _v_encoder_value = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror__v_encoder_value)

    @property
    def encoder_value(self):
        return self._v_encoder_value()

    __str__ = _swig_new_instance_method(_ecostress_scan_mirror.EcostressScanMirror___str__)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _ecostress_scan_mirror.delete_EcostressScanMirror

# Register EcostressScanMirror in _ecostress_scan_mirror:
_ecostress_scan_mirror.EcostressScanMirror_swigregister(EcostressScanMirror)

__all__ = ["EcostressScanMirror","ObserverEcostressScanMirror","ObservableEcostressScanMirror"]


