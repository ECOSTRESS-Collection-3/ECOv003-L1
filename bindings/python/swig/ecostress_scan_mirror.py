# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ecostress_scan_mirror.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ecostress_scan_mirror')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ecostress_scan_mirror')
    _ecostress_scan_mirror = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ecostress_scan_mirror', [dirname(__file__)])
        except ImportError:
            import _ecostress_scan_mirror
            return _ecostress_scan_mirror
        try:
            _mod = imp.load_module('_ecostress_scan_mirror', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ecostress_scan_mirror = swig_import_helper()
    del swig_import_helper
else:
    import _ecostress_scan_mirror
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ecostress_scan_mirror.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_ecostress_scan_mirror.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _ecostress_scan_mirror.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _ecostress_scan_mirror.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.observer
import geocal_swig.generic_object
import geocal_swig.with_parameter
class ObservableEcostressScanMirror(geocal_swig.generic_object.GenericObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ecostress_scan_mirror.delete_ObservableEcostressScanMirror
ObservableEcostressScanMirror.add_observer_and_keep_reference = new_instancemethod(_ecostress_scan_mirror.ObservableEcostressScanMirror_add_observer_and_keep_reference, None, ObservableEcostressScanMirror)
ObservableEcostressScanMirror.add_observer = new_instancemethod(_ecostress_scan_mirror.ObservableEcostressScanMirror_add_observer, None, ObservableEcostressScanMirror)
ObservableEcostressScanMirror.remove_observer = new_instancemethod(_ecostress_scan_mirror.ObservableEcostressScanMirror_remove_observer, None, ObservableEcostressScanMirror)
ObservableEcostressScanMirror_swigregister = _ecostress_scan_mirror.ObservableEcostressScanMirror_swigregister
ObservableEcostressScanMirror_swigregister(ObservableEcostressScanMirror)

class ObserverEcostressScanMirror(geocal_swig.generic_object.GenericObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _ecostress_scan_mirror.ObserverEcostressScanMirror_swiginit(self, _ecostress_scan_mirror.new_ObserverEcostressScanMirror())
    __swig_destroy__ = _ecostress_scan_mirror.delete_ObserverEcostressScanMirror
ObserverEcostressScanMirror.notify_update = new_instancemethod(_ecostress_scan_mirror.ObserverEcostressScanMirror_notify_update, None, ObserverEcostressScanMirror)
ObserverEcostressScanMirror.notify_add = new_instancemethod(_ecostress_scan_mirror.ObserverEcostressScanMirror_notify_add, None, ObserverEcostressScanMirror)
ObserverEcostressScanMirror.notify_remove = new_instancemethod(_ecostress_scan_mirror.ObserverEcostressScanMirror_notify_remove, None, ObserverEcostressScanMirror)
ObserverEcostressScanMirror_swigregister = _ecostress_scan_mirror.ObserverEcostressScanMirror_swigregister
ObserverEcostressScanMirror_swigregister(ObserverEcostressScanMirror)

class EcostressScanMirror(ObservableEcostressScanMirror, geocal_swig.with_parameter.WithParameter):
    """

    This is the ecostress scan mirror.

    Because it is a convenient place, we also include the ecostress
    instrument to spacecraft coordinate transformation (i.e., the
    alignment of the instrument with the ISS which is nominally an
    identity transformation).

    Note that we have independent values for encoder_value_at_0, one for
    each side of the scan mirror. We would expect this to be exactly 1/2
    the maximum encoder value, but for reasons not understood this doesn't
    appear to be the case.

    From Colin: You may recall we had an issue with the target being about
    5 pixels offset from the start of of an acquisition depending on which
    side of the mirror we were on. I then added a (configurable) 120
    encoder start offset on one side of the mirror which is pretty close
    to the gap you see in the data. We are not completely sure why we see
    this gap, I believe the expectation was we would have to do some
    calibration once in flight to make sure things line up.

    We'll allow each side of the mirror to have an independent EV_0. If we
    end up not having a gap, we can then just set the second EV_0 to first
    EV_0 + maximum encoder value / 2, but if there is an offset we can
    account for it.

    C++ includes: ecostress_scan_mirror.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        EcostressScanMirror::EcostressScanMirror(const blitz::Array< int, 2 > &Encoder_value, int
        Max_encoder_value=1749248, double First_encoder_value_at_0=401443,
        double Second_encoder_value_at_0=1275903, double Epsilon=0, double
        Beta=0, double Delta=0, double First_angle_per_ev=360.0/1749248 *2,
        double Second_angle_per_ev=360.0/1749248 *2, double Yaw=0, double
        Roll=0, double Pitch=0, double Yaw_2=0, double Roll_2=0, double
        Pitch_2=0)
        Constructor, taking the encoder values. We fill in bad data values. 
        """
        _ecostress_scan_mirror.EcostressScanMirror_swiginit(self, _ecostress_scan_mirror.new_EcostressScanMirror(*args))

    def scan_mirror_angle(self, *args):
        """

        GeoCal::AutoDerivative<double> Ecostress::EcostressScanMirror::scan_mirror_angle(int Scan_index, const GeoCal::AutoDerivative< double > &Ic_sample)
        const

        """
        return _ecostress_scan_mirror.EcostressScanMirror_scan_mirror_angle(self, *args)


    def rotation_quaternion(self, *args):
        """

        boost::math::quaternion<GeoCal::AutoDerivative<double> > Ecostress::EcostressScanMirror::rotation_quaternion(int Scan_index, const GeoCal::AutoDerivative< double > &Ic_sample)
        const

        """
        return _ecostress_scan_mirror.EcostressScanMirror_rotation_quaternion(self, *args)


    def camera_to_mirror_with_derivative(self, Scan_index):
        """

        boost::math::quaternion<GeoCal::AutoDerivative<double> > Ecostress::EcostressScanMirror::camera_to_mirror_with_derivative(int Scan_index) const
        Camera to mirror quaternion. 
        """
        return _ecostress_scan_mirror.EcostressScanMirror_camera_to_mirror_with_derivative(self, Scan_index)


    def camera_to_mirror(self, *args):
        """

        void Ecostress::EcostressScanMirror::camera_to_mirror(const boost::math::quaternion< GeoCal::AutoDerivative< double > >
        &cam_to_mirror_q, const boost::math::quaternion<
        GeoCal::AutoDerivative< double > > &cam_to_mirror_2_q)
        Set camera to mirror quaternion, for both sides of the mirror. 
        """
        return _ecostress_scan_mirror.EcostressScanMirror_camera_to_mirror(self, *args)


    def angle_from_encoder_value(self, *args):
        """

        GeoCal::AutoDerivative<double> Ecostress::EcostressScanMirror::angle_from_encoder_value(const GeoCal::AutoDerivative< double > &Evalue) const

        """
        return _ecostress_scan_mirror.EcostressScanMirror_angle_from_encoder_value(self, *args)


    def angle_to_encoder_value(self, Angle_deg, Mirror_side):
        """

        int Ecostress::EcostressScanMirror::angle_to_encoder_value(double Angle_deg, int Mirror_side) const
        Calculate encoder value from angle and mirror side (0 or 1). 
        """
        return _ecostress_scan_mirror.EcostressScanMirror_angle_to_encoder_value(self, Angle_deg, Mirror_side)


    def encoder_value_interpolate(self, *args):
        """

        GeoCal::AutoDerivative<double> Ecostress::EcostressScanMirror::encoder_value_interpolate(int Scan_index, const GeoCal::AutoDerivative< double > Ic_sample)
        const

        """
        return _ecostress_scan_mirror.EcostressScanMirror_encoder_value_interpolate(self, *args)


    def _v_instrument_to_sc(self, *args):
        """

        void Ecostress::EcostressScanMirror::instrument_to_sc(const boost::math::quaternion< double > &inst_to_sc_q)
        Set instrument to spacecraft quaternion. 
        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_instrument_to_sc(self, *args)


    @property
    def instrument_to_sc(self):
        return self._v_instrument_to_sc()

    @instrument_to_sc.setter
    def instrument_to_sc(self, value):
      self._v_instrument_to_sc(value)


    def _v_instrument_to_sc_with_derivative(self, *args):
        """

        void Ecostress::EcostressScanMirror::instrument_to_sc_with_derivative(const boost::math::quaternion< GeoCal::AutoDerivative< double > >
        &inst_to_sc_q)
        Set instrument to spacecraft quaternion. 
        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_instrument_to_sc_with_derivative(self, *args)


    @property
    def instrument_to_sc_with_derivative(self):
        return self._v_instrument_to_sc_with_derivative()

    @instrument_to_sc_with_derivative.setter
    def instrument_to_sc_with_derivative(self, value):
      self._v_instrument_to_sc_with_derivative(value)


    def _v_euler(self, *args):
        """

        void Ecostress::EcostressScanMirror::euler(const blitz::Array< double, 1 > &Euler)
        Update the instrument_to_sc using the given Euler angles epsilon,
        beta, data in radians. 
        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_euler(self, *args)


    @property
    def euler(self):
        return self._v_euler()

    @euler.setter
    def euler(self, value):
      self._v_euler(value)


    def _v_euler_with_derivative(self, *args):
        """

        void Ecostress::EcostressScanMirror::euler_with_derivative(const GeoCal::ArrayAd< double, 1 > &Euler)

        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_euler_with_derivative(self, *args)


    @property
    def euler_with_derivative(self):
        return self._v_euler_with_derivative()

    @euler_with_derivative.setter
    def euler_with_derivative(self, value):
      self._v_euler_with_derivative(value)


    def _v_mirror_ypr(self, *args):
        """

        void Ecostress::EcostressScanMirror::mirror_ypr(const blitz::Array< double, 1 > &Ypr)
        Update the camera_to_mirror_ using the given Yaw, Pitch, Roll for both
        sides of the mirror, in radians. 
        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_mirror_ypr(self, *args)


    @property
    def mirror_ypr(self):
        return self._v_mirror_ypr()

    @mirror_ypr.setter
    def mirror_ypr(self, value):
      self._v_mirror_ypr(value)


    def _v_mirror_ypr_with_derivative(self, *args):
        """

        void Ecostress::EcostressScanMirror::mirror_ypr_with_derivative(const GeoCal::ArrayAd< double, 1 > &Ypr)

        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_mirror_ypr_with_derivative(self, *args)


    @property
    def mirror_ypr_with_derivative(self):
        return self._v_mirror_ypr_with_derivative()

    @mirror_ypr_with_derivative.setter
    def mirror_ypr_with_derivative(self, value):
      self._v_mirror_ypr_with_derivative(value)


    def _v_fit_epsilon(self, *args):
        """

        void Ecostress::EcostressScanMirror::fit_epsilon(bool V)

        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_fit_epsilon(self, *args)


    @property
    def fit_epsilon(self):
        return self._v_fit_epsilon()

    @fit_epsilon.setter
    def fit_epsilon(self, value):
      self._v_fit_epsilon(value)


    def _v_fit_beta(self, *args):
        """

        void Ecostress::EcostressScanMirror::fit_beta(bool V)

        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_fit_beta(self, *args)


    @property
    def fit_beta(self):
        return self._v_fit_beta()

    @fit_beta.setter
    def fit_beta(self, value):
      self._v_fit_beta(value)


    def _v_fit_delta(self, *args):
        """

        void Ecostress::EcostressScanMirror::fit_delta(bool V)

        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_fit_delta(self, *args)


    @property
    def fit_delta(self):
        return self._v_fit_delta()

    @fit_delta.setter
    def fit_delta(self, value):
      self._v_fit_delta(value)


    def _v_fit_camera_to_mirror_yaw(self, *args):
        """

        void Ecostress::EcostressScanMirror::fit_camera_to_mirror_yaw(bool V)

        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_fit_camera_to_mirror_yaw(self, *args)


    @property
    def fit_camera_to_mirror_yaw(self):
        return self._v_fit_camera_to_mirror_yaw()

    @fit_camera_to_mirror_yaw.setter
    def fit_camera_to_mirror_yaw(self, value):
      self._v_fit_camera_to_mirror_yaw(value)


    def _v_fit_camera_to_mirror_pitch(self, *args):
        """

        void Ecostress::EcostressScanMirror::fit_camera_to_mirror_pitch(bool V)

        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_fit_camera_to_mirror_pitch(self, *args)


    @property
    def fit_camera_to_mirror_pitch(self):
        return self._v_fit_camera_to_mirror_pitch()

    @fit_camera_to_mirror_pitch.setter
    def fit_camera_to_mirror_pitch(self, value):
      self._v_fit_camera_to_mirror_pitch(value)


    def _v_fit_camera_to_mirror_roll(self, *args):
        """

        void Ecostress::EcostressScanMirror::fit_camera_to_mirror_roll(bool V)

        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_fit_camera_to_mirror_roll(self, *args)


    @property
    def fit_camera_to_mirror_roll(self):
        return self._v_fit_camera_to_mirror_roll()

    @fit_camera_to_mirror_roll.setter
    def fit_camera_to_mirror_roll(self, value):
      self._v_fit_camera_to_mirror_roll(value)


    def _v_fit_camera_to_mirror_2_yaw(self, *args):
        """

        void Ecostress::EcostressScanMirror::fit_camera_to_mirror_2_yaw(bool V)

        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_fit_camera_to_mirror_2_yaw(self, *args)


    @property
    def fit_camera_to_mirror_2_yaw(self):
        return self._v_fit_camera_to_mirror_2_yaw()

    @fit_camera_to_mirror_2_yaw.setter
    def fit_camera_to_mirror_2_yaw(self, value):
      self._v_fit_camera_to_mirror_2_yaw(value)


    def _v_fit_camera_to_mirror_2_pitch(self, *args):
        """

        void Ecostress::EcostressScanMirror::fit_camera_to_mirror_2_pitch(bool V)

        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_fit_camera_to_mirror_2_pitch(self, *args)


    @property
    def fit_camera_to_mirror_2_pitch(self):
        return self._v_fit_camera_to_mirror_2_pitch()

    @fit_camera_to_mirror_2_pitch.setter
    def fit_camera_to_mirror_2_pitch(self, value):
      self._v_fit_camera_to_mirror_2_pitch(value)


    def _v_fit_camera_to_mirror_2_roll(self, *args):
        """

        void Ecostress::EcostressScanMirror::fit_camera_to_mirror_2_roll(bool V)

        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_fit_camera_to_mirror_2_roll(self, *args)


    @property
    def fit_camera_to_mirror_2_roll(self):
        return self._v_fit_camera_to_mirror_2_roll()

    @fit_camera_to_mirror_2_roll.setter
    def fit_camera_to_mirror_2_roll(self, value):
      self._v_fit_camera_to_mirror_2_roll(value)


    def _v_fit_first_encoder_value_at_0(self, *args):
        """

        void Ecostress::EcostressScanMirror::fit_first_encoder_value_at_0(bool V)

        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_fit_first_encoder_value_at_0(self, *args)


    @property
    def fit_first_encoder_value_at_0(self):
        return self._v_fit_first_encoder_value_at_0()

    @fit_first_encoder_value_at_0.setter
    def fit_first_encoder_value_at_0(self, value):
      self._v_fit_first_encoder_value_at_0(value)


    def _v_fit_second_encoder_value_at_0(self, *args):
        """

        void Ecostress::EcostressScanMirror::fit_second_encoder_value_at_0(bool V)

        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_fit_second_encoder_value_at_0(self, *args)


    @property
    def fit_second_encoder_value_at_0(self):
        return self._v_fit_second_encoder_value_at_0()

    @fit_second_encoder_value_at_0.setter
    def fit_second_encoder_value_at_0(self, value):
      self._v_fit_second_encoder_value_at_0(value)


    def _v_fit_first_angle_per_encoder_value(self, *args):
        """

        void Ecostress::EcostressScanMirror::fit_first_angle_per_encoder_value(bool V)

        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_fit_first_angle_per_encoder_value(self, *args)


    @property
    def fit_first_angle_per_encoder_value(self):
        return self._v_fit_first_angle_per_encoder_value()

    @fit_first_angle_per_encoder_value.setter
    def fit_first_angle_per_encoder_value(self, value):
      self._v_fit_first_angle_per_encoder_value(value)


    def _v_fit_second_angle_per_encoder_value(self, *args):
        """

        void Ecostress::EcostressScanMirror::fit_second_angle_per_encoder_value(bool V)

        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_fit_second_angle_per_encoder_value(self, *args)


    @property
    def fit_second_angle_per_encoder_value(self):
        return self._v_fit_second_angle_per_encoder_value()

    @fit_second_angle_per_encoder_value.setter
    def fit_second_angle_per_encoder_value(self, value):
      self._v_fit_second_angle_per_encoder_value(value)


    def _v_first_encoder_value_at_0(self):
        """

        double Ecostress::EcostressScanMirror::first_encoder_value_at_0() const
        Encoder value at 0 angle. This is for the first side of the mirror. 
        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_first_encoder_value_at_0(self)


    @property
    def first_encoder_value_at_0(self):
        return self._v_first_encoder_value_at_0()


    def _v_first_encoder_value_at_0_with_derivative(self):
        """

        GeoCal::AutoDerivative<double> Ecostress::EcostressScanMirror::first_encoder_value_at_0_with_derivative() const

        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_first_encoder_value_at_0_with_derivative(self)


    @property
    def first_encoder_value_at_0_with_derivative(self):
        return self._v_first_encoder_value_at_0_with_derivative()


    def _v_second_encoder_value_at_0(self):
        """

        double Ecostress::EcostressScanMirror::second_encoder_value_at_0() const
        Encoder value at 0 angle. This is for the second side of the mirror.

        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_second_encoder_value_at_0(self)


    @property
    def second_encoder_value_at_0(self):
        return self._v_second_encoder_value_at_0()


    def _v_second_encoder_value_at_0_with_derivative(self):
        """

        GeoCal::AutoDerivative<double> Ecostress::EcostressScanMirror::second_encoder_value_at_0_with_derivative() const

        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_second_encoder_value_at_0_with_derivative(self)


    @property
    def second_encoder_value_at_0_with_derivative(self):
        return self._v_second_encoder_value_at_0_with_derivative()


    def _v_first_angle_per_encoder_value(self):
        """

        double Ecostress::EcostressScanMirror::first_angle_per_encoder_value() const
        Angle that a single encoder value goes through, in degrees. 
        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_first_angle_per_encoder_value(self)


    @property
    def first_angle_per_encoder_value(self):
        return self._v_first_angle_per_encoder_value()


    def _v_second_angle_per_encoder_value(self):
        """

        double Ecostress::EcostressScanMirror::second_angle_per_encoder_value() const

        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_second_angle_per_encoder_value(self)


    @property
    def second_angle_per_encoder_value(self):
        return self._v_second_angle_per_encoder_value()


    def _v_first_angle_per_encoder_value_with_derivative(self):
        """

        GeoCal::AutoDerivative<double> Ecostress::EcostressScanMirror::first_angle_per_encoder_value_with_derivative() const

        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_first_angle_per_encoder_value_with_derivative(self)


    @property
    def first_angle_per_encoder_value_with_derivative(self):
        return self._v_first_angle_per_encoder_value_with_derivative()


    def _v_second_angle_per_encoder_value_with_derivative(self):
        """

        GeoCal::AutoDerivative<double> Ecostress::EcostressScanMirror::second_angle_per_encoder_value_with_derivative() const

        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_second_angle_per_encoder_value_with_derivative(self)


    @property
    def second_angle_per_encoder_value_with_derivative(self):
        return self._v_second_angle_per_encoder_value_with_derivative()


    def _v_number_sample(self):
        """

        int Ecostress::EcostressScanMirror::number_sample() const
        Number of samples in scan mirror. 
        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_number_sample(self)


    @property
    def number_sample(self):
        return self._v_number_sample()


    def _v_number_scan(self):
        """

        int Ecostress::EcostressScanMirror::number_scan() const
        Number of scans in scan mirror. 
        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_number_scan(self)


    @property
    def number_scan(self):
        return self._v_number_scan()


    def _v_encoder_value(self):
        """

        const blitz::Array<int, 2>& Ecostress::EcostressScanMirror::encoder_value() const
        Angle encoder values. 
        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_encoder_value(self)


    @property
    def encoder_value(self):
        return self._v_encoder_value()


    def _v_max_encoder_value(self):
        """

        int Ecostress::EcostressScanMirror::max_encoder_value() const
        Maximum encoder value.

        Note that we go through 2 360 degree rotation because of the set up of
        the mirrors. 
        """
        return _ecostress_scan_mirror.EcostressScanMirror__v_max_encoder_value(self)


    @property
    def max_encoder_value(self):
        return self._v_max_encoder_value()


    def mirror_side(self, Scan_index):
        """

        int Ecostress::EcostressScanMirror::mirror_side(int Scan_index) const
        Return mirror side for given scan index (0 for first or 1 for second)

        """
        return _ecostress_scan_mirror.EcostressScanMirror_mirror_side(self, Scan_index)


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _ecostress_scan_mirror.delete_EcostressScanMirror
EcostressScanMirror.scan_mirror_angle = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror_scan_mirror_angle, None, EcostressScanMirror)
EcostressScanMirror.rotation_quaternion = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror_rotation_quaternion, None, EcostressScanMirror)
EcostressScanMirror.camera_to_mirror_with_derivative = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror_camera_to_mirror_with_derivative, None, EcostressScanMirror)
EcostressScanMirror.camera_to_mirror = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror_camera_to_mirror, None, EcostressScanMirror)
EcostressScanMirror.angle_from_encoder_value = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror_angle_from_encoder_value, None, EcostressScanMirror)
EcostressScanMirror.angle_to_encoder_value = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror_angle_to_encoder_value, None, EcostressScanMirror)
EcostressScanMirror.encoder_value_interpolate = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror_encoder_value_interpolate, None, EcostressScanMirror)
EcostressScanMirror._v_instrument_to_sc = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_instrument_to_sc, None, EcostressScanMirror)
EcostressScanMirror._v_instrument_to_sc_with_derivative = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_instrument_to_sc_with_derivative, None, EcostressScanMirror)
EcostressScanMirror._v_euler = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_euler, None, EcostressScanMirror)
EcostressScanMirror._v_euler_with_derivative = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_euler_with_derivative, None, EcostressScanMirror)
EcostressScanMirror._v_mirror_ypr = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_mirror_ypr, None, EcostressScanMirror)
EcostressScanMirror._v_mirror_ypr_with_derivative = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_mirror_ypr_with_derivative, None, EcostressScanMirror)
EcostressScanMirror._v_fit_epsilon = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_fit_epsilon, None, EcostressScanMirror)
EcostressScanMirror._v_fit_beta = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_fit_beta, None, EcostressScanMirror)
EcostressScanMirror._v_fit_delta = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_fit_delta, None, EcostressScanMirror)
EcostressScanMirror._v_fit_camera_to_mirror_yaw = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_fit_camera_to_mirror_yaw, None, EcostressScanMirror)
EcostressScanMirror._v_fit_camera_to_mirror_pitch = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_fit_camera_to_mirror_pitch, None, EcostressScanMirror)
EcostressScanMirror._v_fit_camera_to_mirror_roll = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_fit_camera_to_mirror_roll, None, EcostressScanMirror)
EcostressScanMirror._v_fit_camera_to_mirror_2_yaw = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_fit_camera_to_mirror_2_yaw, None, EcostressScanMirror)
EcostressScanMirror._v_fit_camera_to_mirror_2_pitch = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_fit_camera_to_mirror_2_pitch, None, EcostressScanMirror)
EcostressScanMirror._v_fit_camera_to_mirror_2_roll = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_fit_camera_to_mirror_2_roll, None, EcostressScanMirror)
EcostressScanMirror._v_fit_first_encoder_value_at_0 = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_fit_first_encoder_value_at_0, None, EcostressScanMirror)
EcostressScanMirror._v_fit_second_encoder_value_at_0 = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_fit_second_encoder_value_at_0, None, EcostressScanMirror)
EcostressScanMirror._v_fit_first_angle_per_encoder_value = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_fit_first_angle_per_encoder_value, None, EcostressScanMirror)
EcostressScanMirror._v_fit_second_angle_per_encoder_value = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_fit_second_angle_per_encoder_value, None, EcostressScanMirror)
EcostressScanMirror._v_first_encoder_value_at_0 = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_first_encoder_value_at_0, None, EcostressScanMirror)
EcostressScanMirror._v_first_encoder_value_at_0_with_derivative = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_first_encoder_value_at_0_with_derivative, None, EcostressScanMirror)
EcostressScanMirror._v_second_encoder_value_at_0 = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_second_encoder_value_at_0, None, EcostressScanMirror)
EcostressScanMirror._v_second_encoder_value_at_0_with_derivative = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_second_encoder_value_at_0_with_derivative, None, EcostressScanMirror)
EcostressScanMirror._v_first_angle_per_encoder_value = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_first_angle_per_encoder_value, None, EcostressScanMirror)
EcostressScanMirror._v_second_angle_per_encoder_value = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_second_angle_per_encoder_value, None, EcostressScanMirror)
EcostressScanMirror._v_first_angle_per_encoder_value_with_derivative = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_first_angle_per_encoder_value_with_derivative, None, EcostressScanMirror)
EcostressScanMirror._v_second_angle_per_encoder_value_with_derivative = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_second_angle_per_encoder_value_with_derivative, None, EcostressScanMirror)
EcostressScanMirror._v_number_sample = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_number_sample, None, EcostressScanMirror)
EcostressScanMirror._v_number_scan = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_number_scan, None, EcostressScanMirror)
EcostressScanMirror._v_encoder_value = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_encoder_value, None, EcostressScanMirror)
EcostressScanMirror._v_max_encoder_value = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror__v_max_encoder_value, None, EcostressScanMirror)
EcostressScanMirror.mirror_side = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror_mirror_side, None, EcostressScanMirror)
EcostressScanMirror.__str__ = new_instancemethod(_ecostress_scan_mirror.EcostressScanMirror___str__, None, EcostressScanMirror)
EcostressScanMirror_swigregister = _ecostress_scan_mirror.EcostressScanMirror_swigregister
EcostressScanMirror_swigregister(EcostressScanMirror)


__all__ = ["EcostressScanMirror","ObserverEcostressScanMirror","ObservableEcostressScanMirror"]



