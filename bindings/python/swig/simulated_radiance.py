# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _simulated_radiance.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_simulated_radiance', [dirname(__file__)])
        except ImportError:
            import _simulated_radiance
            return _simulated_radiance
        if fp is not None:
            try:
                _mod = imp.load_module('_simulated_radiance', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _simulated_radiance = swig_import_helper()
    del swig_import_helper
else:
    import _simulated_radiance
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _simulated_radiance.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_simulated_radiance.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_simulated_radiance.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_simulated_radiance.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_simulated_radiance.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_simulated_radiance.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_simulated_radiance.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_simulated_radiance.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_simulated_radiance.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_simulated_radiance.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_simulated_radiance.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_simulated_radiance.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_simulated_radiance.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_simulated_radiance.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_simulated_radiance.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_simulated_radiance.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_simulated_radiance.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _simulated_radiance.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_simulated_radiance.SHARED_PTR_DISOWN_swigconstant(_simulated_radiance)
SHARED_PTR_DISOWN = _simulated_radiance.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.image_ground_connection
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
import geocal_swig.observer
class SimulatedRadiance(geocal_swig.generic_object.GenericObject):
    """

    This is used to produce simulated radiance data.

    This is based on an underlying Map_projected_image (e.g., ASTER data),
    and we simulate what ecostress would see when viewing this data. The
    simulated data is like L1A_PIX data, except that it is still in
    whatever units the Map_projected_image is. A separate step is needed
    to convert this into DNs to make a proper L1A_PIX file.

    C++ includes: simulated_radiance.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Gca, Map_projected_image, Avg_fact=-1, Read_into_memory=False, Fill_value=0.0):
        """

        Ecostress::SimulatedRadiance::SimulatedRadiance(const boost::shared_ptr< GroundCoordinateArray > &Gca, const
        boost::shared_ptr< GeoCal::RasterImage > &Map_projected_image, int
        Avg_fact=-1, bool Read_into_memory=false, double Fill_value=0.0)

        """
        _simulated_radiance.SimulatedRadiance_swiginit(self, _simulated_radiance.new_SimulatedRadiance(Gca, Map_projected_image, Avg_fact, Read_into_memory, Fill_value))

    def radiance_scan(self, Start_line, Number_line=-1):
        """

        blitz::Array< double, 2 > SimulatedRadiance::radiance_scan(int Start_line, int Number_line=-1) const
        Call ground_coor_scan_arr, and then use the location to determine the
        radiance we would see from the map_projected_image().

        This is for a single scan. We use this interface, because this is a
        good unit for python to call while generating this in parallel. See
        L1aPixSimulate for the use of this. 
        """
        return _simulated_radiance.SimulatedRadiance_radiance_scan(self, Start_line, Number_line)


    def _v_ground_coordinate_array(self):
        """

        const boost::shared_ptr<GroundCoordinateArray>& Ecostress::SimulatedRadiance::ground_coordinate_array() const
        Return underlying GroundCoordinateArray. 
        """
        return _simulated_radiance.SimulatedRadiance__v_ground_coordinate_array(self)


    @property
    def ground_coordinate_array(self):
        return self._v_ground_coordinate_array()


    def _v_avg_factor(self):
        """

        int Ecostress::SimulatedRadiance::avg_factor() const
        Averaging factor to use with map_projected_image(). 
        """
        return _simulated_radiance.SimulatedRadiance__v_avg_factor(self)


    @property
    def avg_factor(self):
        return self._v_avg_factor()


    def _v_fill_value(self):
        """

        double Ecostress::SimulatedRadiance::fill_value() const
        Fill value to use when we are outside map_projected_image(). 
        """
        return _simulated_radiance.SimulatedRadiance__v_fill_value(self)


    @property
    def fill_value(self):
        return self._v_fill_value()


    def _v_read_into_memory(self):
        """

        bool Ecostress::SimulatedRadiance::read_into_memory() const
        If true, read Map_projected_image completely into memory.

        Otherwise we read as needed. 
        """
        return _simulated_radiance.SimulatedRadiance__v_read_into_memory(self)


    @property
    def read_into_memory(self):
        return self._v_read_into_memory()


    def _v_map_projected_image(self):
        """

        const boost::shared_ptr<GeoCal::RasterImage>& Ecostress::SimulatedRadiance::map_projected_image() const
        Underlying radiance data. 
        """
        return _simulated_radiance.SimulatedRadiance__v_map_projected_image(self)


    @property
    def map_projected_image(self):
        return self._v_map_projected_image()


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _simulated_radiance.delete_SimulatedRadiance
SimulatedRadiance.radiance_scan = new_instancemethod(_simulated_radiance.SimulatedRadiance_radiance_scan, None, SimulatedRadiance)
SimulatedRadiance._v_ground_coordinate_array = new_instancemethod(_simulated_radiance.SimulatedRadiance__v_ground_coordinate_array, None, SimulatedRadiance)
SimulatedRadiance._v_avg_factor = new_instancemethod(_simulated_radiance.SimulatedRadiance__v_avg_factor, None, SimulatedRadiance)
SimulatedRadiance._v_fill_value = new_instancemethod(_simulated_radiance.SimulatedRadiance__v_fill_value, None, SimulatedRadiance)
SimulatedRadiance._v_read_into_memory = new_instancemethod(_simulated_radiance.SimulatedRadiance__v_read_into_memory, None, SimulatedRadiance)
SimulatedRadiance._v_map_projected_image = new_instancemethod(_simulated_radiance.SimulatedRadiance__v_map_projected_image, None, SimulatedRadiance)
SimulatedRadiance.__str__ = new_instancemethod(_simulated_radiance.SimulatedRadiance___str__, None, SimulatedRadiance)
SimulatedRadiance_swigregister = _simulated_radiance.SimulatedRadiance_swigregister
SimulatedRadiance_swigregister(SimulatedRadiance)



