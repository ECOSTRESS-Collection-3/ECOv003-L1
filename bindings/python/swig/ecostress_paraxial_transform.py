# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _ecostress_paraxial_transform

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _ecostress_paraxial_transform.SWIG_PyInstanceMethod_New
_swig_new_static_method = _ecostress_paraxial_transform.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _ecostress_paraxial_transform.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ecostress_paraxial_transform.delete_SwigPyIterator
    value = _swig_new_instance_method(_ecostress_paraxial_transform.SwigPyIterator_value)
    incr = _swig_new_instance_method(_ecostress_paraxial_transform.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_ecostress_paraxial_transform.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_ecostress_paraxial_transform.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_ecostress_paraxial_transform.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_ecostress_paraxial_transform.SwigPyIterator_copy)
    next = _swig_new_instance_method(_ecostress_paraxial_transform.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_ecostress_paraxial_transform.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_ecostress_paraxial_transform.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_ecostress_paraxial_transform.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_ecostress_paraxial_transform.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_ecostress_paraxial_transform.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_ecostress_paraxial_transform.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_ecostress_paraxial_transform.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_ecostress_paraxial_transform.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_ecostress_paraxial_transform.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ecostress_paraxial_transform:
_ecostress_paraxial_transform.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _ecostress_paraxial_transform.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
class EcostressParaxialTransform(geocal_swig.generic_object.GenericObject):
    r"""

    This handles the non-linearity of the ECOSTRESS camera optics.

    This goes to and from real frame camera coordinate (i.e. x and y of
    the CCD) and the location we'd get for a pinhole camera with no non-
    linearity (the paraxial approximation).

    Turns out that a 3rd order polynomial does a pretty good job capturing
    the distortion. We have a difference with the calculated distortion
    has a maximum difference of 0.02 pixels.

    Note that this is likely to get replaced with something else when we
    have the real camera model.

    Currently we fill out this data using the script
    ecostress_camera_generate.py in the end_to_end_testing/ directory.

    C++ includes: ecostress_paraxial_transform.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""

        Ecostress::EcostressParaxialTransform::EcostressParaxialTransform()
        Ecostress::EcostressParaxialTransform::EcostressParaxialTransform
        We populate the transform separately, so just have a default
        constructor.
        A 3rd order polynomial has 10 coefficients (calculated in
        ecostress_camera_generate.py). 
        """
        _ecostress_paraxial_transform.EcostressParaxialTransform_swiginit(self, _ecostress_paraxial_transform.new_EcostressParaxialTransform())
    paraxial_to_real = _swig_new_instance_method(_ecostress_paraxial_transform.EcostressParaxialTransform_paraxial_to_real)
    real_to_paraxial = _swig_new_instance_method(_ecostress_paraxial_transform.EcostressParaxialTransform_real_to_paraxial)
    __str__ = _swig_new_instance_method(_ecostress_paraxial_transform.EcostressParaxialTransform___str__)
    _v_real_to_par = _swig_new_instance_method(_ecostress_paraxial_transform.EcostressParaxialTransform__v_real_to_par)

    @property
    def real_to_par(self):
        return self._v_real_to_par()

    _v_par_to_real = _swig_new_instance_method(_ecostress_paraxial_transform.EcostressParaxialTransform__v_par_to_real)

    @property
    def par_to_real(self):
        return self._v_par_to_real()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _ecostress_paraxial_transform.delete_EcostressParaxialTransform

# Register EcostressParaxialTransform in _ecostress_paraxial_transform:
_ecostress_paraxial_transform.EcostressParaxialTransform_swigregister(EcostressParaxialTransform)

__all__ = ["EcostressParaxialTransform"]


