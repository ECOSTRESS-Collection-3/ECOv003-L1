# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ecostress_orbit.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ecostress_orbit')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ecostress_orbit')
    _ecostress_orbit = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ecostress_orbit', [dirname(__file__)])
        except ImportError:
            import _ecostress_orbit
            return _ecostress_orbit
        try:
            _mod = imp.load_module('_ecostress_orbit', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ecostress_orbit = swig_import_helper()
    del swig_import_helper
else:
    import _ecostress_orbit
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ecostress_orbit.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_ecostress_orbit.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_ecostress_orbit.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_ecostress_orbit.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_ecostress_orbit.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_ecostress_orbit.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_ecostress_orbit.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_ecostress_orbit.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_ecostress_orbit.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_ecostress_orbit.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_ecostress_orbit.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_ecostress_orbit.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_ecostress_orbit.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_ecostress_orbit.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_ecostress_orbit.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_ecostress_orbit.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_ecostress_orbit.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _ecostress_orbit.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _ecostress_orbit.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.hdf_orbit
import geocal_swig.orbit_quaternion_list
import geocal_swig.orbit
import geocal_swig.generic_object
import geocal_swig.observer
import geocal_swig.with_parameter
class EcostressOrbit(geocal_swig.hdf_orbit.HdfOrbit_Eci_TimeJ2000):
    """

    This is the Ecostress orbit (not including any fixes or
    modifications).

    This is used to read a L1A_ATT or L1B_ATT file.

    This is mostly just a plain vanilla HdfOrbit, however we have two
    modifications:

    The BAD data is collected at different times than the image data. In
    general, the time for image data and the time for the orbit aren't
    exactly the same. They are close, within a second or two. But we want
    to allow a limited extrapolation at the start and end of the orbit (a
    HdfOrbit treats this as an error)

    The BAD data is only collected at the same time as the imagery. We can
    have large gaps in the ephemeris and attitude when we collect data for
    a scene, wait for a bit, and then collect another scene. A HdfOrbit
    interpolates between data, but this doesn't make sense for large gaps.
    Instead, we will use the data near the time requested and extrapolate.
    Times too far into a large gap will be treated as errors. So basically
    we divide the full orbit into a number of smaller orbits covering the
    scenes, and allow extrapolation of the data.

    C++ includes: ecostress_orbit.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        Ecostress::EcostressOrbit::EcostressOrbit(const std::string &Fname, const blitz::Array< double, 1 > &Pos_off,
        double Extrapolation_pad=5.0, double Large_gap=10.0)
        Constructor, read the give file and allow the given amount of
        extrapolation pad.

        Treat gaps in the data > Large_gap as a large gap. Also has an offset
        in position like OrbitScCoorOffset. 
        """
        _ecostress_orbit.EcostressOrbit_swiginit(self, _ecostress_orbit.new_EcostressOrbit(*args))

    def spacecraft_x_mostly_in_velocity_direction(self, T):
        """

        bool EcostressOrbit::spacecraft_x_mostly_in_velocity_direction(GeoCal::Time T) const
        Indicate if spacecraft orientation is mostly in the forward direction,
        or has the 180 degree yaw used sometimes in maneuvers.

        This controls if the data in l1a_pix looks "upside down", if this is
        true than it is upside down and l1b_rad should flip this. 
        """
        return _ecostress_orbit.EcostressOrbit_spacecraft_x_mostly_in_velocity_direction(self, T)


    def _v_large_gap(self, *args):
        """

        void Ecostress::EcostressOrbit::large_gap(double v)

        """
        return _ecostress_orbit.EcostressOrbit__v_large_gap(self, *args)


    @property
    def large_gap(self):
        return self._v_large_gap()

    @large_gap.setter
    def large_gap(self, value):
      self._v_large_gap(value)


    def _v_extrapolation_pad(self, *args):
        """

        void Ecostress::EcostressOrbit::extrapolation_pad(double v)

        """
        return _ecostress_orbit.EcostressOrbit__v_extrapolation_pad(self, *args)


    @property
    def extrapolation_pad(self):
        return self._v_extrapolation_pad()

    @extrapolation_pad.setter
    def extrapolation_pad(self, value):
      self._v_extrapolation_pad(value)


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _ecostress_orbit.delete_EcostressOrbit
EcostressOrbit.spacecraft_x_mostly_in_velocity_direction = new_instancemethod(_ecostress_orbit.EcostressOrbit_spacecraft_x_mostly_in_velocity_direction, None, EcostressOrbit)
EcostressOrbit._v_large_gap = new_instancemethod(_ecostress_orbit.EcostressOrbit__v_large_gap, None, EcostressOrbit)
EcostressOrbit._v_extrapolation_pad = new_instancemethod(_ecostress_orbit.EcostressOrbit__v_extrapolation_pad, None, EcostressOrbit)
EcostressOrbit_swigregister = _ecostress_orbit.EcostressOrbit_swigregister
EcostressOrbit_swigregister(EcostressOrbit)


__all__ = ["EcostressOrbit"]



