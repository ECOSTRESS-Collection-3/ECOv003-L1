# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _ground_coordinate_array

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _ground_coordinate_array.SWIG_PyInstanceMethod_New
_swig_new_static_method = _ground_coordinate_array.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _ground_coordinate_array.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ground_coordinate_array.delete_SwigPyIterator
    value = _swig_new_instance_method(_ground_coordinate_array.SwigPyIterator_value)
    incr = _swig_new_instance_method(_ground_coordinate_array.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_ground_coordinate_array.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_ground_coordinate_array.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_ground_coordinate_array.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_ground_coordinate_array.SwigPyIterator_copy)
    next = _swig_new_instance_method(_ground_coordinate_array.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_ground_coordinate_array.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_ground_coordinate_array.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_ground_coordinate_array.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_ground_coordinate_array.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_ground_coordinate_array.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_ground_coordinate_array.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_ground_coordinate_array.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_ground_coordinate_array.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_ground_coordinate_array.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ground_coordinate_array:
_ground_coordinate_array.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _ground_coordinate_array.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.image_ground_connection
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
import geocal_swig.observer
import geocal_swig.raster_image_variable
import geocal_swig.dem_map_info
class GroundCoordinateArray(geocal_swig.generic_object.GenericObject):
    r"""

    While we can just use the normal EcostressImageGroundConnection
    ground_coordinate function to calculate the ground coordinate for a
    range of image coordinates, it can take a while to do this.

    We can significantly speed this up if we have a good initial guess as
    the starting length of each ray when finding the intersection of the
    surface.

    We do this by noting that as be scan across the full set of samples
    the rays are near parallel from one scan position to the next. We take
    advantage of this by first doing a full calculation for the nadir most
    scan position, and then approximate each scan position outside of this
    as starting at the distance for the previous can position. We improve
    the guess a bit by not just using one ray, but also looking and the
    line just above and below a given line.

    Note that this is very similar to the IgcRayCaster class found in
    GeoCal. However that is designed for a pushbroom camera, while we have
    a push whisk broom. So we use different logic for coming up with the
    initial guess as the ray length, but it is the same idea.

    C++ includes: ground_coordinate_array.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Igc, Include_angle=False, Nsub_line=1, Nsub_sample=1):
        r"""

        Ecostress::GroundCoordinateArray::GroundCoordinateArray(const boost::shared_ptr< EcostressImageGroundConnection > &Igc, bool
        Include_angle=false, int Nsub_line=1, int Nsub_sample=1)
        Ecostress::GroundCoordinateArray::GroundCoordinateArray
        Constructor.
        Because they are closely related, you can optionally set
        Include_angle=true and we will include view_zenith, view_azimuth,
        solar_zenith and solar_azimuth in our calculation. 
        """
        _ground_coordinate_array.GroundCoordinateArray_swiginit(self, _ground_coordinate_array.new_GroundCoordinateArray(Igc, Include_angle, Nsub_line, Nsub_sample))
    _v_igc = _swig_new_instance_method(_ground_coordinate_array.GroundCoordinateArray__v_igc)

    @property
    def igc(self):
        return self._v_igc()

    ground_coor_arr = _swig_new_instance_method(_ground_coordinate_array.GroundCoordinateArray_ground_coor_arr)
    ground_coor_scan_arr = _swig_new_instance_method(_ground_coordinate_array.GroundCoordinateArray_ground_coor_scan_arr)
    cover = _swig_new_instance_method(_ground_coordinate_array.GroundCoordinateArray_cover)
    raster_cover = _swig_new_instance_method(_ground_coordinate_array.GroundCoordinateArray_raster_cover)
    raster_cover_vicar = _swig_new_instance_method(_ground_coordinate_array.GroundCoordinateArray_raster_cover_vicar)
    project_surface = _swig_new_instance_method(_ground_coordinate_array.GroundCoordinateArray_project_surface)
    project_surface_scan_arr = _swig_new_instance_method(_ground_coordinate_array.GroundCoordinateArray_project_surface_scan_arr)
    interpolate = _swig_new_static_method(_ground_coordinate_array.GroundCoordinateArray_interpolate)
    __str__ = _swig_new_instance_method(_ground_coordinate_array.GroundCoordinateArray___str__)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _ground_coordinate_array.delete_GroundCoordinateArray

# Register GroundCoordinateArray in _ground_coordinate_array:
_ground_coordinate_array.GroundCoordinateArray_swigregister(GroundCoordinateArray)

__all__ = ["GroundCoordinateArray"]


