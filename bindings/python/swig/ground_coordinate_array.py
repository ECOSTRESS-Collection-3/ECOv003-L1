# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ground_coordinate_array.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ground_coordinate_array', [dirname(__file__)])
        except ImportError:
            import _ground_coordinate_array
            return _ground_coordinate_array
        if fp is not None:
            try:
                _mod = imp.load_module('_ground_coordinate_array', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ground_coordinate_array = swig_import_helper()
    del swig_import_helper
else:
    import _ground_coordinate_array
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ground_coordinate_array.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_ground_coordinate_array.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_ground_coordinate_array.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_ground_coordinate_array.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_ground_coordinate_array.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_ground_coordinate_array.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_ground_coordinate_array.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_ground_coordinate_array.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_ground_coordinate_array.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_ground_coordinate_array.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_ground_coordinate_array.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_ground_coordinate_array.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_ground_coordinate_array.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_ground_coordinate_array.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_ground_coordinate_array.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_ground_coordinate_array.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_ground_coordinate_array.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _ground_coordinate_array.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_ground_coordinate_array.SHARED_PTR_DISOWN_swigconstant(_ground_coordinate_array)
SHARED_PTR_DISOWN = _ground_coordinate_array.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.image_ground_connection
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
import geocal_swig.observer
class GroundCoordinateArray(geocal_swig.generic_object.GenericObject):
    """

    While we can just use the normal EcostressImageGroundConnection
    ground_coordinate function to calculate the ground coordinate for a
    range of image coordinates, it can take a while to do this.

    We can significantly speed this up if we have a good initial guess as
    the starting length of each ray when finding the intersection of the
    surface.

    We do this by noting that as be scan across the full set of samples
    the rays are near parallel from one scan position to the next. We take
    advantage of this by first doing a full calculation for the nadir most
    scan position, and then approximate each scan position outside of this
    as starting at the distance for the previous can position. We improve
    the guess a bit by not just using one ray, but also looking and the
    line just above and below a given line.

    Note that this is very similar to the IgcRayCaster class found in
    GeoCal. However that is designed for a pushbroom camera, while we have
    a push whisk broom. So we use different logic for coming up with the
    initial guess as the ray length, but it is the same idea. We also
    don't actually need to do this with subpixels for this particular
    application, so we simplify the logic a little bit by only worrying
    about the middle of each image pixel.

    C++ includes: ground_coordinate_array.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Igc, Include_angle=False):
        """

        Ecostress::GroundCoordinateArray::GroundCoordinateArray(const boost::shared_ptr< EcostressImageGroundConnection > &Igc, bool
        Include_angle=false)
        Constructor.

        Because they are closely related, you can optionally set
        Include_angle=true and we will include view_zenith, view_azimuth,
        solar_zenith and solar_azimuth in our calculation. 
        """
        _ground_coordinate_array.GroundCoordinateArray_swiginit(self, _ground_coordinate_array.new_GroundCoordinateArray(Igc, Include_angle))

    def _v_igc(self):
        """

        const boost::shared_ptr<EcostressImageGroundConnection>& Ecostress::GroundCoordinateArray::igc() const
        The ImageGroundConnection we are working with. 
        """
        return _ground_coordinate_array.GroundCoordinateArray__v_igc(self)


    @property
    def igc(self):
        return self._v_igc()


    def ground_coor_arr(self):
        """

        blitz::Array< double, 3 > GroundCoordinateArray::ground_coor_arr() const
        This returns the ground coordinates for every pixel in the
        ImageGroundConnection as a number_line x number_sample x 3 array, with
        the coordinates as latitude, longitude, height.

        These are the same values that you would get from just repeatedly
        calling igc()->ground_coordinate(ic), but we take advantage of the
        special form of the Ecostress scan to speed up this calculation a lot.

        If include_angle was specified in the construtor, we return a
        number_line x number_sample x 7 array with coordinates as latitude,
        longitude, height, view_zenith, view_azimuth, solar_zenith,
        solar_azimuth. 
        """
        return _ground_coordinate_array.GroundCoordinateArray_ground_coor_arr(self)


    def ground_coor_scan_arr(self, Start_line, Number_line=-1):
        """

        blitz::Array< double, 3 > GroundCoordinateArray::ground_coor_scan_arr(int Start_line, int Number_line=-1) const
        This return the ground coordinates as a number_line x number_sample x
        3 array, with the coordinates as latitude, longitude, and height.

        You don't normally call this function, instead you likely want
        ground_coor_arr. We have this function exposed to aid with testing -
        it is quicker to call this for a single scan rather than doing all the
        scans like ground_coor_arr. Also, in python if we are doing parallel
        processing we can do each ground_coor_arr separately if desired.

        If include_angle was specified in the construtor, we return a
        number_line x number_sample x 7 array with coordinates as latitude,
        longitude, height, view_zenith, view_azimuth, solar_zenith,
        solar_azimuth. 
        """
        return _ground_coordinate_array.GroundCoordinateArray_ground_coor_scan_arr(self, Start_line, Number_line)


    def cover(self, Resolution=70.0):
        """

        GeoCal::MapInfo GroundCoordinateArray::cover(double Resolution=70.0) const
        Calculate the map info to cover the ground projection of the Igc.

        This is like what the python program igc_project calculates, but it is
        more convenient to have this in C++ here. The Resolution is in meters.

        """
        return _ground_coordinate_array.GroundCoordinateArray_cover(self, Resolution)


    def project_surface_scan_arr(self, Data, Start_line, Number_line):
        """

        void GroundCoordinateArray::project_surface_scan_arr(GeoCal::RasterImage &Data, int Start_line, int Number_line=-1) const
        This projects the Igc to the surface for a single scan array.

        We fill in Ras with whatever the last encountered value is, i.e. we
        make no attempt to average data. We could implement averaging if
        needed, but for right now we just put in the value.

        We do nothing with points that we don't see, so if for example you
        want a fill value you should make sure to fill in Data before calling
        this function. 
        """
        return _ground_coordinate_array.GroundCoordinateArray_project_surface_scan_arr(self, Data, Start_line, Number_line)


    def interpolate(Data, Lat, Lon):
        """

        blitz::Array< double, 2 > GroundCoordinateArray::interpolate(const GeoCal::RasterImage &Data, const blitz::Array< double, 2 >
        &Lat, const blitz::Array< double, 2 > &Lon)
        This interpolates the given RasterImage at the given latitude,
        longitude locations.

        This is exactly the same as calling
        Data.interpolate(Data.coordinate(Geodetic(Lat,Lon)) repeatedly, except
        this runs much faster than doing this operation in python. 
        """
        return _ground_coordinate_array.GroundCoordinateArray_interpolate(Data, Lat, Lon)

    interpolate = staticmethod(interpolate)

    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _ground_coordinate_array.delete_GroundCoordinateArray
GroundCoordinateArray._v_igc = new_instancemethod(_ground_coordinate_array.GroundCoordinateArray__v_igc, None, GroundCoordinateArray)
GroundCoordinateArray.ground_coor_arr = new_instancemethod(_ground_coordinate_array.GroundCoordinateArray_ground_coor_arr, None, GroundCoordinateArray)
GroundCoordinateArray.ground_coor_scan_arr = new_instancemethod(_ground_coordinate_array.GroundCoordinateArray_ground_coor_scan_arr, None, GroundCoordinateArray)
GroundCoordinateArray.cover = new_instancemethod(_ground_coordinate_array.GroundCoordinateArray_cover, None, GroundCoordinateArray)
GroundCoordinateArray.project_surface_scan_arr = new_instancemethod(_ground_coordinate_array.GroundCoordinateArray_project_surface_scan_arr, None, GroundCoordinateArray)
GroundCoordinateArray.__str__ = new_instancemethod(_ground_coordinate_array.GroundCoordinateArray___str__, None, GroundCoordinateArray)
GroundCoordinateArray_swigregister = _ground_coordinate_array.GroundCoordinateArray_swigregister
GroundCoordinateArray_swigregister(GroundCoordinateArray)

def GroundCoordinateArray_interpolate(Data, Lat, Lon):
    """

    blitz::Array< double, 2 > GroundCoordinateArray::interpolate(const GeoCal::RasterImage &Data, const blitz::Array< double, 2 >
    &Lat, const blitz::Array< double, 2 > &Lon)
    This interpolates the given RasterImage at the given latitude,
    longitude locations.

    This is exactly the same as calling
    Data.interpolate(Data.coordinate(Geodetic(Lat,Lon)) repeatedly, except
    this runs much faster than doing this operation in python. 
    """
    return _ground_coordinate_array.GroundCoordinateArray_interpolate(Data, Lat, Lon)



