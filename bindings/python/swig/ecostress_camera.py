# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ecostress_camera.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ecostress_camera')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ecostress_camera')
    _ecostress_camera = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ecostress_camera', [dirname(__file__)])
        except ImportError:
            import _ecostress_camera
            return _ecostress_camera
        try:
            _mod = imp.load_module('_ecostress_camera', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ecostress_camera = swig_import_helper()
    del swig_import_helper
else:
    import _ecostress_camera
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ecostress_camera.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_ecostress_camera.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_ecostress_camera.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_ecostress_camera.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_ecostress_camera.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_ecostress_camera.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_ecostress_camera.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_ecostress_camera.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_ecostress_camera.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_ecostress_camera.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_ecostress_camera.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_ecostress_camera.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_ecostress_camera.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_ecostress_camera.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_ecostress_camera.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_ecostress_camera.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_ecostress_camera.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _ecostress_camera.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _ecostress_camera.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.quaternion_camera
import geocal_swig.generic_object
import geocal_swig.observer
import geocal_swig.camera
import geocal_swig.with_parameter
class EcostressParaxialTransform(geocal_swig.generic_object.GenericObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _ecostress_camera.EcostressParaxialTransform_swiginit(self, _ecostress_camera.new_EcostressParaxialTransform())

    @property
    def real_to_par(self):
        return self._v_real_to_par()


    @property
    def par_to_real(self):
        return self._v_par_to_real()


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _ecostress_camera.delete_EcostressParaxialTransform
EcostressParaxialTransform.paraxial_to_real = new_instancemethod(_ecostress_camera.EcostressParaxialTransform_paraxial_to_real, None, EcostressParaxialTransform)
EcostressParaxialTransform.real_to_paraxial = new_instancemethod(_ecostress_camera.EcostressParaxialTransform_real_to_paraxial, None, EcostressParaxialTransform)
EcostressParaxialTransform.__str__ = new_instancemethod(_ecostress_camera.EcostressParaxialTransform___str__, None, EcostressParaxialTransform)
EcostressParaxialTransform._v_real_to_par = new_instancemethod(_ecostress_camera.EcostressParaxialTransform__v_real_to_par, None, EcostressParaxialTransform)
EcostressParaxialTransform._v_par_to_real = new_instancemethod(_ecostress_camera.EcostressParaxialTransform__v_par_to_real, None, EcostressParaxialTransform)
EcostressParaxialTransform_swigregister = _ecostress_camera.EcostressParaxialTransform_swigregister
EcostressParaxialTransform_swigregister(EcostressParaxialTransform)


__all__ = ["EcostressParaxialTransform"]

class EcostressCamera(geocal_swig.quaternion_camera.QuaternionCamera):
    """

    This is the ecostress camera model.

    Right now we model the optical nonlinearity with
    EcostressParaxialTransform.

    Note that to match the field angles from our FPA distortion spread
    sheet we need to add a scale and offset to the DCS yf value. Not sure
    what the physical source of this, the CCD may be at an angle relative
    to the optics, or the optics may be different in X vs. Y direction. In
    any case, we want to match the actual field angles.

    We have the flag "line_order_reversed". This virtually reverses the
    line order of the camera. This is used by l1b_rad to make the image
    data look "right side up". We account for this by just changing the
    pixel order of the camera.

    C++ includes: ecostress_camera.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Focal_length, Y_scale, Y_offset, Frame_to_sc_q, Line_order_reversed=False):
        """

        EcostressCamera::EcostressCamera(double Focal_length=427.6, double Y_scale=1.0, double Y_offset=0,
        boost::math::quaternion< double >
        Frame_to_sc_q=boost::math::quaternion< double >(1, 0, 0, 0), bool
        Line_order_reversed=false)
        Constructor.

        We've hardcoded things we don't expect to change (e.g., the line and
        sample pitch). 
        """
        _ecostress_camera.EcostressCamera_swiginit(self, _ecostress_camera.new_EcostressCamera(Focal_length, Y_scale, Y_offset, Frame_to_sc_q, Line_order_reversed))

    def mask_all_parameter(self):
        """

        void Ecostress::EcostressCamera::mask_all_parameter()
        Convenience function to mask all the parameters we can fit for. 
        """
        return _ecostress_camera.EcostressCamera_mask_all_parameter(self)


    def _v_paraxial_transform(self, *args):
        """

        void Ecostress::EcostressCamera::paraxial_transform(const boost::shared_ptr< EcostressParaxialTransform > &v)

        """
        return _ecostress_camera.EcostressCamera__v_paraxial_transform(self, *args)


    @property
    def paraxial_transform(self):
        return self._v_paraxial_transform()

    @paraxial_transform.setter
    def paraxial_transform(self, value):
      self._v_paraxial_transform(value)


    def _v_y_scale(self, *args):
        """

        void Ecostress::EcostressCamera::y_scale(double V)

        """
        return _ecostress_camera.EcostressCamera__v_y_scale(self, *args)


    @property
    def y_scale(self):
        return self._v_y_scale()

    @y_scale.setter
    def y_scale(self, value):
      self._v_y_scale(value)


    def _v_y_offset(self, *args):
        """

        void Ecostress::EcostressCamera::y_offset(double V)

        """
        return _ecostress_camera.EcostressCamera__v_y_offset(self, *args)


    @property
    def y_offset(self):
        return self._v_y_offset()

    @y_offset.setter
    def y_offset(self, value):
      self._v_y_offset(value)


    def _v_line_order_reversed(self, *args):
        """

        void Ecostress::EcostressCamera::line_order_reversed(bool V)

        """
        return _ecostress_camera.EcostressCamera__v_line_order_reversed(self, *args)


    @property
    def line_order_reversed(self):
        return self._v_line_order_reversed()

    @line_order_reversed.setter
    def line_order_reversed(self, value):
      self._v_line_order_reversed(value)


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _ecostress_camera.delete_EcostressCamera
EcostressCamera.mask_all_parameter = new_instancemethod(_ecostress_camera.EcostressCamera_mask_all_parameter, None, EcostressCamera)
EcostressCamera._v_paraxial_transform = new_instancemethod(_ecostress_camera.EcostressCamera__v_paraxial_transform, None, EcostressCamera)
EcostressCamera._v_y_scale = new_instancemethod(_ecostress_camera.EcostressCamera__v_y_scale, None, EcostressCamera)
EcostressCamera._v_y_offset = new_instancemethod(_ecostress_camera.EcostressCamera__v_y_offset, None, EcostressCamera)
EcostressCamera._v_line_order_reversed = new_instancemethod(_ecostress_camera.EcostressCamera__v_line_order_reversed, None, EcostressCamera)
EcostressCamera_swigregister = _ecostress_camera.EcostressCamera_swigregister
EcostressCamera_swigregister(EcostressCamera)


__all__ = ["EcostressCamera"]



