# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _ecostress_camera

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _ecostress_camera.SWIG_PyInstanceMethod_New
_swig_new_static_method = _ecostress_camera.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _ecostress_camera.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ecostress_camera.delete_SwigPyIterator
    value = _swig_new_instance_method(_ecostress_camera.SwigPyIterator_value)
    incr = _swig_new_instance_method(_ecostress_camera.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_ecostress_camera.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_ecostress_camera.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_ecostress_camera.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_ecostress_camera.SwigPyIterator_copy)
    next = _swig_new_instance_method(_ecostress_camera.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_ecostress_camera.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_ecostress_camera.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_ecostress_camera.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_ecostress_camera.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_ecostress_camera.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_ecostress_camera.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_ecostress_camera.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_ecostress_camera.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_ecostress_camera.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ecostress_camera:
_ecostress_camera.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _ecostress_camera.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.quaternion_camera
import geocal_swig.generic_object
import geocal_swig.observer
import geocal_swig.camera
import geocal_swig.with_parameter
class EcostressParaxialTransform(geocal_swig.generic_object.GenericObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ecostress_camera.EcostressParaxialTransform_swiginit(self, _ecostress_camera.new_EcostressParaxialTransform())
    paraxial_to_real = _swig_new_instance_method(_ecostress_camera.EcostressParaxialTransform_paraxial_to_real)
    real_to_paraxial = _swig_new_instance_method(_ecostress_camera.EcostressParaxialTransform_real_to_paraxial)
    __str__ = _swig_new_instance_method(_ecostress_camera.EcostressParaxialTransform___str__)
    _v_real_to_par = _swig_new_instance_method(_ecostress_camera.EcostressParaxialTransform__v_real_to_par)

    @property
    def real_to_par(self):
        return self._v_real_to_par()

    _v_par_to_real = _swig_new_instance_method(_ecostress_camera.EcostressParaxialTransform__v_par_to_real)

    @property
    def par_to_real(self):
        return self._v_par_to_real()


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _ecostress_camera.delete_EcostressParaxialTransform

# Register EcostressParaxialTransform in _ecostress_camera:
_ecostress_camera.EcostressParaxialTransform_swigregister(EcostressParaxialTransform)

__all__ = ["EcostressParaxialTransform"]

class EcostressCamera(geocal_swig.quaternion_camera.QuaternionCamera):
    r"""

    This is the ecostress camera model.

    Right now we model the optical nonlinearity with
    EcostressParaxialTransform.

    Note that to match the field angles from our FPA distortion spread
    sheet we need to add a scale and offset to the DCS yf value. Not sure
    what the physical source of this, the CCD may be at an angle relative
    to the optics, or the optics may be different in X vs. Y direction. In
    any case, we want to match the actual field angles.

    We have the flag "line_order_reversed". This virtually reverses the
    line order of the camera. This is used by l1b_rad to make the image
    data look "right side up". We account for this by just changing the
    pixel order of the camera.

    C++ includes: ecostress_camera.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Focal_length, Y_scale, Y_offset, Frame_to_sc_q, Line_order_reversed=False):
        r"""

        EcostressCamera::EcostressCamera(double Focal_length=427.6, double Y_scale=1.0, double Y_offset=0,
        boost::math::quaternion< double >
        Frame_to_sc_q=boost::math::quaternion< double >(1, 0, 0, 0), bool
        Line_order_reversed=false)
        Ecostress::EcostressCamera::EcostressCamera
        Constructor.
        We've hardcoded things we don't expect to change (e.g., the line and
        sample pitch). 
        """
        _ecostress_camera.EcostressCamera_swiginit(self, _ecostress_camera.new_EcostressCamera(Focal_length, Y_scale, Y_offset, Frame_to_sc_q, Line_order_reversed))
    mask_all_parameter = _swig_new_instance_method(_ecostress_camera.EcostressCamera_mask_all_parameter)
    _v_paraxial_transform = _swig_new_instance_method(_ecostress_camera.EcostressCamera__v_paraxial_transform)

    @property
    def paraxial_transform(self):
        return self._v_paraxial_transform()

    @paraxial_transform.setter
    def paraxial_transform(self, value):
      self._v_paraxial_transform(value)

    _v_y_scale = _swig_new_instance_method(_ecostress_camera.EcostressCamera__v_y_scale)

    @property
    def y_scale(self):
        return self._v_y_scale()

    @y_scale.setter
    def y_scale(self, value):
      self._v_y_scale(value)

    _v_y_offset = _swig_new_instance_method(_ecostress_camera.EcostressCamera__v_y_offset)

    @property
    def y_offset(self):
        return self._v_y_offset()

    @y_offset.setter
    def y_offset(self, value):
      self._v_y_offset(value)

    _v_line_order_reversed = _swig_new_instance_method(_ecostress_camera.EcostressCamera__v_line_order_reversed)

    @property
    def line_order_reversed(self):
        return self._v_line_order_reversed()

    @line_order_reversed.setter
    def line_order_reversed(self, value):
      self._v_line_order_reversed(value)


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _ecostress_camera.delete_EcostressCamera

# Register EcostressCamera in _ecostress_camera:
_ecostress_camera.EcostressCamera_swigregister(EcostressCamera)

__all__ = ["EcostressCamera"]


