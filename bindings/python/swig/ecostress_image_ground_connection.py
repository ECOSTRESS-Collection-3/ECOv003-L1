# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ecostress_image_ground_connection.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ecostress_image_ground_connection', [dirname(__file__)])
        except ImportError:
            import _ecostress_image_ground_connection
            return _ecostress_image_ground_connection
        if fp is not None:
            try:
                _mod = imp.load_module('_ecostress_image_ground_connection', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ecostress_image_ground_connection = swig_import_helper()
    del swig_import_helper
else:
    import _ecostress_image_ground_connection
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ecostress_image_ground_connection.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_ecostress_image_ground_connection.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_ecostress_image_ground_connection.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_ecostress_image_ground_connection.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_ecostress_image_ground_connection.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_ecostress_image_ground_connection.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_ecostress_image_ground_connection.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_ecostress_image_ground_connection.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_ecostress_image_ground_connection.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_ecostress_image_ground_connection.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_ecostress_image_ground_connection.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_ecostress_image_ground_connection.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_ecostress_image_ground_connection.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_ecostress_image_ground_connection.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_ecostress_image_ground_connection.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_ecostress_image_ground_connection.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_ecostress_image_ground_connection.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _ecostress_image_ground_connection.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_ecostress_image_ground_connection.SHARED_PTR_DISOWN_swigconstant(_ecostress_image_ground_connection)
SHARED_PTR_DISOWN = _ecostress_image_ground_connection.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.image_ground_connection
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
import geocal_swig.observer
class EcostressImageGroundConnection(geocal_swig.image_ground_connection.ImageGroundConnection):
    """

    This is a ImageGroundConnection for ecostress.

    C++ includes: ecostress_image_ground_connection.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    REF_BAND = _ecostress_image_ground_connection.EcostressImageGroundConnection_REF_BAND

    def __init__(self, *args):
        """

        EcostressImageGroundConnection::EcostressImageGroundConnection(const boost::shared_ptr< GeoCal::Orbit > &Orb, const
        boost::shared_ptr< GeoCal::TimeTable > &Tt, const boost::shared_ptr<
        GeoCal::Camera > &Cam, const boost::shared_ptr< EcostressScanMirror >
        &Scan_mirror, const boost::shared_ptr< GeoCal::Dem > &D, const
        boost::shared_ptr< GeoCal::RasterImage > &Img, const std::string
        &Title="", double Resolution=30, int Band=REF_BAND, double
        Max_height=9000)
        Constructor. 
        """
        _ecostress_image_ground_connection.EcostressImageGroundConnection_swiginit(self, _ecostress_image_ground_connection.new_EcostressImageGroundConnection(*args))

    def orbit_data(self, T, Ic_sample):
        """

        boost::shared_ptr< GeoCal::QuaternionOrbitData > EcostressImageGroundConnection::orbit_data(const GeoCal::Time &T, double Ic_sample) const
        Return orbit data for the given time, which has the scan mirror angle
        applied to it. 
        """
        return _ecostress_image_ground_connection.EcostressImageGroundConnection_orbit_data(self, T, Ic_sample)


    def _v_band(self, *args):
        """

        void Ecostress::EcostressImageGroundConnection::band(int B)
        Set camera band we are using. 
        """
        return _ecostress_image_ground_connection.EcostressImageGroundConnection__v_band(self, *args)


    @property
    def band(self):
        return self._v_band()

    @band.setter
    def band(self, value):
      self._v_band(value)


    def _v_resolution(self, *args):
        """

        void Ecostress::EcostressImageGroundConnection::resolution(double R)
        Set resolution in meters that we examine Dem out.

        This affects how long ground_coordinate takes to figure out. It should
        be about the resolution of the Dem 
        """
        return _ecostress_image_ground_connection.EcostressImageGroundConnection__v_resolution(self, *args)


    @property
    def resolution(self):
        return self._v_resolution()

    @resolution.setter
    def resolution(self, value):
      self._v_resolution(value)


    def _v_max_height(self, *args):
        """

        void Ecostress::EcostressImageGroundConnection::max_height(double Max_h)
        Set Maximum height that we expect to see in the Dem. 
        """
        return _ecostress_image_ground_connection.EcostressImageGroundConnection__v_max_height(self, *args)


    @property
    def max_height(self):
        return self._v_max_height()

    @max_height.setter
    def max_height(self, value):
      self._v_max_height(value)


    def _v_orbit(self, *args):
        """

        void Ecostress::EcostressImageGroundConnection::orbit(const boost::shared_ptr< GeoCal::Orbit > &Orb)
        Set Orbit we are using. 
        """
        return _ecostress_image_ground_connection.EcostressImageGroundConnection__v_orbit(self, *args)


    @property
    def orbit(self):
        return self._v_orbit()

    @orbit.setter
    def orbit(self, value):
      self._v_orbit(value)


    def _v_time_table(self, *args):
        """

        void Ecostress::EcostressImageGroundConnection::time_table(const boost::shared_ptr< GeoCal::TimeTable > &Tt)
        Set TimeTable we are using. 
        """
        return _ecostress_image_ground_connection.EcostressImageGroundConnection__v_time_table(self, *args)


    @property
    def time_table(self):
        return self._v_time_table()

    @time_table.setter
    def time_table(self, value):
      self._v_time_table(value)


    def _v_camera(self, *args):
        """

        void Ecostress::EcostressImageGroundConnection::camera(const boost::shared_ptr< GeoCal::Camera > &Cam)
        Set Camera we are using. 
        """
        return _ecostress_image_ground_connection.EcostressImageGroundConnection__v_camera(self, *args)


    @property
    def camera(self):
        return self._v_camera()

    @camera.setter
    def camera(self, value):
      self._v_camera(value)


    def _v_scan_mirror(self, *args):
        """

        void Ecostress::EcostressImageGroundConnection::scan_mirror(const boost::shared_ptr< EcostressScanMirror > &Sm)
        Set EcostressScanMirror we are using. 
        """
        return _ecostress_image_ground_connection.EcostressImageGroundConnection__v_scan_mirror(self, *args)


    @property
    def scan_mirror(self):
        return self._v_scan_mirror()

    @scan_mirror.setter
    def scan_mirror(self, value):
      self._v_scan_mirror(value)


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _ecostress_image_ground_connection.delete_EcostressImageGroundConnection
EcostressImageGroundConnection.orbit_data = new_instancemethod(_ecostress_image_ground_connection.EcostressImageGroundConnection_orbit_data, None, EcostressImageGroundConnection)
EcostressImageGroundConnection._v_band = new_instancemethod(_ecostress_image_ground_connection.EcostressImageGroundConnection__v_band, None, EcostressImageGroundConnection)
EcostressImageGroundConnection._v_resolution = new_instancemethod(_ecostress_image_ground_connection.EcostressImageGroundConnection__v_resolution, None, EcostressImageGroundConnection)
EcostressImageGroundConnection._v_max_height = new_instancemethod(_ecostress_image_ground_connection.EcostressImageGroundConnection__v_max_height, None, EcostressImageGroundConnection)
EcostressImageGroundConnection._v_orbit = new_instancemethod(_ecostress_image_ground_connection.EcostressImageGroundConnection__v_orbit, None, EcostressImageGroundConnection)
EcostressImageGroundConnection._v_time_table = new_instancemethod(_ecostress_image_ground_connection.EcostressImageGroundConnection__v_time_table, None, EcostressImageGroundConnection)
EcostressImageGroundConnection._v_camera = new_instancemethod(_ecostress_image_ground_connection.EcostressImageGroundConnection__v_camera, None, EcostressImageGroundConnection)
EcostressImageGroundConnection._v_scan_mirror = new_instancemethod(_ecostress_image_ground_connection.EcostressImageGroundConnection__v_scan_mirror, None, EcostressImageGroundConnection)
EcostressImageGroundConnection_swigregister = _ecostress_image_ground_connection.EcostressImageGroundConnection_swigregister
EcostressImageGroundConnection_swigregister(EcostressImageGroundConnection)



