# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _resampler

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _resampler.SWIG_PyInstanceMethod_New
_swig_new_static_method = _resampler.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _resampler.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _resampler.delete_SwigPyIterator
    value = _swig_new_instance_method(_resampler.SwigPyIterator_value)
    incr = _swig_new_instance_method(_resampler.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_resampler.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_resampler.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_resampler.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_resampler.SwigPyIterator_copy)
    next = _swig_new_instance_method(_resampler.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_resampler.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_resampler.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_resampler.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_resampler.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_resampler.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_resampler.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_resampler.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_resampler.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_resampler.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _resampler:
_resampler.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _resampler.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_exception
class Resampler(geocal_swig.generic_object.GenericObject):
    r"""

    This is used to take the L1B_GEO latitude and longitude fields and
    project data to a given MapInfo.

    This is a bit brute force, and we don't worry about memory usage. The
    arrays are something like 10Kx10K floating point, so we are talking GB
    but not 10's of GB. Since this is something we only run occasionally,
    this memory usage is probably fine. But if this becomes an issue, we
    can revisit this and make this code more efficient - but for now this
    doesn't seem to be worth the effort.

    C++ includes: resampler.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Resampler::Resampler(const boost::shared_ptr< GeoCal::RasterImage > &Latitude, const
        boost::shared_ptr< GeoCal::RasterImage > &Longitude, const
        GeoCal::MapInfo &Mi, int Num_sub_pixel=2, bool Exactly_match_mi=false)
        Ecostress::Resampler::Resampler
        Constructor.
        This takes the latitude and longitude fields as RasterImage (we could
        have taken the L1B_GEO file name, but taking RasterImage seems a
        little more general). We take the MapInfo that we will resample to
        (you can get that from something like mi =
        Landsat7Global("/raid22",Landsat7Global.BAND5).map_info.scale(2,2)
        in python).

        We make sure the mapinfo covers the latitude/longitude range

        We also pass in the number of subpixels to calculate, so for example
        to work with 60 m landsat like map projection you'd want this to be 2.

        By default, we only use Mi to determine the pixel resolution, and we
        make sure the output covers the full latitude/longitude range. You can
        optionally specify that we exactly match the passed in Mi, regardless
        of the actually coverage of the lat/lon. This is useful if we are
        producing output files to compare against some existing file. 
        """
        _resampler.Resampler_swiginit(self, _resampler.new_Resampler(*args))
    resample_dqi = _swig_new_instance_method(_resampler.Resampler_resample_dqi)
    resample_field = _swig_new_instance_method(_resampler.Resampler_resample_field)
    map_values = _swig_new_instance_method(_resampler.Resampler_map_values)
    _v_map_info = _swig_new_instance_method(_resampler.Resampler__v_map_info)

    @property
    def map_info(self):
        return self._v_map_info()

    _v_number_sub_pixel = _swig_new_instance_method(_resampler.Resampler__v_number_sub_pixel)

    @property
    def number_sub_pixel(self):
        return self._v_number_sub_pixel()

    __str__ = _swig_new_instance_method(_resampler.Resampler___str__)

    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _resampler.delete_Resampler

# Register Resampler in _resampler:
_resampler.Resampler_swigregister(Resampler)

__all__ = ["Resampler"]


