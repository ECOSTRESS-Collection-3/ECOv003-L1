# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ecostress_time_table.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ecostress_time_table')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ecostress_time_table')
    _ecostress_time_table = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ecostress_time_table', [dirname(__file__)])
        except ImportError:
            import _ecostress_time_table
            return _ecostress_time_table
        try:
            _mod = imp.load_module('_ecostress_time_table', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ecostress_time_table = swig_import_helper()
    del swig_import_helper
else:
    import _ecostress_time_table
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ecostress_time_table.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_ecostress_time_table.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_ecostress_time_table.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_ecostress_time_table.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_ecostress_time_table.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_ecostress_time_table.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_ecostress_time_table.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_ecostress_time_table.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_ecostress_time_table.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_ecostress_time_table.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_ecostress_time_table.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_ecostress_time_table.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_ecostress_time_table.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_ecostress_time_table.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_ecostress_time_table.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_ecostress_time_table.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_ecostress_time_table.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _ecostress_time_table.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _ecostress_time_table.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.time_table
import geocal_swig.generic_object
import geocal_swig.with_parameter
import geocal_swig.geocal_time
class EcostressTimeTable(geocal_swig.time_table.TimeTable):
    """

    This is the ecostress time table.

    The table is different before and after we do the 2 line averaging in
    L1B_CAL, we indicate this by "averaging_done" set to true, which
    means each scan is treated as 128 lines rather than 256.

    Note that only the image coordinates changes from 128/256 per scan
    index. The FrameCoordinate are in terms of the actual Ecostress
    camera, so there is always 256 frame coordinate lines in a scan.

    C++ includes: ecostress_time_table.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        EcostressTimeTable::EcostressTimeTable(const std::string &Fname, bool Averaging_done, double
        Mirror_rpm=25.4, double Frame_time=0.0000321875)
        Create a time table by reading the input file.

        The file should be a L1A_PIX or a L1B_RAD file.

        This variation lets you set the Averaging_done explicitly. Normally we
        just set Averaging_done for L1B_RAD and have it false for L1A_PIX. But
        for testing purposes it can be useful to read one dataset and then
        pretend it for a different averaging mode. 
        """
        _ecostress_time_table.EcostressTimeTable_swiginit(self, _ecostress_time_table.new_EcostressTimeTable(*args))

    def scan_index_to_line(self, Scan_index):
        """

        void Ecostress::EcostressTimeTable::scan_index_to_line(int Scan_index, int &Lstart, int &Lend) const
        Image lines that go with a scan.

        Note this is the normal C convention of including the start but not
        the end, so Lstart <= L < Lend for L in scan Scan_index 
        """
        return _ecostress_time_table.EcostressTimeTable_scan_index_to_line(self, Scan_index)


    def line_to_scan_index(self, Line):
        """

        int Ecostress::EcostressTimeTable::line_to_scan_index(double Line) const
        Convert line to scan index. 
        """
        return _ecostress_time_table.EcostressTimeTable_line_to_scan_index(self, Line)


    def _v_averaging_done(self):
        """

        bool Ecostress::EcostressTimeTable::averaging_done() const
        If true, then we have already done the 2 line averaging.

        Each scan is 256 lines if this is false, 128 if it is true. 
        """
        return _ecostress_time_table.EcostressTimeTable__v_averaging_done(self)


    @property
    def averaging_done(self):
        return self._v_averaging_done()


    def _v_number_line_scan(self):
        """

        int Ecostress::EcostressTimeTable::number_line_scan() const

        """
        return _ecostress_time_table.EcostressTimeTable__v_number_line_scan(self)


    @property
    def number_line_scan(self):
        return self._v_number_line_scan()


    def _v_number_scan(self):
        """

        int Ecostress::EcostressTimeTable::number_scan() const
        Number of scans we have. 
        """
        return _ecostress_time_table.EcostressTimeTable__v_number_scan(self)


    @property
    def number_scan(self):
        return self._v_number_scan()


    def _v_mirror_rpm(self):
        """

        double Ecostress::EcostressTimeTable::mirror_rpm() const
        Mirror rotation speed, in rotations per minute (nominal, actual speed
        may be different). 
        """
        return _ecostress_time_table.EcostressTimeTable__v_mirror_rpm(self)


    @property
    def mirror_rpm(self):
        return self._v_mirror_rpm()


    def _v_nominal_scan_time(self):
        """

        double Ecostress::EcostressTimeTable::nominal_scan_time() const
        Nominal spacing in seconds between scans.

        The actual time may be different, but this is the best approximation.

        """
        return _ecostress_time_table.EcostressTimeTable__v_nominal_scan_time(self)


    @property
    def nominal_scan_time(self):
        return self._v_nominal_scan_time()


    def _v_frame_time(self):
        """

        double Ecostress::EcostressTimeTable::frame_time() const
        Time in seconds between frames/samples. 
        """
        return _ecostress_time_table.EcostressTimeTable__v_frame_time(self)


    @property
    def frame_time(self):
        return self._v_frame_time()


    def __reduce__(self):
      return _new_from_serialization, (geocal_swig.serialize_write_binary(self),)

    __swig_destroy__ = _ecostress_time_table.delete_EcostressTimeTable
EcostressTimeTable.scan_index_to_line = new_instancemethod(_ecostress_time_table.EcostressTimeTable_scan_index_to_line, None, EcostressTimeTable)
EcostressTimeTable.line_to_scan_index = new_instancemethod(_ecostress_time_table.EcostressTimeTable_line_to_scan_index, None, EcostressTimeTable)
EcostressTimeTable._v_averaging_done = new_instancemethod(_ecostress_time_table.EcostressTimeTable__v_averaging_done, None, EcostressTimeTable)
EcostressTimeTable._v_number_line_scan = new_instancemethod(_ecostress_time_table.EcostressTimeTable__v_number_line_scan, None, EcostressTimeTable)
EcostressTimeTable._v_number_scan = new_instancemethod(_ecostress_time_table.EcostressTimeTable__v_number_scan, None, EcostressTimeTable)
EcostressTimeTable._v_mirror_rpm = new_instancemethod(_ecostress_time_table.EcostressTimeTable__v_mirror_rpm, None, EcostressTimeTable)
EcostressTimeTable._v_nominal_scan_time = new_instancemethod(_ecostress_time_table.EcostressTimeTable__v_nominal_scan_time, None, EcostressTimeTable)
EcostressTimeTable._v_frame_time = new_instancemethod(_ecostress_time_table.EcostressTimeTable__v_frame_time, None, EcostressTimeTable)
EcostressTimeTable_swigregister = _ecostress_time_table.EcostressTimeTable_swigregister
EcostressTimeTable_swigregister(EcostressTimeTable)


__all__ = ["EcostressTimeTable"]



