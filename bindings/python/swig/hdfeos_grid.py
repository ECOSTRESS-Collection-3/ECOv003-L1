# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _hdfeos_grid

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _hdfeos_grid.SWIG_PyInstanceMethod_New
_swig_new_static_method = _hdfeos_grid.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _hdfeos_grid.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdfeos_grid.delete_SwigPyIterator
    value = _swig_new_instance_method(_hdfeos_grid.SwigPyIterator_value)
    incr = _swig_new_instance_method(_hdfeos_grid.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_hdfeos_grid.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_hdfeos_grid.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_hdfeos_grid.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_hdfeos_grid.SwigPyIterator_copy)
    next = _swig_new_instance_method(_hdfeos_grid.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_hdfeos_grid.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_hdfeos_grid.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_hdfeos_grid.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_hdfeos_grid.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_hdfeos_grid.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_hdfeos_grid.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_hdfeos_grid.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_hdfeos_grid.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_hdfeos_grid.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _hdfeos_grid:
_hdfeos_grid.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _hdfeos_grid.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.generic_object
import geocal_swig.map_info
class HdfEosGrid(geocal_swig.generic_object.GenericObject):
    r"""

    This handles a HDFEOS grid in a file.

    Note that we allow fields to be created, but don't provide any acces
    to the actual data in this class. This is because we create fields in
    python, and h5py is already a complete library. We don't need to
    duplicate the functionality. We really just want to use HDFEOS to
    create the map projection stuff, and then fall back to h5py to do all
    the reading/writing.

    Similarly, we don't provide access to any attributes, again because
    h5py already had this.

    C++ includes: hdfeos_grid.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        HdfEosGrid::HdfEosGrid(const boost::shared_ptr< HdfEosFileHandle > &Fhandle, const
        std::string &Grid_name, const GeoCal::MapInfo &Minfo, int
        Compression_type=HE5_HDFE_COMP_DEFLATE, int Deflate_level=9)
        Ecostress::HdfEosGrid::HdfEosGrid
        Constructor, create a grid with the given map info.

        """
        _hdfeos_grid.HdfEosGrid_swiginit(self, _hdfeos_grid.new_HdfEosGrid(*args))
    close = _swig_new_instance_method(_hdfeos_grid.HdfEosGrid_close)
    dms_to_deg = _swig_new_static_method(_hdfeos_grid.HdfEosGrid_dms_to_deg)
    deg_to_dms = _swig_new_static_method(_hdfeos_grid.HdfEosGrid_deg_to_dms)
    _v_grid_name = _swig_new_instance_method(_hdfeos_grid.HdfEosGrid__v_grid_name)

    @property
    def grid_name(self):
        return self._v_grid_name()

    _v_file_handle = _swig_new_instance_method(_hdfeos_grid.HdfEosGrid__v_file_handle)

    @property
    def file_handle(self):
        return self._v_file_handle()

    _v_grid_id = _swig_new_instance_method(_hdfeos_grid.HdfEosGrid__v_grid_id)

    @property
    def grid_id(self):
        return self._v_grid_id()

    _v_map_info = _swig_new_instance_method(_hdfeos_grid.HdfEosGrid__v_map_info)

    @property
    def map_info(self):
        return self._v_map_info()

    _v_field_name = _swig_new_instance_method(_hdfeos_grid.HdfEosGrid__v_field_name)

    @property
    def field_name(self):
        return self._v_field_name()

    add_field_uchar = _swig_new_instance_method(_hdfeos_grid.HdfEosGrid_add_field_uchar)
    add_field_float = _swig_new_instance_method(_hdfeos_grid.HdfEosGrid_add_field_float)
    __str__ = _swig_new_instance_method(_hdfeos_grid.HdfEosGrid___str__)
    __swig_destroy__ = _hdfeos_grid.delete_HdfEosGrid

# Register HdfEosGrid in _hdfeos_grid:
_hdfeos_grid.HdfEosGrid_swigregister(HdfEosGrid)

__all__ = ["HdfEosGrid"]


