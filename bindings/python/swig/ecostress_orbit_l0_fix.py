# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
from ._swig_wrap import _ecostress_orbit_l0_fix

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _ecostress_orbit_l0_fix.SWIG_PyInstanceMethod_New
_swig_new_static_method = _ecostress_orbit_l0_fix.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SWIG_MODULE_ALREADY_DONE = _ecostress_orbit_l0_fix.SWIG_MODULE_ALREADY_DONE
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ecostress_orbit_l0_fix.delete_SwigPyIterator
    value = _swig_new_instance_method(_ecostress_orbit_l0_fix.SwigPyIterator_value)
    incr = _swig_new_instance_method(_ecostress_orbit_l0_fix.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_ecostress_orbit_l0_fix.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_ecostress_orbit_l0_fix.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_ecostress_orbit_l0_fix.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_ecostress_orbit_l0_fix.SwigPyIterator_copy)
    next = _swig_new_instance_method(_ecostress_orbit_l0_fix.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_ecostress_orbit_l0_fix.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_ecostress_orbit_l0_fix.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_ecostress_orbit_l0_fix.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_ecostress_orbit_l0_fix.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_ecostress_orbit_l0_fix.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_ecostress_orbit_l0_fix.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_ecostress_orbit_l0_fix.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_ecostress_orbit_l0_fix.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_ecostress_orbit_l0_fix.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ecostress_orbit_l0_fix:
_ecostress_orbit_l0_fix.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _ecostress_orbit_l0_fix.SHARED_PTR_DISOWN

import os

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_serialization(data):
    return geocal_swig.serialize_function.serialize_read_binary(data)

def _new_from_serialization_dir(dir, data):
    curdir = os.getcwd()
    try:
      os.chdir(dir)
      return geocal_swig.serialize_function.serialize_read_binary(data)
    finally:
      os.chdir(curdir)


def _new_vector(cls, version, lst):
    '''Create a vector from a list.'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    for i in lst:
       inst.append(i)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import geocal_swig.orbit_array
import geocal_swig.orbit_quaternion_list
import geocal_swig.orbit
import geocal_swig.generic_object
import geocal_swig.observer
import geocal_swig.with_parameter
import geocal_swig.look_vector
class EcostressOrbitL0Fix(geocal_swig.orbit_array.OrbitArray_Eci_TimeJ2000):
    r"""

    This is a variation of the EcostressOrbit where we correct for the
    wrong L0 time tags.

    This class should go away once L0 software has been fixed and we've
    regenerated all the data.

    It would be nice just to have a flag in EcostressOrbit to turn the fix
    on or off, but unfortunately the layout of the code makes this pretty
    much impossible without making changed to geocal. Not worth it for a
    one off fix that will go away in the future.

    C++ includes: ecostress_orbit_l0_fix.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        Ecostress::EcostressOrbitL0Fix::EcostressOrbitL0Fix(const std::string &Fname, double Extrapolation_pad=5.0, double
        Large_gap=10.0, bool Apply_fix=true)
        Ecostress::EcostressOrbitL0Fix::EcostressOrbitL0Fix
        Constructor, read the give file and allow the given amount of
        extrapolation pad.
        Treat gaps in the data > Large_gap as a large gap. 
        """
        _ecostress_orbit_l0_fix.EcostressOrbitL0Fix_swiginit(self, _ecostress_orbit_l0_fix.new_EcostressOrbitL0Fix(*args))
    fix_l0_j2000_time = _swig_new_static_method(_ecostress_orbit_l0_fix.EcostressOrbitL0Fix_fix_l0_j2000_time)
    _v_file_name = _swig_new_instance_method(_ecostress_orbit_l0_fix.EcostressOrbitL0Fix__v_file_name)

    @property
    def file_name(self):
        return self._v_file_name()

    _v_apply_fix = _swig_new_instance_method(_ecostress_orbit_l0_fix.EcostressOrbitL0Fix__v_apply_fix)

    @property
    def apply_fix(self):
        return self._v_apply_fix()

    spacecraft_x_mostly_in_velocity_direction = _swig_new_instance_method(_ecostress_orbit_l0_fix.EcostressOrbitL0Fix_spacecraft_x_mostly_in_velocity_direction)
    _v_large_gap = _swig_new_instance_method(_ecostress_orbit_l0_fix.EcostressOrbitL0Fix__v_large_gap)

    @property
    def large_gap(self):
        return self._v_large_gap()

    @large_gap.setter
    def large_gap(self, value):
      self._v_large_gap(value)

    _v_extrapolation_pad = _swig_new_instance_method(_ecostress_orbit_l0_fix.EcostressOrbitL0Fix__v_extrapolation_pad)

    @property
    def extrapolation_pad(self):
        return self._v_extrapolation_pad()

    @extrapolation_pad.setter
    def extrapolation_pad(self, value):
      self._v_extrapolation_pad(value)


    def __reduce__(self):
    #Special handling for when we are doing boost serialization, we set
    #"this" to None
      if(self.this is None):
        return super().__reduce__()
      return _new_from_serialization, (geocal_swig.serialize_function.serialize_write_binary(self),)

    __swig_destroy__ = _ecostress_orbit_l0_fix.delete_EcostressOrbitL0Fix

# Register EcostressOrbitL0Fix in _ecostress_orbit_l0_fix:
_ecostress_orbit_l0_fix.EcostressOrbitL0Fix_swigregister(EcostressOrbitL0Fix)

__all__ = ["EcostressOrbitL0Fix"]


